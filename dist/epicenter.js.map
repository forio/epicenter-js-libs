{"version":3,"sources":["webpack:///webpack/bootstrap 8028330806d9fc8e3413","webpack:///./src/transport/http-transport-factory.js","webpack:///./src/service/service-utils.js","webpack:///./src/util/object-util.js","webpack:///./src/store/session-manager.js","webpack:///./src/service/configuration-service/index.js","webpack:///./src/util/run-util.js","webpack:///./src/util/inherit.js","webpack:///./src/util/index.js","webpack:///./src/managers/run-strategies/strategy-utils.js","webpack:///./src/service/run-api-service/index.js","webpack:///./src/util/query-util.js","webpack:///./src/service/world-api-adapter/index.js","webpack:///./src/managers/run-strategies/conditional-creation-strategy.js","webpack:///./src/managers/auth-manager/index.js","webpack:///./src/managers/run-strategies/none-strategy.js","webpack:///./src/service/url-config-service/index.js","webpack:///./src/managers/key-names.js","webpack:///./src/service/data-api-service/index.js","webpack:///./src/service/member-api-adapter/index.js","webpack:///./src/managers/epicenter-channel-manager/index.js","webpack:///./src/service/consensus-api-service/consensus-service.js","webpack:///./src/service/user-api-adapter/index.js","webpack:///./src/service/timer-service/timer-constants.js","webpack:///./src/managers/run-manager/index.js","webpack:///./src/managers/saved-runs-manager/index.js","webpack:///./src/api-version.json","webpack:///./src/transport/ajax-http-transport.js","webpack:///./src/service/run-api-service/variables-api-service.js","webpack:///./src/service/introspection-api-service/index.js","webpack:///./src/store/store-factory.js","webpack:///./src/store/cookie-store.js","webpack:///./src/service/auth-api-service/index.js","webpack:///./src/service/group-api-service/index.js","webpack:///./src/service/channel-service/index.js","webpack:///./src/service/presence-api-service/index.js","webpack:///./src/service/state-api-adapter/index.js","webpack:///./src/service/time-api-service/index.js","webpack:///./src/util/pubsub/index.js","webpack:///./src/util/array-utils.js","webpack:///./src/service/timer-service/start-time-strategies/start-when-user-condition.js","webpack:///./src/service/consensus-api-service/consensus-group-service.js","webpack:///./src/managers/run-strategies/index.js","webpack:///./src/managers/run-strategies/multiplayer-strategy.js","webpack:///./src/managers/run-strategies/reuse-last-initialized.js","webpack:///./src/managers/run-strategies/reuse-by-tracking-key.js","webpack:///./src/managers/run-strategies/multiplayer-with-tracking-key.js","webpack:///./src/managers/world-manager/index.js","webpack:///./src/app.js","webpack:///./src/service/url-config-service/env-load.js","webpack:///./src/util/option-utils.js","webpack:///./src/service/admin-file-service/index.js","webpack:///./src/service/data-api-service/data-service-scope-utils.js","webpack:///./node_modules/Base64/base64.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./src/managers/epicenter-channel-manager/channel-manager/index.js","webpack:///./src/managers/epicenter-channel-manager/world-channel/subscribe-world-channel.js","webpack:///./src/managers/epicenter-channel-manager/world-channel/world-channel-constants.js","webpack:///./src/service/asset-api-adapter/index.js","webpack:///./src/service/timer-service/index.js","webpack:///external \"jQuery\"","webpack:///./src/service/timer-service/start-time-strategies/index.js","webpack:///./src/service/timer-service/start-time-strategies/start-on-first-user.js","webpack:///./src/service/timer-service/start-time-strategies/start-when-all-users.js","webpack:///./src/service/timer-service/timer-actions-reducer.js","webpack:///./src/service/password-api-service/index.js","webpack:///./src/service/account-api-service/index.js","webpack:///./src/service/project-api-service/index.js","webpack:///./src/managers/scenario-manager/index.js","webpack:///./src/managers/run-strategies/deprecated/new-if-initialized-strategy.js","webpack:///./src/managers/run-strategies/deprecated/new-if-persisted-strategy.js","webpack:///./src/managers/run-strategies/reuse-never.js","webpack:///./src/managers/run-strategies/reuse-per-session.js","webpack:///./src/managers/run-strategies/reuse-across-sessions.js","webpack:///./src/managers/run-strategies/use-specific-run-strategy.js","webpack:///./src/managers/run-manager/special-operations.js","webpack:///./src/util/bulk-fetch-records.js","webpack:///./src/managers/scenario-manager/scenario-strategies/baseline-strategy.js","webpack:///./src/managers/scenario-manager/scenario-strategies/reuse-last-unsaved.js","webpack:///./src/managers/user-manager/index.js","webpack:///./src/managers/auth-manager-v3/index.js","webpack:///./src/service/v3/auth-api-service-v3/index.js","webpack:///./src/service/v3/member-api-adapter-v3/index.js","webpack:///./src/managers/settings-manager/index.js","webpack:///./src/managers/settings-manager/settings-service.js","webpack:///./src/managers/consensus-manager/index.js","webpack:///./src/managers/consensus-manager/strategies/mandatory-consensus-strategy.js"],"names":["transport","getApiUrl","apiEndpoint","serviceOptions","urlConfig","ConfigService","get","account","accountPath","project","projectPath","getAPIPath","getDefaultOptions","defaults","rest","Array","prototype","slice","call","arguments","sessionManager","SessionManager","getMergedOptions","apply","concat","$","extend","url","token","headers","Authorization","getURLConfig","options","getHTTPTransport","transportOptions","overrides","mergedOptions","http","TransportFactory","pick","obj","keys","res","p","indexOf","omit","copy","forEach","key","isEmpty","value","isPlainObject","Object","length","ensureKeysPresent","keysList","context","undefined","Error","JSON","stringify","keyNames","require","StorageFactory","optionUtils","EPI_SESSION_KEY","EPI_MANAGER_KEY","store","synchronous","managerOptions","getBaseOptions","libOptions","getOptions","finalOptions","getStore","baseOptions","storeOpts","isEpicenterDomain","isLocal","isCustomDomain","root","publicAPI","saveSession","userInfo","serialized","set","getSession","finalOpts","session","parse","groups","group","groupId","groupName","isFac","removeSession","cookieKey","cookieName","remove","document","cookie","split","map","c","filter","args","auth_token","factory","sessionDefaults","userId","userName","module","exports","config","logLevel","server","urlService","data","env","property","MAX_URL_LENGTH","extractValidRunParams","params","validParams","parseContentRange","range","replace","splitType","splitRange","start","parseInt","end","total","normalizeOperations","operations","returnList","ops","_concat","arr","_normalizePlainObjects","each","opn","arg","push","_normalizeStructuredObjects","operation","name","_normalizeObject","_normalizeLiterals","_normalizeArrays","index","isArray","splitGetFactory","httpOptions","getValue","getFinalUrl","queryParams","toQueryFormat","questionIdx","include","encodeURI","dtd","Deferred","paramsCopy","urlNoIncludes","diff","oldSuccess","success","noop","oldError","error","currIncludes","includeOpts","currLength","encodeURIComponent","variable","pop","varLenght","reqs","reqParams","when","then","isValid","reject","firstResponse","isObject","isRunAPI","variables","aggregateRun","idx","run","resolve","aggregatedRuns","runs","idxRun","id","aggregatedVariables","vars","promise","inherit","C","P","F","__super","constructor","dest","current","j","base","props","staticProps","parent","child","hasOwnProperty","result","item","rejectPromise","type","message","payload","resolvePromise","val","CustomError","makePromise","$def","toReturn","r","catch","e","mergeRunOptions","RunService","updateConfig","injectFiltersFromSession","currentFilter","scopeByGroup","scopeByUser","opts","newFilter","scope","injectScopeFromSession","currentParams","autoRestore","updateURLConfig","getFilterURL","filterMatrix","toMatrixFormat","addAutoRestoreHeader","isFilterRunId","autorestoreOpts","updateHTTPConfig","splitGet","setFilterOrThrowError","publicAsyncAPI","create","createOptions","model","response","post","query","qs","outputModifier","mergedQuery","load","runID","filters","removeFromMemory","delete","save","attributes","saveable","reduce","accum","k","nestedVal","patch","do","opsArgs","postOptions","prms","serial","opParams","me","$d","responses","doSingleOp","op","shift","err","parallel","queue","i","actualResponse","a","fail","introspect","introspectionConfig","introspection","IntrospectionService","byRunID","byModel","publicSyncAPI","getCurrentConfig","vs","VariablesService","runService","translateParts","ip","translateRawValue","OPERATORS","alreadyHasOperator","some","o","charAt","withPrefix","parts","mapped","v","translated","prefixed","t","join","returnArray","qsToObject","qsArray","returnObj","qKey","qVal","mergeQS","qs1","qs2","obj1","obj2","normalizeSlashes","leading","trailing","protocolMatch","match","protocol","cleaned","apiBase","assignmentEndpoint","projectEndpoint","WorldAPIAdapter","setIdFilterOrThrowError","validateModelOrThrowError","worldApiParams","_pick","update","whitelist","updateOptions","deleteOptions","list","worldId","getWorldsForUser","addUsers","users","u","updateUser","user","validFields","patchOptions","removeUser","autoDeleteWorld","deleteWorldIfEmpty","getCurrentRunId","postParams","validRunParams","getCurrentWorldForUser","worlds","sort","b","Date","lastModified","currentWorld","resolveWith","deleteRun","newRunForWorld","currentRunOptions","autoAssign","opt","maxUsers","userIds","getProjectSettings","consensus","conOpts","extractNamesFromOpts","nameOpts","consensusGroup","con","ConsensusService","getPresenceForUsers","world","getUsersForWorld","worldid","w","ps","PresenceService","worldLoadPromise","getStatusForUsers","Base","classFrom","Strategy","condition","reset","userSession","freshlyCreated","getRun","runSession","loadAndCheck","shouldCreate","msg","atob","window","requiresGroup","AuthManager","authAdapter","AuthAdapter","_findUserInGroup","members","login","adapterOptions","outSuccess","outError","decodeToken","encoded","handleGroupError","statusCode","logout","statusText","status","handleSuccess","access_token","oldGroups","userGroupOpts","auth","isTeamMember","parent_account_id","user_name","sessionInfo","user_id","handleGroupList","groupList","userGroups","filteredGroups","grep","resGroup","role","groupData","sessionInfoWithGroup","getUserGroups","groupService","GroupService","getGroups","removeCookieFn","getToken","memberInfo","memberAdapter","MemberAdapter","getGroupsForUser","isLoggedIn","getCurrentUserSessionInfo","addGroups","extendedGroup","validProps","NoRunStrategy","epiVersion","isLocalHost","host","location","pathname","getLocalHost","existingFn","localHostFn","isFunction","UrlConfigService","envConf","configOverrides","isLocalhost","actingHost","actingProtocol","HOST_API_MAPPING","publicExports","api","apiHost","path","pathHasApp","appPath","accnt","prj","versionPath","version","baseURL","PROJECT_APIS","apiMapping","channel","actualProtocol","configProtocol","apiPath","STRATEGY_SESSION_KEY","API_ENDPOINT","getAPIURL","getURL","bind","DataService","SCOPES","CUSTOM","documentID","q","attrs","documentPath","put","collName","scopedCollName","getScopedName","cm","ChannelManager","getDataChannel","MemberAPIService","getFinalParams","generateUserQuery","uidQuery","patchUserActiveField","active","isString","objParams","getParams","addUsersToGroup","userlist","getGroupDetails","makeUserActive","makeUserInactive","validTypes","general","chat","getFromSessionOrError","sessionKeyName","settings","isPresenceData","EpicenterChannelManager","defaultCometOptions","handshake","userProp","ext","authorization","getChannel","channelOpts","allowAllChannels","baseParts","channelType","getGroupChannel","baseTopic","oldsubs","subscribe","topic","callback","callbackWithoutPresenceData","getWorldChannel","subscribeToWorldChannel","getUserChannel","userid","getPresenceChannel","callbackWithOnlyPresenceData","collection","callbackWithCleanData","meta","subType","date","dataPath","actualData","normalizeActions","actions","action","execute","getHTTPOptions","urlSegment","roles","field","fieldVal","rolesAccum","roleName","updateDefaults","defaultActions","forceClose","submitActions","undoSubmit","UserAPIAdapter","toIdFilters","threshold","getById","createUsers","userList","requiredFields","sortedUsers","missingRequiredFields","invalid","missingFields","valid","translateV3UserKeys","v3UserKeyList","resp","statusMessage","Promise","ACTIONS","CREATE","START","PAUSE","RESUME","COMPLETE","RESET","TICK","STRATEGY","START_BY_FIRST_USER","START_WHEN_ALL_USERS","patchRunService","service","manager","patched","orig","reservedOps","specialOperations","sessionKeyFromOptions","sessionKey","setRunInSession","RunManager","baseKey","strategy","strategies","getBestStrategy","sessionStore","sessionContents","runId","authSession","requiresAuth","console","fetchProm","warn","canCache","allowRunIDCache","results","optionsToPassOn","strategyKeys","SavedRunsManager","otherFields","runConfig","defaultToSave","trackingKey","param","saved","trashed","mark","toMark","rs","existingOptions","proms","modifiers","runopts","scopedFilter","opModifiers","direction","recordsPerFetch","onData","startRecord","endRecord","bulkFetchRuns","opModifiersWithPaging","contentType","parameterParser","xhrFields","withCredentials","d","connect","method","connectOptions","ALLOWED_TO_BE_FUNCTIONS","log","oldSuccessFn","ajaxStatus","ajaxReq","beforeSend","xhr","requestUrl","paramsToIgnore","ajax","ajaxOptions","trim","delimiter","head","modelFile","Cookie","newCookie","hostname","secureFlag","validHost","domain","secure","setOptions","samesite","contents","expires","cookieReg","RegExp","exec","decodeURIComponent","remOptions","destroy","aKeys","nIdx","AuthService","password","finalParams","makeName","channelName","newName","ChannelService","topicResolver","channelOptions","topics","subscriptionIds","batch","returnObjs","publish","unsubscribe","event","on","off","trigger","userOnlineTimers","cancelKeepOnline","clearInterval","markOnline","keepOnline","PRESENCE_TIMEOUT_INTERVAL","setInterval","markOffline","getStatus","presenceList","isOnline","find","default","StateService","parseRunIdOrError","httpParams","replay","replayOptions","rewind","clone","cloneForSensitivity","modelContext","restorations","assembly","operationType","targetType","targetKey","executionContext","tool","vensim","sensitivityMode","httpoptions","TimeAPIService","responseText","objectToPublishable","publishableToObject","mergeWith","normalizeParamOptions","publishValue","uniqueId","prefix","makeSubs","toLowerCase","checkAndNotifyBatch","subscription","merged","matchingTopics","intersection","toSend","checkAndNotify","PubSub","validTopics","subscriptions","normalized","subs","fn","cb","knownTopics","areAllValid","olderLength","remaining","reduceActions","initialState","startTime","startedUsers","reduced","ts","time","isUserAlreadyCounted","areUserRequirementsMet","ConsensusGroupService","cs","REUSE_NEVER","REUSE_PER_SESSION","REUSE_ACROSS_SESSIONS","REUSE_LAST_INITIALIZED","REUSE_BY_TRACKINGKEY","REUSE_BY_TRACKINGKEY_MULTIPLAYER","USE_SPECIFIC_RUN","MULTIPLAYER","NONE","conditionalCreation","newIfInitialized","newIfPersisted","identity","multiplayer","useSpecificRun","reuseNever","reusePerSession","reuseAcrossSessions","reuseLastInitialized","reuseByTrackingKey","multiplayerWithTrackingKey","strategyManager","byName","strategyName","strategyOptions","initOperation","StrategyCtor","strategyInstance","register","worldFromRun","worldService","WorldApiAdapter","worldApi","runid","getCurrentWorld","loadRunFromWorld","RUN_CREATION_STATUS","MultiplayerStrategy","ReuseLastInitializedStrategy","flag","isInitComplete","createResponse","patchResponse","sessionFilter","startrecord","endrecord","latestActiveRun","errors","RUN_LIMIT_REACHED","NO_TRACKING_KEY","makeFilter","metaFilter","runFilter","getRunsForFilter","addSettingsToRun","ReuseWithTrackingKeyStrategy","runLimit","Infinity","onCreate","prom","runCreateOptions","applied","noRunLimit","startedRuns","getResponseHeader","getSettings","checkIfWithinRunLimit","forceCreateRun","MultiplayerWithTrackingKeyStrategy","scopeConfig","_applySettingsToNewRun","_forceCreateRun","buildStrategy","Ctor","WorldManager","WorldApi","_auth","getCurrentRun","curUserId","curGroupName","getAndRestoreLatestRun","runOpts","rm","util","SKIP_ENV_LOAD","Transport","Ajax","URL","Config","Run","File","Variables","Data","Auth","World","State","User","Member","Asset","Group","Introspect","Presence","Time","Timer","Password","Account","Consensus","ConsensusGroup","Project","Store","ScenarioManager","v3","Settings","Channel","ConsensusManager","RELEASE_VERSION","constants","URLConfigService","envLoad","infoUrl","envPromise","async","customDefaults","libDefaults","setDefaults","folderType","uploadBody","fileName","boundary","body","uploadFileOptions","filePath","extraParams","FormData","processData","upload","getContents","replaceExisting","conflictStatus","rename","GROUP","RUN","USER","PROJECT","FACILITATOR","UNAUTHORIZED","addScopeToCollection","publicAccessScopes","allowPublicAccess","isValidSession","toUpperCase","sessionOverride","am","defaultSession","newURL","doc","scopedCollection","fullURL","cometd","websocketEnabled","ackEnabled","shareConnection","currentSubscriptions","_cometd","CometD","isConnected","connectionBroken","connectionSucceeded","configure","addListener","wasConnected","successful","resubscribe","subid","unsubs","removed","splice","TOPICS","fullTopic","subscribeOptions","subscribedTopic","subscribedSubTopic","includeMine","PRESENCE","wm","WorldService","fakeMeta","now","TOPIC_SUBTYPES","ONLINE","source","normalizedUser","filterByType","isTopicMatch","isSubTopicMatch","notificationFrom","ROLES","isMine","isInitiatorMatch","shouldPassOn","VARIABLES","OPERATIONS","UNASSIGN","oldRole","CONSENSUS","OFFLINE","ASSIGN","UPDATE","ALL","RUN_VARIABLES","RUN_OPERATIONS","RUN_RESET","PRESENCE_ONLINE","PRESENCE_OFFLINE","ROLES_ASSIGN","ROLES_UNASSIGN","CONSENSUS_CREATE","CONSENSUS_UPDATE","AssetAdapter","fullUrl","assetApiParams","validateFilename","filename","validateUrlParams","partKeys","buildUrl","subEndPoint","urlOptions","getServiceOptions","files","fullPathFiles","file","getTargetUploadURL","assign","ttlSeconds","assetUrl","ds","Dataservice","getStateFromActions","currentTime","getStartTime","getStrategy","state","TimerService","STRATEGIES","interval","dataChannelSubid","isNaN","timeLimit","createAction","startImmediately","makeAction","saveAs","lastAction","getState","createOpts","getCurrentTime","toISOString","pushToArray","errorMsg","addTimerAction","TimeService","getTime","dataChannel","cancelTimer","createTimer","tickInterval","isStarted","isPaused","startOnFirstUser","startWhenAllUsers","startWhenCondition","requiredUsernames","joinedUsers","joinedNames","requiredUsersJoined","toDetailedTime","Math","max","secs","floor","minutesRemaining","secondsRemaining","minutes","seconds","lastPausedTime","totalPauseTime","elapsedTime","pausedTime","elapsed","PasswordService","resetParams","redirectUrl","isRelativeURL","absURL","AccountAPIService","getHTTP","getAccountSettings","MULTIPLAYER_ENDPOINT","ProjectAPIService","updateProjectSettings","getMultiplayerSettings","updateMultiplayerSettings","serviceOverrides","autoCreate","cookieNameFromOptions","advanceOperation","includeBaseLine","baseline","runName","savedRuns","BaselineStrategyToUse","BaselineStrategy","NoneStrategy","baselineName","origGetRuns","getRuns","scopeFromConfig","currentTrackingKey","mergedCurrentRunOptions","LastUnsavedStrategy","saveAndAdvance","metadata","sa","advanceOpns","exclude","markSaved","savedResponse","advance","ConditionalStrategy","createIf","initialized","IdentityStrategy","UseSpecificRun","bulkFetchRecords","fetchFn","contentRangeParser","currentRecords","getRecords","recordsFoundSoFar","min","allFound","recordsLeft","recordsNeeded","nextFetchOptions","stepTo","reuseStrategyOptions","isBaseline","ReuseinitStrategy","ReuseLastUnsaved","scoped","outputModifiers","parseUsers","expectedCols","label","parsed","row","splitter","test","rowContents","col","missingLabels","f","reason","ERROR_TYPES","EMPTY_USERS","NO_GROUP_PROVIDED","API_REJECT","GROUP_LIMIT_EXCEEDED","UserManager","usersToAdd","created","duplicates","userService","UserService","memberService","MemberService","userRes","validUsers","updated","duplicate","validIds","userWithErrors","handleMemberError","memberXHR","memberErr","responseJSON","isGroupLimitErr","groupLimit","skippedUsers","excludingSkipped","skipped","su","errorCodes","AUTHORIZATION_FAILURE","MFA_REQUIRED","MULTIPLE_GROUPS","AuthManagerV3","as","ms","us","loginParams","overridenServiceOptions","getAuthService","objectType","code","information","groupKey","multipleGroups","getMemberService","possibleGroups","groupInfo","groupRole","userHandle","accountShortName","projectShortName","v3UserKey","userKey","getUserService","userIdList","sm","AuthServiceV3","handle","MemberAPIServiceV3","SETTINGS_DELETED","SETTINGS_ACTIVATED","DRAFT_CREATED","DRAFT_UPDATED","SettingsManager","defaultSettings","interruptRunsInProgress","SettingsService","defaultSaveAndActivate","saveAndActivate","originalArgs","ws","deletionPromises","rawDataChannel","isDraft","allowCreateRun","applySettings","ReuseWithTrackingMultiplayer","ReuseWithTracking","getCurrentActive","getDefaults","cleanedSettings","settingsId","runOptions","savedRunManagerParams","getSavedRunsManagerForSetting","sanitize","currentDraft","getLastDraft","getAll","settingsList","lastSettings","draft","newSettings","defaultsProm","settingHistory","sorted","excludeDrafts","s","activeSettings","lastActive","createDraft","useDefaults","_updateDraftOrCreate","toSave","getCurrentWorldIdAndRoles","cg","mandatoryConsensusStrategy","maxRounds","NUMBER_SIZE","number","padStart","consensusList","lastConsensus","isLastPending","closed","allowCreateNew","newConsensusPromise","executeActionsImmediately"],"mappings":"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","file":"epicenter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8028330806d9fc8e3413","// var isNode = false; FIXME: Browserify/minifyify has issues with the next link\n// var transport = (isNode) ? require('./node-http-transport') : require('./ajax-http-transport');\nimport transport from './ajax-http-transport';\nexport default transport;\n\n\n\n// WEBPACK FOOTER //\n// ./src/transport/http-transport-factory.js","import ConfigService from './configuration-service';\nimport SessionManager from '../store/session-manager';\nimport TransportFactory from 'transport/http-transport-factory';\n\nexport function getApiUrl(apiEndpoint, serviceOptions) {\n    var urlConfig = new ConfigService(serviceOptions).get('server');\n    if (serviceOptions.account) {\n        urlConfig.accountPath = serviceOptions.account;\n    }\n    if (serviceOptions.project) {\n        urlConfig.projectPath = serviceOptions.project;\n    }\n    return urlConfig.getAPIPath(apiEndpoint);\n}\n\n/*\n* Gets the default options for a api service.\n* It will merge:\n* - The Session options (Using the Session Manager)\n* - The Authorization Header from the token option\n* - The full url from the endpoint option\n* With the supplied overrides and defaults\n*\n*/\nexport function getDefaultOptions(defaults) {\n    var rest = Array.prototype.slice.call(arguments, 1);\n    var sessionManager = new SessionManager();\n    var serviceOptions = sessionManager.getMergedOptions.apply(sessionManager, [defaults].concat(rest));\n\n    serviceOptions.transport = $.extend(true, {}, serviceOptions.transport, {\n        url: getApiUrl(serviceOptions.apiEndpoint, serviceOptions)\n    });\n\n    if (serviceOptions.token) {\n        $.extend(true, serviceOptions.transport, {\n            headers: {\n                Authorization: 'Bearer ' + serviceOptions.token\n            }\n        });\n    }\n    return serviceOptions;\n}\n\nexport function getURLConfig(options) {\n    var urlConfig = new ConfigService(options).get('server');\n    if (options.account) {\n        urlConfig.accountPath = options.account;\n    }\n    if (options.project) {\n        urlConfig.projectPath = options.project;\n    }\n    return urlConfig;\n}\nexport function getHTTPTransport(transportOptions, overrides) {\n    const mergedOptions = $.extend(true, {}, transportOptions, overrides);\n    const http = new TransportFactory(mergedOptions);\n    return http;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/service-utils.js","/**\n * Return selected keys from obj\n * \n * @param {object} obj\n * @param {string[]} keys\n * @return {object}\n */\nexport function pick(obj, keys) {\n    var res = {};\n    for (var p in obj) {\n        if (keys.indexOf(p) !== -1) {\n            res[p] = obj[p];\n        }\n    }\n    return res;\n}\n\n/**\n * Omits selected keys from obj\n * \n * @param {object} obj\n * @param {string[]} keys\n * @return {object}\n */\nexport function omit(obj, keys) {\n    const copy = $.extend(true, {}, obj);\n    keys.forEach((key)=> {\n        delete copy[key];\n    });\n    return copy;\n}\n\nexport function isEmpty(value) {\n    return (!value || ($.isPlainObject(value) && Object.keys(value).length === 0));\n}\n\n/**\n * Confirms presence of keys or throws error\n * \n * @param {Object} obj\n * @param {string[]} keysList\n * @param {string} [context] Prefix to add to error message\n * @throws {Error}\n * @return {boolean}\n */\nexport function ensureKeysPresent(obj, keysList, context) {\n    keysList.forEach((key)=> {\n        if (obj[key] === null || obj[key] === undefined) {\n            throw new Error(`${context || ''} Missing required parameter '${key}'' in ${JSON.stringify(obj)} `);\n        }\n    });\n    return true;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/util/object-util.js","'use strict';\n\nvar keyNames = require('../managers/key-names');\nvar StorageFactory = require('./store-factory');\nvar optionUtils = require('../util/option-utils');\n\nvar EPI_SESSION_KEY = keyNames.EPI_SESSION_KEY;\nvar EPI_MANAGER_KEY = 'epicenter.token'; //can't be under key-names, or logout will clear this too\n\nvar defaults = {\n    /**\n     * Where to store user access tokens for temporary access. Defaults to storing in a cookie in the browser.\n     * @type {string}\n     */\n    store: { synchronous: true }\n};\n\nvar SessionManager = function (managerOptions) {\n    managerOptions = managerOptions || {};\n    function getBaseOptions(overrides) {\n        overrides = overrides || {};\n        var libOptions = optionUtils.getOptions();\n        var finalOptions = $.extend(true, {}, defaults, libOptions, managerOptions, overrides);\n        return finalOptions;\n    }\n\n    function getStore(overrides) {\n        var baseOptions = getBaseOptions(overrides);\n        var storeOpts = baseOptions.store || {};\n        var isEpicenterDomain = !baseOptions.isLocal && !baseOptions.isCustomDomain;\n        if (storeOpts.root === undefined && baseOptions.account && baseOptions.project && isEpicenterDomain) {\n            storeOpts.root = '/app/' + baseOptions.account + '/' + baseOptions.project;\n        }\n        return new StorageFactory(storeOpts);\n    }\n\n    var publicAPI = {\n        saveSession: function (userInfo, options) {\n            var serialized = JSON.stringify(userInfo);\n            getStore(options).set(EPI_SESSION_KEY, serialized);\n        },\n        getSession: function (options) {\n            var store = getStore(options);\n            var finalOpts = store.serviceOptions;\n            var serialized = store.get(EPI_SESSION_KEY) || '{}';\n            var session = JSON.parse(serialized);\n            // If the url contains the project and account\n            // validate the account and project in the session\n            // and override project, groupName, groupId and isFac\n            // Otherwise (i.e. localhost) use the saved session values\n            var account = finalOpts.account;\n            var project = finalOpts.project;\n            if (account && session.account !== account) {\n                // This means that the token was not used to login to the same account\n                return {};\n            }\n            if (session.groups && account && project) {\n                var group = session.groups[project] || { groupId: '', groupName: '', isFac: false };\n                $.extend(session, { project: project }, group);\n            }\n            return session;\n        },\n        removeSession: function (options) {\n            var store = getStore(options);\n            Object.keys(keyNames).forEach(function (cookieKey) {\n                var cookieName = keyNames[cookieKey];\n                store.remove(cookieName);\n                document.cookie.split('; ')\n                    .map((c)=> c.split('=')[0] || '')\n                    .filter((c)=> c.indexOf(cookieName) === 0)\n                    .forEach((cookieName)=> store.remove(cookieName));\n            });\n            return true;\n        },\n        getStore: function (options) {\n            return getStore(options);\n        },\n\n        getMergedOptions: function () {\n            var args = Array.prototype.slice.call(arguments);\n            var overrides = $.extend.apply($, [true, {}].concat(args));\n            var baseOptions = getBaseOptions(overrides);\n            var session = this.getSession(overrides);\n\n            var token = session.auth_token;\n            if (!token) {\n                var factory = new StorageFactory();\n                token = factory.get(EPI_MANAGER_KEY);\n            }\n\n            var sessionDefaults = {\n                /**\n                 * For projects that require authentication, pass in the user access token (defaults to empty string). If the user is already logged in to Epicenter, the user access token is already set in a cookie and automatically loaded from there. (See [more background on access tokens](../../../project_access/)).\n                 * @see [Authentication API Service](../auth/auth-service/) for getting tokens.\n                 * @type {String}\n                 */\n                token: token,\n\n                /**\n                 * The account. If left undefined, taken from the cookie session.\n                 * @type {String}\n                 */\n                account: session.account,\n\n                /**\n                 * The project. If left undefined, taken from the cookie session.\n                 * @type {String}\n                 */\n                project: session.project,\n\n\n                /**\n                 * The group name. If left undefined, taken from the cookie session.\n                 * @type {String}\n                 */\n                group: session.groupName,\n                /**\n                 * Alias for group.\n                 * @type {String}\n                 */\n                groupName: session.groupName, //It's a little weird that it's called groupName in the cookie, but 'group' in all the service options, so normalize for both\n                /**\n                 * The group id. If left undefined, taken from the cookie session.\n                 * @type {String}\n                 */\n                groupId: session.groupId,\n                userId: session.userId,\n                userName: session.userName,\n            };\n            return $.extend(true, sessionDefaults, baseOptions);\n        }\n    };\n    $.extend(this, publicAPI);\n};\n\nmodule.exports = SessionManager;\n\n\n// WEBPACK FOOTER //\n// ./src/store/session-manager.js","/**\n * @class ConfigurationService\n *\n * All services take in a configuration settings object to configure themselves. A JS hash {} is a valid configuration object, but optionally you can use the configuration service to toggle configs based on the environment\n *\n * @example\n *     const cs = require('configuration-service')({\n *          dev: { //environment\n                port: 3000,\n                host: 'localhost',\n            },\n            prod: {\n                port: 8080,\n                host: 'api.forio.com',\n                logLevel: 'none'\n            },\n            logLevel: 'DEBUG' //global\n *     });\n *\n *      cs.get('logLevel'); //returns 'DEBUG'\n *\n *      cs.setEnv('dev');\n *      cs.get('logLevel'); //returns 'DEBUG'\n *\n *      cs.setEnv('prod');\n *      cs.get('logLevel'); //returns 'none'\n *\n */\n\nimport urlService from 'service/url-config-service';\n\nexport default class ConfigService {\n    constructor(config) {\n        const defaults = {\n            logLevel: 'NONE'\n        };\n        const serviceOptions = $.extend({}, defaults, config);\n        serviceOptions.server = urlService(serviceOptions.server);\n\n        this.serviceOptions = this.data = serviceOptions;\n    }\n\n    /**\n     * Set the environment key to get configuration options from\n     * @param { string} env\n     */\n    setEnv(env) {}\n    /**\n         * Get configuration.\n         * @param  { string} property optional\n         * @return {*}          Value of property if specified, the entire config object otherwise\n         */\n    get(property) {\n        return this.serviceOptions[property];\n    }\n    /**\n         * Set configuration.\n         * @param  { string|Object} key if a key is provided, set a key to that value. Otherwise merge object with current config\n         * @param  {*} value  value for provided key\n         */\n    set(key, value) {\n        this.serviceOptions[key] = value;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/configuration-service/index.js","/**\n * Utilities for working with the run service\n */\n\nimport { toQueryFormat } from './query-util';\nimport { pick } from 'util/object-util';\n\nvar MAX_URL_LENGTH = 2048;\n\nexport function extractValidRunParams(params) {\n    const validParams = ['model', 'sensitivityMode', 'scope', 'files', 'ephemeral', 'cinFiles'];\n    return pick(params, validParams);\n}\n\n/**\n * Parses content range header from ajax request\n * @example\n * parseContentRange(xhr.getResponseHeader('content-range'));\n * \n * @param {string} range Of the form \"records 0-99/3570\"\n * @return {{start: Number, end: Number, total: Number }}\n */\nexport function parseContentRange(range) {\n    if (!range) return null;\n\n    range = range.replace('records ', '');\n    const splitType = range.split('/');\n    const splitRange = splitType[0].split('-');\n    return {\n        start: parseInt(splitRange[0], 10),\n        end: parseInt(splitRange[1], 10),\n        total: parseInt(splitType[1], 10),\n    };\n}\n/**\n * normalizes different types of operation inputs\n * @param  {object|string[]|string} operations operations to perform\n * @param  {any[]} [args] arguments for operation\n * @return {{ops: string[], args: any[]}} operations of the form `{ ops: [], args: [] }`\n */\nexport function normalizeOperations(operations, args) {\n    if (!args) {\n        args = [];\n    }\n    var returnList = {\n        ops: [],\n        args: []\n    };\n\n    var _concat = function (arr) {\n        return (arr !== null && arr !== undefined) ? [].concat(arr) : [];\n    };\n\n    //{ add: [1,2], subtract: [2,4] }\n    var _normalizePlainObjects = function (operations, returnList) {\n        if (!returnList) {\n            returnList = { ops: [], args: [] };\n        }\n        $.each(operations, function (opn, arg) {\n            returnList.ops.push(opn);\n            returnList.args.push(_concat(arg));\n        });\n        return returnList;\n    };\n    //{ name: 'add', params: [1] }\n    var _normalizeStructuredObjects = function (operation, returnList) {\n        if (!returnList) {\n            returnList = { ops: [], args: [] };\n        }\n        returnList.ops.push(operation.name);\n        returnList.args.push(_concat(operation.params));\n        return returnList;\n    };\n\n    var _normalizeObject = function (operation, returnList) {\n        return ((operation.name) ? _normalizeStructuredObjects : _normalizePlainObjects)(operation, returnList);\n    };\n\n    var _normalizeLiterals = function (operation, args, returnList) {\n        if (!returnList) {\n            returnList = { ops: [], args: [] };\n        }\n        returnList.ops.push(operation);\n        returnList.args.push(_concat(args));\n        return returnList;\n    };\n\n\n    var _normalizeArrays = function (operations, arg, returnList) {\n        if (!returnList) {\n            returnList = { ops: [], args: [] };\n        }\n        $.each(operations, function (index, opn) {\n            if ($.isPlainObject(opn)) {\n                _normalizeObject(opn, returnList);\n            } else {\n                _normalizeLiterals(opn, args[index], returnList);\n            }\n        });\n        return returnList;\n    };\n\n    if ($.isPlainObject(operations)) {\n        _normalizeObject(operations, returnList);\n    } else if (Array.isArray(operations)) {\n        _normalizeArrays(operations, args, returnList);\n    } else {\n        _normalizeLiterals(operations, args, returnList);\n    }\n\n    return returnList;\n}\n\nexport function splitGetFactory(httpOptions) {\n    return function (params, options) {\n        var http = this; //eslint-disable-line\n        var getValue = function (name, options) {\n            var value = options[name] || httpOptions[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            return value;\n        };\n        var getFinalUrl = function (params) {\n            var url = getValue('url', options);\n            var data = params;\n            // There is easy (or known) way to get the final URL jquery is going to send so we're replicating it.\n            url = url.replace(/#.*$/, '');\n            var queryParams = toQueryFormat(data);\n            var questionIdx = url.indexOf('?');\n            if (queryParams && questionIdx > -1) {\n                return url + '&' + queryParams;\n            } else if (queryParams) {\n                return url + '?' + queryParams;\n            }\n            return url;\n        };\n        var url = getFinalUrl(params);\n        // We must split the GET in multiple short URL's\n        // The only property allowed to be split is \"include\"\n        if (params && params.include && encodeURI(url).length > MAX_URL_LENGTH) {\n            var dtd = $.Deferred();\n            var paramsCopy = $.extend(true, {}, params);\n            delete paramsCopy.include;\n            var urlNoIncludes = getFinalUrl(paramsCopy);\n            var diff = MAX_URL_LENGTH - urlNoIncludes.length;\n            var oldSuccess = options.success || httpOptions.success || $.noop;\n            var oldError = options.error || httpOptions.error || $.noop;\n            // remove the original success and error callbacks\n            options.success = $.noop;\n            options.error = $.noop;\n\n            var include = [].concat(params.include);\n            var currIncludes = [];\n            var includeOpts = [currIncludes];\n            var currLength = encodeURIComponent('?include=').length;\n            var variable = include.pop();\n            while (variable) {\n                var varLenght = encodeURIComponent(variable).length;\n                // Use a greedy approach for now, can be optimized to be solved in a more\n                // efficient way\n                // + 1 is the comma\n                if (currLength + varLenght + 1 < diff) {\n                    currIncludes.push(variable);\n                    currLength += varLenght + 1;\n                } else {\n                    currIncludes = [variable];\n                    includeOpts.push(currIncludes);\n                    currLength = '?include='.length + varLenght;\n                }\n                variable = include.pop();\n            }\n            var reqs = $.map(includeOpts, function (include) {\n                var reqParams = $.extend({}, params, { include: include });\n                return http.get(reqParams, options);\n            });\n            $.when.apply($, reqs).then(function () {\n                // Each argument are arrays of the arguments of each done request\n                // So the first argument of the first array of arguments is the data\n                var isValid = arguments[0] && arguments[0][0];\n                if (!isValid) {\n                    // Should never happen...\n                    oldError();\n                    return dtd.reject();\n                }\n                var firstResponse = arguments[0][0];\n                var isObject = $.isPlainObject(firstResponse);\n                var isRunAPI = (isObject && $.isPlainObject(firstResponse.variables)) || !isObject;\n                if (isRunAPI) {\n                    if (isObject) {\n                        // aggregate the variables property only\n                        var aggregateRun = arguments[0][0];\n                        $.each(arguments, function (idx, args) {\n                            var run = args[0];\n                            $.extend(true, aggregateRun.variables, run.variables);\n                        });\n                        oldSuccess(aggregateRun, arguments[0][1], arguments[0][2]);\n                        dtd.resolve(aggregateRun, arguments[0][1], arguments[0][2]);\n                    } else {\n                        // array of runs\n                        // Agregate variables in each run\n                        var aggregatedRuns = {};\n                        $.each(arguments, function (idx, args) {\n                            var runs = args[0];\n                            if (!Array.isArray(runs)) {\n                                return;\n                            }\n                            $.each(runs, function (idxRun, run) {\n                                if (run.id && !aggregatedRuns[run.id]) {\n                                    run.variables = run.variables || {};\n                                    aggregatedRuns[run.id] = run;\n                                } else if (run.id) {\n                                    $.extend(true, aggregatedRuns[run.id].variables, run.variables);\n                                }\n                            });\n                        });\n                        // turn it into an array\n                        aggregatedRuns = $.map(aggregatedRuns, function (run) { return run; });\n                        oldSuccess(aggregatedRuns, arguments[0][1], arguments[0][2]);\n                        dtd.resolve(aggregatedRuns, arguments[0][1], arguments[0][2]);\n                    }\n                } else {\n                    // is variables API\n                    // aggregate the response\n                    var aggregatedVariables = {};\n                    $.each(arguments, function (idx, args) {\n                        var vars = args[0];\n                        $.extend(true, aggregatedVariables, vars);\n                    });\n                    oldSuccess(aggregatedVariables, arguments[0][1], arguments[0][2]);\n                    dtd.resolve(aggregatedVariables, arguments[0][1], arguments[0][2]);\n                }\n            }, function () {\n                oldError.apply(http, arguments);\n                dtd.reject.apply(dtd, arguments);\n            });\n            return dtd.promise();\n        } else {\n            return http.get(params, options);\n        }\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/util/run-util.js","/**\n/* Inherit from a class (using prototype borrowing)\n*/\n'use strict';\n\nfunction inherit(C, P) {\n    var F = function () {};\n    F.prototype = P.prototype;\n    C.prototype = new F();\n    C.__super = P.prototype;\n    C.prototype.constructor = C;\n}\n\n/**\n* Shallow copy of an object\n* @param {Object} dest object to extend\n* @return {Object} extended object\n*/\nvar extend = function (dest /*, var_args*/) {\n    var obj = Array.prototype.slice.call(arguments, 1);\n    var current;\n    for (var j = 0; j < obj.length; j++) {\n        if (!(current = obj[j])) { //eslint-disable-line\n            continue;\n        }\n\n        // do not wrap inner in dest.hasOwnProperty or bad things will happen\n        for (var key in current) { //eslint-disable-line\n            dest[key] = current[key];\n        }\n    }\n\n    return dest;\n};\n\nmodule.exports = function (base, props, staticProps) {\n    var parent = base;\n    var child;\n\n    child = props && props.hasOwnProperty('constructor') ? props.constructor : function () { return parent.apply(this, arguments); };\n\n    // add static properties to the child constructor function\n    extend(child, parent, staticProps);\n\n    // associate prototype chain\n    inherit(child, parent);\n\n    // add instance properties\n    if (props) {\n        extend(child.prototype, props);\n    }\n\n    // done\n    return child;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/inherit.js","export function result(item) {\n    if (typeof item === 'function') {\n        const rest = Array.prototype.slice.call(arguments, 1);\n        return item.apply(item, rest);\n    }\n    return item;\n}\n\n/**\n * @param {string} type \n * @param {string} message \n * @param {any} [context] \n * @returns {Promise}\n */\nexport function rejectPromise(type, message, context) {\n    const payload = { type: type, message: message, context: context };\n    return $.Deferred().reject(payload).promise();\n}\n/**\n * @param {string} val \n * @returns {Promise}\n */\nexport function resolvePromise(val) {\n    return $.Deferred().resolve(val).promise();\n}\n\n\n/**\n * @param {string} type\n * @param {string} message\n */\nexport class CustomError extends Error {\n    constructor(type, message) {\n        super(message);\n        this.message = message;\n        this.type = type;\n    }\n}\n\n/**\n * @param {any} val \n * @returns {Promise}\n */\nexport function makePromise(val) {\n    //Can be replaced with Promise.resolve when we drop IE11;\n    // if (isFunction(val)) {\n    //     return Promise.resolve(val());\n    // }\n    // return Promise.resolve(val);\n    if (val && val.then) {\n        return val;\n    }\n    const $def = $.Deferred();\n    if (typeof val === 'function') {\n        try {\n            const toReturn = val();\n            if (toReturn && toReturn.then) {\n                return toReturn.then((r)=> $def.resolve(r)).catch(((e)=> $def.reject(e)));\n            }\n            $def.resolve(toReturn);\n        } catch (e) {\n            $def.reject(e);\n        }\n    } else {\n        $def.resolve(val);\n    }\n    return $def.promise();\n}\n\n\n// WEBPACK FOOTER //\n// ./src/util/index.js","import RunService from 'service/run-api-service';\n\nexport function mergeRunOptions(run, options) {\n    if (run instanceof RunService) {\n        run.updateConfig(options);\n        return run;\n    }\n    return $.extend(true, {}, run, options);\n}\nexport function injectFiltersFromSession(currentFilter, session, options) {\n    const defaults = {\n        scopeByGroup: true,\n        scopeByUser: true,\n    };\n    const opts = $.extend(true, {}, defaults, options);\n    const newFilter = {};\n    if (opts.scopeByGroup && session && session.groupName) {\n        newFilter.scope = { group: session.groupName };\n    }\n    if (opts.scopeByUser && session && session.userId) {\n        newFilter['user.id'] = session.userId;\n    }\n    const filter = $.extend(true, {}, currentFilter, newFilter);\n    return filter;\n}\nexport function injectScopeFromSession(currentParams, session) {\n    const group = session && session.groupName;\n    const params = $.extend(true, {}, currentParams);\n    if (group) {\n        $.extend(true, params, {\n            scope: { group: group }\n        });\n    }\n    return params;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/strategy-utils.js","import ConfigService from 'service/configuration-service';\nimport { toMatrixFormat } from 'util/query-util';\nimport { splitGetFactory, extractValidRunParams, normalizeOperations } from 'util/run-util';\nimport TransportFactory from 'transport/http-transport-factory';\nimport VariablesService from './variables-api-service';\nimport IntrospectionService from 'service/introspection-api-service';\nimport SessionManager from 'store/session-manager';\n\n/**\n * @constructor\n * @param {AccountAPIServiceOptions} config \n * @property {string} filter Criteria by which to filter runs.\n * @property {string} [id] Convenience alias for filter. Pass in an existing run id to interact with a particular run.\n * @property {string} [autoRestore] Flag determines if `X-AutoRestore: true` header is sent to Epicenter, meaning runs are automatically pulled from the Epicenter backend database if not currently in memory on the Epicenter servers. Defaults to true.\n */\nexport default function RunService(config) {\n\n    var defaults = {\n        filter: '',\n        id: '',\n        autoRestore: true,\n\n        account: undefined,\n        project: undefined,\n        token: undefined,\n        transport: {},\n\n        success: $.noop,\n        error: $.noop,\n    };\n\n    this.sessionManager = new SessionManager();\n    var serviceOptions = this.sessionManager.getMergedOptions(defaults, config);\n    if (serviceOptions.id) {\n        serviceOptions.filter = serviceOptions.id;\n    }\n\n    function updateURLConfig(opts) {\n        var urlConfig = new ConfigService(opts).get('server');\n        if (opts.account) {\n            urlConfig.accountPath = opts.account;\n        }\n        if (opts.project) {\n            urlConfig.projectPath = opts.project;\n        }\n\n        urlConfig.filter = ';';\n        urlConfig.getFilterURL = function (filter) {\n            var url = urlConfig.getAPIPath('run');\n            var filterMatrix = toMatrixFormat(filter || opts.filter);\n\n            if (filterMatrix) {\n                url += filterMatrix + '/';\n            }\n            return url;\n        };\n\n        urlConfig.addAutoRestoreHeader = function (options) {\n            var filter = opts.filter;\n            // The semicolon separated filter is used when filter is an object\n            var isFilterRunId = filter && $.type(filter) === 'string';\n            if (opts.autoRestore && isFilterRunId) {\n                // By default autoreplay the run by sending this header to epicenter\n                // https://forio.com/epicenter/docs/public/rest_apis/aggregate_run_api/#retrieving\n                var autorestoreOpts = {\n                    headers: {\n                        'X-AutoRestore': 'true'\n                    }\n                };\n                return $.extend(true, autorestoreOpts, options);\n            }\n\n            return options;\n        };\n        return urlConfig;\n    }\n\n    var http;\n    var httpOptions; //FIXME: Make this side-effect-less\n    function updateHTTPConfig(serviceOptions, urlConfig) {\n        httpOptions = $.extend(true, {}, serviceOptions.transport, {\n            url: urlConfig.getFilterURL\n        });\n\n        if (serviceOptions.token) {\n            httpOptions.headers = {\n                Authorization: 'Bearer ' + serviceOptions.token\n            };\n        }\n        http = new TransportFactory(httpOptions);\n        http.splitGet = splitGetFactory(httpOptions);\n    }\n\n    var urlConfig = updateURLConfig(serviceOptions); //making a function so #updateConfig can call this; change when refactored\n    updateHTTPConfig(serviceOptions, urlConfig);\n   \n\n    function setFilterOrThrowError(options) {\n        if (options.id) {\n            serviceOptions.filter = serviceOptions.id = options.id;\n        }\n        if (options.filter) {\n            serviceOptions.filter = serviceOptions.id = options.filter;\n        }\n        if (!serviceOptions.filter) {\n            throw new Error('No filter specified to apply operations against');\n        }\n    }\n\n    var publicAsyncAPI = {\n        urlConfig: urlConfig,\n\n        /**\n         * Create a new run.\n         * NOTE: Typically this is not used! Use `RunManager.getRun()` with a `strategy` of `reuse-never`, or use `RunManager.reset()`. See [Run Manager](../run-manager/) for more details.\n         *\n         * @example\n         * rs.create('hello_world.jl');\n         *  \n         * @param {String|Object} params If a string, the name of the primary [model file](../../../writing_your_model/). This is the one file in the project that explicitly exposes variables and methods, and it must be stored in the Model folder of your Epicenter project. If an object, may include `model`, `scope`, and `files`. (See the [Run Manager](../run_manager/) for more information on `scope` and `files`.)\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        create: function (params, options) {\n            var createOptions = $.extend(true, {}, serviceOptions, options, { url: urlConfig.getAPIPath('run') });\n            if (typeof params === 'string') {\n                params = { model: params };\n            } else {\n                params = extractValidRunParams(params);\n            }\n\n            var oldSuccess = createOptions.success;\n            createOptions.success = function (response) {\n                serviceOptions.filter = response.id; //all future chained calls to operate on this id\n                serviceOptions.id = response.id;\n                return oldSuccess.apply(this, arguments);\n            };\n\n            return http.post(params, createOptions);\n        },\n\n        /**\n         * Returns particular runs, based on conditions specified in the `qs` object.\n         * The elements of the `qs` object are ANDed together within a single call to `.query()`.\n         *\n         * @example\n         * // returns runs with saved = true where variables.price has been persisted (recorded) in the model.\n         * rs.query({\n         *  saved: true,\n         * }, {\n         *  include: ['Price', 'MyOtherVariable']\n         * }, {\n         *  startrecord: 2,\n         *  endrecord: 5\n         * });\n         * \n         * @param {Object} qs Query object. Each key should be a property of the run (saved/trashed/custom metadata saved with `.save`). Each value can be a literal value, or a comparison operator and value. (See [more on filtering](../../../rest_apis/aggregate_run_api/#filters) allowed in the underlying Run API.) Querying for variables is available for runs [in memory](../../../run_persistence/#runs-in-memory) and for runs [in the database](../../../run_persistence/#runs-in-memory) if the variables are persisted (e.g. that have been `record`ed in your model or marked for saving in your [model context file](../../../model_code/context/)).\n         * @param {Object} [outputModifier] Available fields include: `startrecord`, `endrecord`, `sort`, and `direction` (`asc` or `desc`).\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise.<object[]>}\n         */\n        query: function (qs, outputModifier, options) {\n            const mergedOptions = $.extend(true, {}, serviceOptions, options);\n            const mergedQuery = $.extend(true, {}, qs);\n            if (mergedOptions.scope) {\n                mergedQuery.scope = mergedOptions.scope;\n            }\n\n            let httpOptions = $.extend(true, {}, mergedOptions, { url: urlConfig.getFilterURL(mergedQuery) });\n            httpOptions = urlConfig.addAutoRestoreHeader(httpOptions);\n\n            return http.splitGet(outputModifier, httpOptions);\n        },\n\n        /**\n         * Returns particular runs, based on conditions specified in the `qs` object.\n         * Similar to `.query()`.\n         * \n         * @param {Object} filter Filter object. Each key can be a property of the run or the name of variable that has been saved in the run (prefaced by `variables.`). Each value can be a literal value, or a comparison operator and value. (See [more on filtering](../../../rest_apis/aggregate_run_api/#filters) allowed in the underlying Run API.) Filtering for variables is available for runs [in memory](../../../run_persistence/#runs-in-memory) and for runs [in the database](../../../run_persistence/#runs-in-memory) if the variables are persisted (e.g. that have been `record`ed in your model or marked for saving in your [model context file](../../../model_code/context/)).\n         * @param {Object} [outputModifier] Available fields include: `startrecord`, `endrecord`, `sort`, and `direction` (`asc` or `desc`).\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        filter: function (filter, outputModifier, options) {\n            if ($.isPlainObject(serviceOptions.filter)) {\n                $.extend(serviceOptions.filter, filter);\n            } else {\n                serviceOptions.filter = filter;\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            httpOptions = urlConfig.addAutoRestoreHeader(httpOptions);\n            return http.splitGet(outputModifier, httpOptions);\n        },\n\n        /**\n         * Get data for a specific run. This includes standard run data such as the account, model, project, and created and last modified dates. To request specific model variables or run record variables, pass them as part of the `filters` parameter.\n         * Note that if the run is [in memory](../../../run_persistence/#runs-in-memory), any model variables are available; if the run is [in the database](../../../run_persistence/#runs-in-db), only model variables that have been persisted &mdash; that is, `record`ed or saved in your model &mdash; are available.\n         *\n         * @example\n         * rs.load('bb589677-d476-4971-a68e-0c58d191e450', { include: ['.price', '.sales'] });\n         *\n         * \n         * @param {String} runID The run id.\n         * @param {Object} [filters] Object containing filters and operation modifiers. Use key `include` to list model variables that you want to include in the response. Other available fields include: `startrecord`, `endrecord`, `sort`, and `direction` (`asc` or `desc`).\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        load: function (runID, filters, options) {\n            if (runID) {\n                serviceOptions.filter = runID; //shouldn't be able to over-ride\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            httpOptions = urlConfig.addAutoRestoreHeader(httpOptions);\n            return http.get(filters, httpOptions);\n        },\n\n        /**\n         * Removes specified runid from memory. See [details on run persistence](../../../run_persistence/#runs-in-memory)\n         *\n         * @example\n         * rs.removeFromMemory('bb589677-d476-4971-a68e-0c58d191e450');\n         *\n         * @param  {String} runID   id of run to remove\n         * @param  {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        removeFromMemory: function (runID, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            if (runID) {\n                httpOptions.url = urlConfig.getAPIPath('run') + runID;\n            }\n            return http.delete({}, httpOptions);\n        },\n\n        /**\n         * Save attributes (data, model variables) of the run.\n         *\n         * @example\n         * // add 'completed' field to run record\n         * rs.save({ completed: true });\n         * // update 'saved' field of run record, and update values of model variables for this run\n         * rs.save({ saved: true, variables: { a: 23, b: 23 } });\n         * // update 'saved' field of run record for a particular run\n         * rs.save({ saved: true }, { id: '0000015bf2a04995880df6b868d23eb3d229' });\n         *\n         * @param {Object} attributes The run data and variables to save.\n         * @param {Object} attributes.variables Model variables must be included in a `variables` field within the `attributes` object. (Otherwise they are treated as run data and added to the run record directly.)\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        save: function (attributes, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            setFilterOrThrowError(httpOptions);\n            const saveable = Object.keys(attributes).reduce((accum, key)=> {\n                const val = attributes[key];\n                if (key === 'scope' && $.isPlainObject(val)) { //Epicenter cannot handle { scope: { trackingKey: 'foo' }}, needs 'scope.trackingKey': foo \n                    Object.keys(val).forEach((k)=> {\n                        const nestedVal = val[k];\n                        accum[`${key}.${k}`] = nestedVal;\n                    });\n                } else {\n                    accum[key] = val;\n                }\n                return accum;\n            }, {});\n            return http.patch(saveable, httpOptions);\n        },\n\n        /**\n         * Call an operation from the model.\n         * Depending on the language in which you have written your model, the operation (function or method) may need to be exposed (e.g. `export` for a Julia model) in the model file in order to be called through the API. See [Writing your Model](../../../writing_your_model/)).\n         * The `params` argument is normally an array of arguments to the `operation`. In the special case where `operation` only takes one argument, you are not required to put that argument into an array.\n         * Note that you can combine the `operation` and `params` arguments into a single object if you prefer, as in the last example.\n         *\n         * @example\n         * // operation \"solve\" takes no arguments\n         * rs.do('solve');\n         * // operation \"echo\" takes one argument, a string\n         * rs.do('echo', ['hello']);\n         * // operation \"echo\" takes one argument, a string\n         * rs.do('echo', 'hello');\n         * // operation \"sumArray\" takes one argument, an array\n         * rs.do('sumArray', [[4,2,1]]);\n         * // operation \"add\" takes two arguments, both integers\n         * rs.do({ name:'add', params:[2,4] });\n         * // call operation \"solve\" on a different run \n         * rs.do('solve', { id: '0000015bf2a04995880df6b868d23eb3d229' });\n         * \n         * @param {String} operation Name of operation.\n         * @param {Array} [params] Any parameters the operation takes, passed as an array. In the special case where `operation` only takes one argument, you are not required to put that argument into an array, and can just pass it directly.\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        do: function (operation, params, options) {\n            // console.log('do', operation, params);\n            var opsArgs;\n            var postOptions;\n            if (options) {\n                opsArgs = params;\n                postOptions = options;\n            } else if ($.isPlainObject(params)) {\n                opsArgs = null;\n                postOptions = params;\n            } else {\n                opsArgs = params;\n            }\n            var result = normalizeOperations(operation, opsArgs);\n            var httpOptions = $.extend(true, {}, serviceOptions, postOptions);\n\n            setFilterOrThrowError(httpOptions);\n\n            var prms = (result.args[0].length && (result.args[0] !== null && result.args[0] !== undefined)) ? result.args[0] : [];\n            return http.post({ arguments: prms }, $.extend(true, {}, httpOptions, {\n                url: urlConfig.getFilterURL() + 'operations/' + result.ops[0] + '/'\n            }));\n        },\n\n        /**\n         * Call several operations from the model, sequentially.\n         * Depending on the language in which you have written your model, the operation (function or method) may need to be exposed (e.g. `export` for a Julia model) in the model file in order to be called through the API. See [Writing your Model](../../../writing_your_model/)).\n         *\n         * @example\n         * // operations \"initialize\" and \"solve\" do not take any arguments\n         * rs.serial(['initialize', 'solve']);\n         * // operations \"init\" and \"reset\" take two arguments each\n         * rs.serial([  { name: 'init', params: [1,2] }, { name: 'reset', params: [2,3] }]);\n         * // operation \"init\" takes two arguments,\n         * // operation \"runmodel\" takes none\n         * rs.serial([  { name: 'init', params: [1,2] }, { name: 'runmodel', params: [] }]);\n         * \n         * @param {Array} operations If none of the operations take parameters, pass an array of the operation names (strings). If any of the operations do take parameters, pass an array of objects, each of which contains an operation name and its own (possibly empty) array of parameters.\n         * @param {*} params Parameters to pass to operations.\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {JQuery.Promise} The parameter to the callback is an array. Each array element is an object containing the results of one operation.\n         */\n        serial: function (operations, params, options) {\n            var opParams = normalizeOperations(operations, params);\n            var ops = opParams.ops;\n            var args = opParams.args;\n            var me = this;\n\n            var $d = $.Deferred();\n            var postOptions = $.extend(true, {}, serviceOptions, options);\n\n            var responses = [];\n            var doSingleOp = function () {\n                var op = ops.shift();\n                var arg = args.shift();\n\n                me.do(op, arg, {\n                    success: function (result) {\n                        responses.push(result);\n                        if (ops.length) {\n                            doSingleOp();\n                        } else {\n                            $d.resolve(responses);\n                            postOptions.success(responses, me);\n                        }\n                    },\n                    error: function (err) {\n                        responses.push(err);\n                        $d.reject(responses);\n                        postOptions.error(responses, me);\n                    }\n                });\n            };\n\n            doSingleOp();\n\n            return $d.promise();\n        },\n\n        /**\n         * Call several operations from the model, executing them in parallel.\n         * Depending on the language in which you have written your model, the operation (function or method) may need to be exposed (e.g. `export` for a Julia model) in the model file in order to be called through the API. See [Writing your Model](../../../writing_your_model/)).\n         *\n         * @example\n         * // operations \"solve\" and \"reset\" do not take any arguments\n         * rs.parallel(['solve', 'reset']);\n         * // operations \"add\" and \"subtract\" take two arguments each\n         * rs.parallel([ { name: 'add', params: [1,2] }, { name: 'subtract', params:[2,3] }]);\n         * // operations \"add\" and \"subtract\" take two arguments each\n         * rs.parallel({ add: [1,2], subtract: [2,4] });\n         *\n         * @param {Array|Object} operations If none of the operations take parameters, pass an array of the operation names (as strings). If any of the operations do take parameters, you have two options. You can pass an array of objects, each of which contains an operation name and its own (possibly empty) array of parameters. Alternatively, you can pass a single object with the operation name and a (possibly empty) array of parameters.\n         * @param {*} params Parameters to pass to operations.\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {JQuery.Promise} The parameter to the callback is an array. Each array element is an object containing the results of one operation.\n         */\n        parallel: function (operations, params, options) {\n            var $d = $.Deferred();\n\n            var opParams = normalizeOperations(operations, params);\n            var ops = opParams.ops;\n            var args = opParams.args;\n            var postOptions = $.extend(true, {}, serviceOptions, options);\n\n            var queue = [];\n            for (var i = 0; i < ops.length; i++) {\n                queue.push(\n                    this.do(ops[i], args[i])\n                );\n            }\n\n            var me = this;\n            $.when.apply(this, queue)\n                .then(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    var actualResponse = args.map(function (a) {\n                        return a[0];\n                    });\n                    $d.resolve(actualResponse);\n                    postOptions.success(actualResponse, me);\n                })\n                .fail(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    var actualResponse = args.map(function (a) {\n                        return a[0];\n                    });\n                    $d.reject(actualResponse);\n                    postOptions.error(actualResponse, me);\n                });\n\n            return $d.promise();\n        },\n\n        /**\n         * Shortcut to using the [Introspection API Service](../introspection-api-service/). Allows you to view a list of the variables and operations in a model.\n         *\n         * @example\n         * rs.introspect({ runID: 'cbf85437-b539-4977-a1fc-23515cf071bb' }).then(function (data) {\n         *      console.log(data.functions);\n         *      console.log(data.variables);\n         * });\n         * \n         * @param  {Object} options Options can either be of the form `{ runID: <runid> }` or `{ model: <modelFileName> }`. Note that the `runID` is optional if the Run Service is already associated with a particular run (because `id` was passed in when the Run Service was initialized). If provided, the `runID` overrides the `id` currently associated with the Run Service.\n         * @param  {Object} [introspectionConfig] Service options for Introspection Service\n         * @return {Promise}\n         */\n        introspect: function (options, introspectionConfig) {\n            var introspection = new IntrospectionService($.extend(true, {}, serviceOptions, introspectionConfig));\n            if (options) {\n                if (options.runID) {\n                    return introspection.byRunID(options.runID);\n                } else if (options.model) {\n                    return introspection.byModel(options.model);\n                }\n            } else if (serviceOptions.id) {\n                return introspection.byRunID(serviceOptions.id);\n            }\n            throw new Error('Please specify either the model or runid to introspect');\n        }\n    };\n\n    var publicSyncAPI = {\n        getCurrentConfig: function () {\n            return serviceOptions;\n        },\n        updateConfig: function (config) {\n            if (config && config.id) {\n                config.filter = config.id;\n            } else if (config && config.filter) {\n                config.id = config.filter;\n            }\n            serviceOptions = $.extend(true, {}, serviceOptions, config);\n            urlConfig = updateURLConfig(serviceOptions);\n            this.urlConfig = urlConfig;\n            updateHTTPConfig(serviceOptions, urlConfig);\n        },\n        /**\n          * Returns a Variables Service instance. Use the variables instance to load, save, and query for specific model variables. See the [Variable API Service](../variables-api-service/) for more information.\n          *\n          * @example\n          * var vs = rs.variables();\n          * vs.save({ sample_int: 4 });\n          *\n          * @param {Object} [config] Overrides for configuration options.\n          * @return {Object} variablesService Instance\n          */\n        variables: function (config) {\n            var vs = new VariablesService($.extend(true, {}, serviceOptions, config, {\n                runService: this\n            }));\n            return vs;\n        }\n    };\n\n    $.extend(this, publicAsyncAPI);\n    $.extend(this, publicSyncAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/run-api-service/index.js","/**\n * Utilities for working with query strings\n*/\n\n/**\n * Converts to matrix format\n * @param  {object} qs Object to convert to query string\n * @return {string}    Matrix-format query parameters\n */\nexport function toMatrixFormat(qs) {\n    if (qs === null || qs === undefined || qs === '') {\n        return ';';\n    }\n    if (typeof qs === 'string') {\n        return qs;\n    }\n    function translateParts(ip) {\n        function translateRawValue(val) {\n            const OPERATORS = ['<', '>', '!'];\n            const alreadyHasOperator = OPERATORS.some((o)=> `${val}`.charAt(0) === o);\n            const withPrefix = alreadyHasOperator ? val : `=${val}`;\n            return withPrefix;\n        }\n    \n        const parts = Object.keys(ip).reduce((accum, key)=> {\n            const val = ip[key];\n            if (Array.isArray(val)) {\n                const mapped = val.map((v)=> {\n                    const translated = translateRawValue(v);\n                    return `${key}${translated}`;\n                });\n                accum = accum.concat(mapped);\n            } else if (val !== null && typeof val === 'object') {\n                const translated = translateParts(val);\n                const prefixed = translated.map((t)=> {\n                    return `${key}.${t}`;\n                });\n                accum = accum.concat(prefixed);\n            } else {\n                const translated = translateRawValue(val);\n                accum.push(`${key}${translated}`);\n            }\n            return accum;\n        }, []);\n        return parts;\n    }\n\n    const parts = translateParts(qs);\n    return `;${parts.join(';')}`;\n}\n\n/**\n * Converts strings/arrays/objects to type 'a=b&b=c'\n * @param  { string|Array|Object} qs\n * @return { string}\n */\nexport function toQueryFormat(qs) {\n    if (qs === null || qs === undefined) {\n        return '';\n    }\n    if (typeof qs === 'string') {\n        return qs;\n    }\n\n    var returnArray = [];\n    $.each(qs, function (key, value) {\n        if (Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        if ($.isPlainObject(value)) {\n            //Mostly for data api\n            value = JSON.stringify(value);\n        }\n        returnArray.push(key + '=' + value);\n    });\n\n    var result = returnArray.join('&');\n    return result;\n}\n\n/**\n * Converts strings of type 'a=b&b=c' to { a:b, b:c}\n * @param  { string} qs\n * @return {object}\n */\nexport function qsToObject(qs) {\n    if (qs === null || qs === undefined || qs === '') {\n        return {};\n    }\n\n    var qsArray = qs.split('&');\n    var returnObj = {};\n    qsArray.forEach(function (value, index) {\n        var qKey = value.split('=')[0];\n        var qVal = value.split('=')[1];\n\n        if (qVal.indexOf(',') !== -1) {\n            qVal = qVal.split(',');\n        }\n\n        returnObj[qKey] = qVal;\n    });\n\n    return returnObj;\n}\n\n/**\n * Normalizes and merges strings of type 'a=b', { b:c} to { a:b, b:c}\n * @param  { string|Array|Object} qs1\n * @param  { string|Array|Object} qs2\n * @return {Object}\n */\nexport function mergeQS(qs1, qs2) {\n    var obj1 = qsToObject(toQueryFormat(qs1));\n    var obj2 = qsToObject(toQueryFormat(qs2));\n    return $.extend(true, {}, obj1, obj2);\n}\n\n/**\n *\n * @param {string} url url to sanitize\n * @param {object} [options] determines if leading/trailing slashes are expected\n * @param {boolean} [options.leading]\n * @param {boolean} [options.trailing]\n *\n * @returns {string}\n */\nexport function normalizeSlashes(url, options) {\n    if (!url) {\n        if (url === '') return '';\n        throw new Error(`normalizeSlashes: Unknown url ${url}`);\n    }\n    const opts = $.extend({}, {\n        leading: false,\n        trailing: false,\n    }, options);\n\n    const protocolMatch = url.match(/^(https?:\\/\\/)(.*)/);\n    const [protocol, rest] = protocolMatch ? [protocolMatch[1], protocolMatch[2]] : ['', url];\n\n    let cleaned = rest.replace(/\\/{2,}/g, '/');\n    if (opts.leading && cleaned.charAt(0) !== '/' && !protocol) {\n        cleaned = `/${cleaned}`;\n    }\n    if (opts.trailing && cleaned.charAt(cleaned.length - 1) !== '/') {\n        cleaned = `${cleaned}/`;\n    }\n    return `${protocol}${cleaned}`;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/query-util.js","import TransportFactory from 'transport/http-transport-factory';\n\nimport ConsensusService from 'service/consensus-api-service/consensus-service';\nimport PresenceService from 'service/presence-api-service';\n\nimport { extractValidRunParams } from 'util/run-util';\n\nimport { pick as _pick } from 'util/object-util';\nimport { getDefaultOptions, getURLConfig } from 'service/service-utils';\n\nvar apiBase = 'multiplayer/';\nvar assignmentEndpoint = apiBase + 'assign';\nvar apiEndpoint = apiBase + 'world';\nvar projectEndpoint = apiBase + 'project';\n\n/**\n * @description\n * \n * ## World API Adapter\n *\n * A [run](../../../glossary/#run) is a collection of end user interactions with a project and its model -- including setting variables, making decisions, and calling operations. For building multiplayer simulations you typically want multiple end users to share the same set of interactions, and work within a common state. Epicenter allows you to create \"worlds\" to handle such cases. Only [team projects](../../../glossary/#team) can be multiplayer.\n *\n * The World API Adapter allows you to create, access, and manipulate multiplayer worlds within your Epicenter project. You can use this to add and remove end users from the world, and to create, access, and remove their runs. Because of this, typically the World Adapter is used for facilitator pages in your project. (The related [World Manager](../world-manager/) provides an easy way to access runs and worlds for particular end users, so is typically used in pages that end users will interact with.)\n *\n * As with all the other [API Adapters](../../), all methods take in an \"options\" object as the last parameter. The options can be used to extend/override the World API Service defaults.\n *\n * To use the World Adapter, instantiate it and then access the methods provided. Instantiating requires the account id (**Team ID** in the Epicenter user interface), project id (**Project ID**), and group (**Group Name**).\n *\n *       var wa = new F.service.World({\n *          account: 'acme-simulations',\n *          project: 'supply-chain-game',\n *          group: 'team1' });\n *       wa.create()\n *          .then(function(world) {\n *              // call methods, e.g. wa.addUsers()\n *          });\n * \n * @param {AccountAPIServiceOptions} config \n * @property {string} [group] The group name to use for filters / new runs\n * @property {string} [model] The model file to use to create runs in this world.\n * @property {string} [filter] Criteria by which to filter world. Currently only supports world-ids as filters.\n * @property {string} [id] Convenience alias for filter.\n */\nexport default function WorldAPIAdapter(config) {\n    var defaults = {\n        group: undefined,\n        model: undefined,\n        filter: '',\n        id: '',\n\n        token: undefined,\n        account: undefined,\n        project: undefined,\n\n        transport: {},\n    };\n\n    const serviceOptions = getDefaultOptions(defaults, config, {\n        apiEndpoint: apiEndpoint\n    });\n    if (serviceOptions.id) {\n        serviceOptions.filter = serviceOptions.id;\n    }\n    const urlConfig = getURLConfig(serviceOptions);\n    const http = new TransportFactory(serviceOptions.transport);\n\n    var setIdFilterOrThrowError = function (options) {\n        if (!options) options = {};\n        \n        if (options.id) {\n            serviceOptions.filter = options.id;\n        } else if (options.filter) {\n            serviceOptions.filter = options.filter;\n        }\n        if (!serviceOptions.filter) {\n            throw new Error('No world id specified to apply operations against. This could happen if the user is not assigned to a world and is trying to work with runs from that world.');\n        }\n    };\n\n    var validateModelOrThrowError = function (options) {\n        if (!options || !options.model) {\n            throw new Error('No model specified to get the current run');\n        }\n    };\n\n    var publicAPI = {\n        /**\n        * Creates a new World.\n        *\n        * Using this method is rare. It is more common to create worlds automatically while you `autoAssign()` end users to worlds. (In this case, configuration data for the world, such as the roles, are read from the project-level world configuration information, for example by `getProjectSettings()`.)\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create({\n        *      roles: ['VP Marketing', 'VP Sales', 'VP Engineering']\n        *  });\n        *\n        *  \n        * @param {object} params Parameters to create the world.\n        * @param {string} [params.group] The **Group Name** to create this world under. Only end users in this group are eligible to join the world. Optional here; required when instantiating the service (`new F.service.World()`).\n        * @param {object} [params.roles] The list of roles (strings) for this world. Some worlds have specific roles that **must** be filled by end users. Listing the roles allows you to autoassign users to worlds and ensure that all roles are filled in each world.\n        * @param {object} [params.optionalRoles] The list of optional roles (strings) for this world. Some worlds have specific roles that **may** be filled by end users. Listing the optional roles as part of the world object allows you to autoassign users to worlds and ensure that all roles are filled in each world.\n        * @param {integer} [params.minUsers] The minimum number of users for the world. Including this number allows you to autoassign end users to worlds and ensure that the correct number of users are in each world.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        create: function (params, options) {\n            var createOptions = $.extend(true, {}, serviceOptions, options);\n            var worldApiParams = ['scope', 'files', 'roles', 'optionalRoles', 'minUsers', 'group', 'name'];\n            var validParams = _pick(serviceOptions, ['account', 'project', 'group']);\n            // whitelist the fields that we actually can send to the api\n            params = _pick(params, worldApiParams);\n\n            // account and project go in the body, not in the url\n            params = $.extend({}, validParams, params);\n\n            var oldSuccess = createOptions.success;\n            createOptions.success = function (response) {\n                serviceOptions.filter = response.id; //all future chained calls to operate on this id\n                return oldSuccess.apply(this, arguments);\n            };\n\n            return http.post(params, createOptions);\n        },\n\n        /**\n        * Updates a World, for example to replace the roles in the world.\n        *\n        * Typically, you complete world configuration at the project level, rather than at the world level. For example, each world in your project probably has the same roles for end users. And your project is probably either configured so that all end users share the same world (and run), or smaller sets of end users share worlds — but not both. However, this method is available if you need to update the configuration of a particular world.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          wa.update({ roles: ['VP Marketing', 'VP Sales', 'VP Engineering'] });\n        *      });\n        *\n        *  \n        * @param {object} params Parameters to update the world.\n        * @param {string} params.name A string identifier for the linked end users, for example, \"name\": \"Our Team\".\n        * @param {object} [params.roles] The list of roles (strings) for this world. Some worlds have specific roles that **must** be filled by end users. Listing the roles allows you to autoassign users to worlds and ensure that all roles are filled in each world.\n        * @param {object} [params.optionalRoles] The list of optional roles (strings) for this world. Some worlds have specific roles that **may** be filled by end users. Listing the optional roles as part of the world object allows you to autoassign users to worlds and ensure that all roles are filled in each world.\n        * @param {integer} [params.minUsers] The minimum number of users for the world. Including this number allows you to autoassign end users to worlds and ensure that the correct number of users are in each world.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        update: function (params, options) {\n            var whitelist = ['roles', 'optionalRoles', 'minUsers', 'name'];\n            options = options || {};\n            setIdFilterOrThrowError(options);\n\n            var updateOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter }\n            );\n\n            params = _pick(params || {}, whitelist);\n\n            return http.patch(params, updateOptions);\n        },\n\n        /**\n        * Deletes an existing world.\n        *\n        * This function optionally takes one argument. If the argument is a string, it is the id of the world to delete. If the argument is an object, it is the override for global options.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          wa.delete();\n        *      });\n        *\n        *  \n        * @param {string|Object} [options] The id of the world to delete, or options object to override global options.\n        * @return {Promise}\n        */\n        delete: function (options) {\n            options = (options && (typeof options === 'string')) ? { filter: options } : {};\n            setIdFilterOrThrowError(options);\n\n            var deleteOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter }\n            );\n\n            return http.delete(null, deleteOptions);\n        },\n\n        /**\n        * Updates the configuration for the current instance of the World API Adapter (including all subsequent function calls, until the configuration is updated again).\n        *\n        * @example\n        *      var wa = new F.service.World({...}).updateConfig({ filter: '123' }).addUser({ userId: '123' });\n        *\n        * \n        * @param {object} config The configuration object to use in updating existing configuration.\n        * @return {Object} reference to current instance\n        */\n        updateConfig: function (config) {\n            $.extend(serviceOptions, config);\n            return this;\n        },\n\n        /**\n        * Lists all worlds for a given account, project, and group. All three are required, and if not specified as parameters, are read from the service.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          // lists all worlds in group \"team1\"\n        *          wa.list();\n        *\n        *          // lists all worlds in group \"other-group-name\"\n        *          wa.list({ group: 'other-group-name' });\n        *      });\n        *\n        *  \n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        list: function (options) {\n            var getOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) }\n            );\n\n            var filters = _pick(getOptions, ['account', 'project', 'group']);\n\n            return http.get(filters, getOptions);\n        },\n\n        /**\n         * Load information for a specific world. All further calls to the world service will use the id provided.\n         *\n         * \n         * @param {string} worldId The id of the world to load.\n         * @param {Object} [options]] Options object to override global options.\n         * @return {Promise}\n         */\n        load: function (worldId, options) {\n            if (worldId) {\n                serviceOptions.filter = worldId;\n            }\n            if (!serviceOptions.filter) {\n                throw new Error('Please provide a worldid to load');\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options, { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/' });\n            return http.get('', httpOptions);\n        },\n\n        /**\n        * Gets all worlds that an end user belongs to for a given account (team), project, and group.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          wa.getWorldsForUser('b1c19dda-2d2e-4777-ad5d-3929f17e86d3')\n        *      });\n        *\n        * @param {string} userId The `userId` of the user whose worlds are being retrieved.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        getWorldsForUser: function (userId, options) {\n            var getOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) }\n            );\n\n            var filters = $.extend(\n                _pick(getOptions, ['account', 'project', 'group']),\n                { userId: userId }\n            );\n\n            return http.get(filters, getOptions);\n        },\n\n        /**\n        * Adds an end user or list of end users to a given world. The end user must be a member of the `group` that is associated with this world.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          // add one user\n        *          wa.addUsers('b1c19dda-2d2e-4777-ad5d-3929f17e86d3');\n        *          wa.addUsers(['b1c19dda-2d2e-4777-ad5d-3929f17e86d3']);\n        *          wa.addUsers({ userId: 'b1c19dda-2d2e-4777-ad5d-3929f17e86d3', role: 'VP Sales' });\n        *\n        *          // add several users\n        *          wa.addUsers([\n        *              { userId: 'a6fe0c1e-f4b8-4f01-9f5f-01ccf4c2ed44',\n        *                role: 'VP Marketing' },\n        *              { userId: '8f2604cf-96cd-449f-82fa-e331530734ee',\n        *                role: 'VP Engineering' }\n        *          ]);\n        *\n        *          // add one user to a specific world\n        *          wa.addUsers('b1c19dda-2d2e-4777-ad5d-3929f17e86d3', world.id);\n        *          wa.addUsers('b1c19dda-2d2e-4777-ad5d-3929f17e86d3', { filter: world.id });\n        *      });\n        *\n        * @param {string|object|array} users User id, array of user ids, object, or array of objects of the users to add to this world.\n        * @param {string} users.role The `role` the user should have in the world. It is up to the caller to ensure, if needed, that the `role` passed in is one of the `roles` or `optionalRoles` of this world.\n        * @param {string} worldId The world to which the users should be added. If not specified, the filter parameter of the `options` object is used.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        addUsers: function (users, worldId, options) {\n            if (!users) {\n                throw new Error('Please provide a list of users to add to the world');\n            }\n\n            // normalize the list of users to an array of user objects\n            users = ([].concat(users)).map(function (u) {\n                var isObject = $.isPlainObject(u);\n                if (typeof u !== 'string' && !isObject) {\n                    throw new Error('Some of the users in the list are not in the valid format: ' + u);\n                }\n                return isObject ? u : { userId: u };\n            });\n\n            // check if options were passed as the second parameter\n            if ($.isPlainObject(worldId) && !options) {\n                options = worldId;\n                worldId = null;\n            }\n\n            options = options || {};\n\n            // we must have options by now\n            if (typeof worldId === 'string') {\n                options.filter = worldId;\n            }\n\n            setIdFilterOrThrowError(options);\n\n            var updateOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/users' }\n            );\n\n            return http.post(users, updateOptions);\n        },\n\n        /**\n        * Updates the role of an end user in a given world. (You can only update one end user at a time.)\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        *\n        * wa.create().then(function(world) {\n        *      wa.addUsers('b1c19dda-2d2e-4777-ad5d-3929f17e86d3');\n        *      wa.updateUser({ userId: 'b1c19dda-2d2e-4777-ad5d-3929f17e86d3', role: 'leader' });\n        * });\n        *\n        * \n        * @param {{userId: string, role: string}} user User object with `userId` and the new `role`.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        updateUser: function (user, options) {\n            if (!user || !user.userId) {\n                throw new Error('You need to pass a userId to update from the world');\n            }\n\n            setIdFilterOrThrowError(options);\n            const validFields = ['role'];\n            var patchOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/users/' + user.userId }\n            );\n\n            return http.patch(_pick(user, validFields), patchOptions);\n        },\n\n        /**\n        * Removes an end user from a given world.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          wa.addUsers(['a6fe0c1e-f4b8-4f01-9f5f-01ccf4c2ed44', '8f2604cf-96cd-449f-82fa-e331530734ee']);\n        *          wa.removeUser('a6fe0c1e-f4b8-4f01-9f5f-01ccf4c2ed44');\n        *          wa.removeUser({ userId: '8f2604cf-96cd-449f-82fa-e331530734ee' });\n        *      });\n        *\n        * @param {object|string} user The `userId` of the user to remove from the world, or an object containing the `userId` field.\n        * @param {object} [options] Options object to override global options.\n        * @param {boolean} [options.deleteWorldIfEmpty] Delete the world if you removed the last user.\n        * @return {Promise}\n        */\n        removeUser: function (user, options) {\n            if (typeof user === 'string') {\n                user = { userId: user };\n            }\n\n            if (!user.userId) {\n                throw new Error('You need to pass a userId to remove from the world');\n            }\n\n            const mergedOptions = $.extend(true, {}, serviceOptions, options);\n            setIdFilterOrThrowError(mergedOptions);\n\n            const autoDeleteWorld = options && options.deleteWorldIfEmpty === true;\n            let url = urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/users/' + user.userId;\n            if (autoDeleteWorld) {\n                url += '?deleteWorld=true';\n            }\n            mergedOptions.url = url;\n\n            return http.delete(null, mergedOptions);\n        },\n\n        /**\n        * Gets the run id of current run for the given world. If the world does not have a run, creates a new one and returns the run id.\n        *\n        * Remember that a [run](../../glossary/#run) is a collection of interactions with a project and its model. In the case of multiplayer projects, the run is shared by all end users in the world.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.create()\n        *      .then(function(world) {\n        *          wa.getCurrentRunId({ model: 'model.py' });\n        *      });\n        *\n        * @param {object} [options] Options object to override global options.\n        * @param {object} options.model The model file to use to create a run if needed.\n        * @return {Promise}\n        */\n        getCurrentRunId: function (options) {\n            setIdFilterOrThrowError(options);\n\n            var postParams = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/run' }\n            );\n\n            validateModelOrThrowError(postParams);\n            const validRunParams = extractValidRunParams(postParams);\n            return http.post(validRunParams, postParams);\n        },\n\n        /**\n        * Gets the current (most recent) world for the given end user in the given group. Brings this most recent world into memory if needed.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        * wa.getCurrentWorldForUser('8f2604cf-96cd-449f-82fa-e331530734ee')\n        *      .then(function(world) {\n        *          // use data from world\n        *      });\n        *\n        * @param {string} userId The `userId` of the user whose current (most recent) world is being retrieved.\n        * @param {string} [groupName] The name of the group. If not provided, defaults to the group used to create the service.\n        * @return {JQuery.Promise}\n        */\n        getCurrentWorldForUser: function (userId, groupName) {\n            var dtd = $.Deferred();\n            var me = this;\n            this.getWorldsForUser(userId, { group: groupName })\n                .then(function (worlds) {\n                    // assume the most recent world as the 'active' world\n                    worlds.sort(function (a, b) { return +(new Date(b.lastModified)) - +(new Date(a.lastModified)); });\n                    var currentWorld = worlds[0];\n\n                    if (currentWorld) {\n                        serviceOptions.filter = currentWorld.id;\n                    }\n\n                    dtd.resolveWith(me, [currentWorld]);\n                })\n                .catch(dtd.reject);\n\n            return dtd.promise();\n        },\n\n        /**\n        * Deletes the current run from the world.\n        *\n        * (Note that the world id remains part of the run record, indicating that the run was formerly an active run for the world.)\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        *\n        * wa.deleteRun('sample-world-id');\n        *\n        * @param {string} worldId The `worldId` of the world from which the current run is being deleted.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        deleteRun: function (worldId, options) {\n            options = options || {};\n            if (worldId) {\n                options.filter = worldId;\n            }\n\n            setIdFilterOrThrowError(options);\n\n            var deleteOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + serviceOptions.filter + '/run' }\n            );\n\n            return http.delete(null, deleteOptions);\n        },\n\n        /**\n        * Creates a new run for the world.\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        *\n        * wa.getCurrentWorldForUser('8f2604cf-96cd-449f-82fa-e331530734ee')\n        *      .then(function (world) {\n        *              wa.newRunForWorld(world.id);\n        *      });\n        *\n        * @param {string} worldId worldId in which we create the new run.\n        * @param {object} [options] Options object to override global options.\n        * @param {object} options.model The model file to use to create a run if needed.\n        * @return {Promise}\n        */\n        newRunForWorld: function (worldId, options) {\n            var currentRunOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { filter: worldId || serviceOptions.filter }\n            );\n            var me = this;\n\n            validateModelOrThrowError(currentRunOptions);\n\n            return this.deleteRun(worldId, options)\n                .then(function () {\n                    return me.getCurrentRunId(currentRunOptions);\n                });\n        },\n\n        /**\n        * Assigns end users to worlds, creating new worlds as appropriate, automatically. Assigns all end users in the group, and creates new worlds as needed based on the project-level world configuration (roles, optional roles, and minimum end users per world).\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        *\n        * wa.autoAssign();\n        *\n        * \n        * @param {object} [options] Options object to override global options.\n        * @param {number} options.maxUsers Sets the maximum number of users in a world.\n        * @param {string[]} options.userIds A list of users to be assigned be assigned instead of all end users in the group.\n        * @return {Promise}\n        */\n        autoAssign: function (options) {\n            var opt = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(assignmentEndpoint) }\n            );\n\n            var params = {\n                account: opt.account,\n                project: opt.project,\n                group: opt.group\n            };\n\n            if (opt.maxUsers) {\n                params.maxUsers = opt.maxUsers;\n            }\n\n            if (opt.userIds) {\n                params.userIds = opt.userIds;\n            }\n\n            return http.post(params, opt);\n        },\n\n        /**\n        * Gets the project's world configuration.\n        *\n        * Typically, every interaction with your project uses the same configuration of each world. For example, each world in your project probably has the same roles for end users. And your project is probably either configured so that all end users share the same world (and run), or smaller sets of end users share worlds — but not both.\n        *\n        * (The [Multiplayer Project REST API](../../../rest_apis/multiplayer/multiplayer_project/) allows you to set these project-level world configurations. The World Adapter simply retrieves them, for example so they can be used in auto-assignment of end users to worlds.)\n        *\n        * @example\n        * var wa = new F.service.World({\n        *      account: 'acme-simulations',\n        *      project: 'supply-chain-game',\n        *      group: 'team1' });\n        *\n        * wa.getProjectSettings()\n        *      .then(function(settings) {\n        *          console.log(settings.roles);\n        *          console.log(settings.optionalRoles);\n        *      });\n        *\n        * \n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        getProjectSettings: function (options) {\n            var opt = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(projectEndpoint) }\n            );\n            return http.get(null, opt);\n        },\n\n        /**\n         * Get an instance of a consensus service for current world\n         * \n         * @param {string|{ consensusGroup: string, name: string}} conOpts creates a consensus with an optional group name. If not specified, created under the 'default' group\n         * @param {object} [options] Overrides for service options\n         * @returns {ConsensusService}\n         */\n        consensus: function (conOpts, options) {\n            var opts = $.extend(true, {}, serviceOptions, options);\n            const worldId = opts.filter || opts.id;\n            if (!worldId) {\n                throw new Error('No world id provided; use consensus(name, { id: worldid})');\n            }\n            if (!conOpts) {\n                throw new Error('No consensus name provided; use consensus(name, { id: worldid})');\n            }\n\n            function extractNamesFromOpts(nameOpts) {\n                if (typeof nameOpts === 'string') {\n                    return {\n                        name: nameOpts\n                    };\n                }\n                if ($.isPlainObject(nameOpts)) {\n                    return {\n                        consensusGroup: nameOpts.consensusGroup,\n                        name: nameOpts.name\n                    };\n                }\n            }\n            var con = new ConsensusService($.extend(true, {\n                worldId: worldId,\n            }, opts, extractNamesFromOpts(conOpts)));\n            return con;\n        },\n\n        /**\n         * @param {string|{users: object} } world World to get users from.\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        getPresenceForUsers: function (world, options) {\n            const opts = $.extend(true, {}, serviceOptions, options);\n            const getUsersForWorld = (world, opts)=> {\n                if (world && world.users) {\n                    return $.Deferred().resolve(world).promise();\n                }\n                const worldid = world || opts.filter || opts.id;\n                return this.load(worldid).then((w)=> w);\n            };\n\n            const ps = new PresenceService(opts);\n            const worldLoadPromise = getUsersForWorld(world, opts);\n            return worldLoadPromise.then((world)=> {\n                return ps.getStatusForUsers(world.users);\n            });\n        }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/world-api-adapter/index.js","'use strict';\n\nvar Base = require('./none-strategy');\nvar classFrom = require('../../util/inherit');\n\n/**\n* ## Conditional Creation Strategy\n*\n* This strategy will try to get the run stored in the cookie and\n* evaluate if it needs to create a new run by calling the `condition` function.\n*/\n\nvar Strategy = classFrom(Base, {\n    constructor: function Strategy(condition) {\n        if (condition == null) { //eslint-disable-line\n            throw new Error('Conditional strategy needs a condition to create a run');\n        }\n        this.condition = typeof condition !== 'function' ? function () { return condition; } : condition;\n    },\n\n    /**\n     * Gets a new 'correct' run, or updates the existing one (the definition of 'correct' depends on strategy implementation).\n     * @param  {RunService} runService A Run Service instance for the current run, as determined by the Run Manager.\n     * @param  {Object} userSession Information about the current user session. See [AuthManager#getCurrentUserSessionInfo](../auth-manager/#getcurrentusersessioninfo) for format.\n     * @param  {Object} [options] See [RunService#create](../run-api-service/#create) for supported options.\n     * @return {Promise}             \n     */\n    reset: function (runService, userSession, options) {\n        var group = userSession && userSession.groupName;\n        var opt = $.extend({\n            scope: { group: group }\n        }, runService.getCurrentConfig());\n\n        return runService\n            .create(opt, options)\n            .then(function (run) {\n                run.freshlyCreated = true;\n                return run;\n            });\n    },\n\n    /**\n     * Gets the 'correct' run (the definition of 'correct' depends on strategy implementation).\n     * @param  {RunService} runService A Run Service instance for the current run, as determined by the Run Manager.\n     * @param  {Object} userSession Information about the current user session. See [AuthManager#getCurrentUserSessionInfo](../auth-manager/#getcurrentusersessioninfo) for format.\n     * @param  {Object} runSession The Run Manager stores the 'last accessed' run in a cookie and passes it back here.\n     * @param  {Object} [options] See [RunService#create](../run-api-service/#create) for supported options.\n     * @return {Promise}             \n     */\n    getRun: function (runService, userSession, runSession, options) {\n        var me = this;\n        if (runSession && runSession.id) {\n            return this.loadAndCheck(runService, userSession, runSession, options).catch(function () {\n                return me.reset(runService, userSession, options); //if it got the wrong cookie for e.g.\n            });\n        } else {\n            return this.reset(runService, userSession, options);\n        }\n    },\n\n    loadAndCheck: function (runService, userSession, runSession, options) {\n        var shouldCreate = false;\n        var me = this;\n\n        return runService\n            .load(runSession.id, null, {\n                success: function (run, msg, headers) {\n                    shouldCreate = me.condition(run, headers, userSession, runSession);\n                }\n            })\n            .then(function (run) {\n                if (shouldCreate) {\n                    return me.reset(runService, userSession, options);\n                }\n                return run;\n            });\n    }\n});\n\nmodule.exports = Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/conditional-creation-strategy.js","import AuthAdapter from 'service/auth-api-service';\nimport MemberAdapter from 'service/member-api-adapter';\nimport GroupService from 'service/group-api-service';\nimport SessionManager from 'store/session-manager';\nimport { pick as _pick } from 'util/object-util';\n\nvar atob = window.atob || require('Base64').atob;\n\nvar defaults = {\n    requiresGroup: true\n};\n\n/**\n * @param {AccountAPIServiceOptions} options \n * @property {string} [groupId] Id of the group to which `userName` belongs. Required for end users if the `project` is specified.\n * @property {string} [userName] Email or username to use for logging in.\n * @property {string} [password] Password for specified `userName`.\n */\nfunction AuthManager(options) {\n    options = $.extend(true, {}, defaults, options);\n    this.sessionManager = new SessionManager(options);\n    this.options = this.sessionManager.getMergedOptions();\n\n    this.authAdapter = new AuthAdapter(this.options);\n}\n\nvar _findUserInGroup = function (members, id) {\n    for (var j = 0; j < members.length; j++) {\n        if (members[j].userId === id) {\n            return members[j];\n        }\n    }\n    return null;\n};\n\nAuthManager.prototype = $.extend(AuthManager.prototype, {\n    /**\n    * Logs user in.\n    *\n    * @example\n    *  authMgr.login({\n    *      account: 'acme-simulations',\n    *      project: 'supply-chain-game',\n    *      userName: 'enduser1',\n    *      password: 'passw0rd'\n    *  }).then(function(statusObj) {\n    *          // if enduser1 belongs to exactly one group\n    *          // (or if the login() call is modified to include the group id)\n    *          // continue here\n    *      })\n    *      .fail(function(statusObj) {\n    *          // if enduser1 belongs to multiple groups,\n    *          // the login() call fails\n    *          // and returns all groups of which the user is a member\n    *          for (var i=0; i < statusObj.userGroups.length; i++) {\n    *              console.log(statusObj.userGroups[i].name, statusObj.userGroups[i].groupId);\n    *          }\n    *      });\n    * @param {Object} [options] Overrides for configuration options. If not passed in when creating an instance of the manager (`F.manager.AuthManager()`), these options should include:\n    * @param {string} options.account The account id for this `userName`. In the Epicenter UI, this is the **Team ID** (for team projects) or the **User ID** (for personal projects).\n    * @param {string} options.userName Email or username to use for logging in.\n    * @param {string} options.password Password for specified `userName`.\n    * @param {string} options.groupId The id of the group to which `userName` belongs. Required for [end users](../../../glossary/#users) if the `project` is specified and if the end users are members of multiple [groups](../../../glossary/#groups), otherwise optional.\n    * @param {string} [options.project] The **Project ID** for the project to log this user into.\n    * @return {JQuery.Promise}\n    */\n    login: function (options) {\n        var me = this;\n        var $d = $.Deferred();\n        var sessionManager = this.sessionManager;\n        var adapterOptions = sessionManager.getMergedOptions({ success: $.noop, error: $.noop }, options);\n        var outSuccess = adapterOptions.success;\n        var outError = adapterOptions.error;\n        var groupId = adapterOptions.groupId;\n\n        var decodeToken = function (token) {\n            var encoded = token.split('.')[1];\n            while (encoded.length % 4 !== 0) { //eslint-disable-line\n                encoded += '=';\n            }\n            return JSON.parse(atob(encoded));\n        };\n\n        var handleGroupError = function (message, statusCode, data, type) {\n            // logout the user since it's in an invalid state with no group selected\n            me.logout().then(function () {\n                var error = $.extend(true, {}, data, { statusText: message, status: statusCode, type: type });\n                $d.reject(error);\n            });\n        };\n\n        var handleSuccess = function (response) {\n            var token = response.access_token;\n            var userInfo = decodeToken(token);\n            var oldGroups = sessionManager.getSession(adapterOptions).groups || {};\n            var userGroupOpts = $.extend(true, {}, adapterOptions, { success: $.noop });\n            var data = { auth: response, user: userInfo };\n            var project = adapterOptions.project;\n            var isTeamMember = userInfo.parent_account_id === null;\n            var requiresGroup = adapterOptions.requiresGroup && project;\n\n            var userName = (userInfo.user_name || '').split('/')[0]; //of form <user>/<team>\n            var sessionInfo = {\n                auth_token: token,\n                account: adapterOptions.account,\n                project: project,\n                userId: userInfo.user_id,\n                groups: oldGroups,\n                isTeamMember: isTeamMember,\n                userName: userName,\n            };\n            // The group is not required if the user is not logging into a project\n            if (!requiresGroup) {\n                sessionManager.saveSession(sessionInfo);\n                outSuccess.apply(this, [data]);\n                $d.resolve(data);\n                return;\n            }\n\n            var handleGroupList = function (groupList) {\n                data.userGroups = groupList;\n\n                var group = null;\n                if (groupList.length === 0) {\n                    handleGroupError('The user has no groups associated in this account', 403, data, 'NO_GROUPS');\n                    return;\n                } else if (groupList.length === 1) {\n                    // Select the only group\n                    group = groupList[0];\n                } else if (groupList.length > 1) {\n                    if (groupId) {\n                        var filteredGroups = $.grep(groupList, function (resGroup) {\n                            return resGroup.groupId === groupId;\n                        });\n                        group = filteredGroups.length === 1 ? filteredGroups[0] : null;\n                    }\n                }\n\n                if (group) {\n                    // A team member does not get the group members because is calling the Group API\n                    // but it's automatically a fac user\n                    var isFac = isTeamMember ? true : _findUserInGroup(group.members, userInfo.user_id).role === 'facilitator';\n                    var groupData = {\n                        groupId: group.groupId,\n                        groupName: group.name,\n                        isFac: isFac\n                    };\n                    var sessionInfoWithGroup = $.extend({}, sessionInfo, groupData);\n                    sessionInfo.groups[project] = groupData;\n                    me.sessionManager.saveSession(sessionInfoWithGroup, adapterOptions);\n                    outSuccess.apply(this, [data]);\n                    $d.resolve(data);\n                } else {\n                    handleGroupError('This user is associated with more than one group. Please specify a group id to log into and try again', 403, data, 'MULTIPLE_GROUPS');\n                }\n            };\n\n            if (!isTeamMember) {\n                me.getUserGroups({ userId: userInfo.user_id, token: token }, userGroupOpts)\n                    .then(handleGroupList, $d.reject);\n            } else {\n                var opts = $.extend({}, userGroupOpts, { token: token });\n                var groupService = new GroupService(opts);\n                groupService.getGroups({ account: adapterOptions.account, project: project })\n                    .then(function (groups) {\n                        // Group API returns id instead of groupId\n                        groups.forEach(function (group) {\n                            group.groupId = group.id;\n                        });\n\n                        if (groups.length) {\n                            handleGroupList(groups);\n                        } else {\n                            //either it's a private project or there are no groups\n                            sessionManager.saveSession(sessionInfo);\n                            outSuccess.apply(this, [data]);\n                            $d.resolve(data);\n                            return;\n                        }\n                    }, $d.reject);\n            }\n        };\n\n        adapterOptions.success = handleSuccess;\n        adapterOptions.error = function (response) {\n            if (adapterOptions.account) {\n                // Try to login as a system user\n                adapterOptions.account = null;\n                adapterOptions.error = function () {\n                    outError.apply(this, arguments);\n                    $d.reject(response);\n                };\n\n                me.authAdapter.login(adapterOptions);\n                return;\n            }\n\n            outError.apply(this, arguments);\n            $d.reject(response);\n        };\n\n        this.authAdapter.login(adapterOptions);\n        return $d.promise();\n    },\n\n    /**\n    * Logs user out by clearing all session information.\n    *\n    * @example\n    *  authMgr.logout();\n    * @param {Object} [options] Overrides for configuration options.\n    * @return {Promise}\n    */\n    logout: function (options) {\n        var me = this;\n        var adapterOptions = this.sessionManager.getMergedOptions(options);\n\n        var removeCookieFn = function (response) {\n            me.sessionManager.removeSession();\n        };\n\n        return this.authAdapter.logout(adapterOptions).then(removeCookieFn);\n    },\n\n    /**\n     * Returns the existing user access token if the user is already logged in. Otherwise, logs the user in, creating a new user access token, and returns the new token. (See [more background on access tokens](../../../project_access/)).\n     *\n     * @example\n     * authMgr.getToken()\n     *     .then(function (token) {\n     *         console.log('My token is ', token);\n     *     });\n     * \n     * @param {Object} [options] Overrides for configuration options.\n     * @return {JQuery.Promise}\n     */\n    getToken: function (options) {\n        var httpOptions = this.sessionManager.getMergedOptions(options);\n\n        var session = this.sessionManager.getSession(httpOptions);\n        var $d = $.Deferred();\n        if (session.auth_token) {\n            $d.resolve(session.auth_token);\n        } else {\n            this.login(httpOptions).then($d.resolve);\n        }\n        return $d.promise();\n    },\n\n    /**\n     * Returns an array of group records, one for each group of which the current user is a member. Each group record includes the group `name`, `account`, `project`, and `groupId`.\n     *\n     * If some end users in your project are members of multiple groups, this is a useful method to call on your project's login page. When the user attempts to log in, you can use this to display the groups of which the user is member, and have the user select the correct group to log in to for this session.\n     *\n     * @example\n     * // get groups for current user\n     * var sessionObj = authMgr.getCurrentUserSessionInfo();\n     * authMgr.getUserGroups({ userId: sessionObj.userId, token: sessionObj.auth_token })\n     *     .then(function (groups) {\n     *         for (var i=0; i < groups.length; i++)\n     *             { console.log(groups[i].name); }\n     *     });\n     *\n     * // get groups for particular user\n     * authMgr.getUserGroups({userId: 'b1c19dda-2d2e-4777-ad5d-3929f17e86d3', token: savedProjAccessToken });\n     *\n     * \n     * @param {Object} params Object with a userId and token properties.\n     * @param {String} params.userId The userId. If looking up groups for the currently logged in user, this is in the session information. Otherwise, pass a string.\n     * @param {String} params.token The authorization credentials (access token) to use for checking the groups for this user. If looking up groups for the currently logged in user, this is in the session information. A team member's token or a project access token can access all the groups for all end users in the team or project.\n     * @param {Object} [options] Overrides for configuration options.\n     * @return {JQuery.Promise}\n     */\n    getUserGroups: function (params, options) {\n        var adapterOptions = this.sessionManager.getMergedOptions({ success: $.noop }, options);\n        var $d = $.Deferred();\n        var outSuccess = adapterOptions.success;\n\n        adapterOptions.success = function (memberInfo) {\n            // The member API is at the account scope, we filter by project\n            if (adapterOptions.project) {\n                memberInfo = $.grep(memberInfo, function (group) {\n                    return group.project === adapterOptions.project;\n                });\n            }\n\n            outSuccess.apply(this, [memberInfo]);\n            $d.resolve(memberInfo);\n        };\n\n        var memberAdapter = new MemberAdapter({ token: params.token, server: adapterOptions.server });\n        memberAdapter.getGroupsForUser(params, adapterOptions).fail($d.reject);\n        return $d.promise();\n    },\n\n    /**\n     * Helper method to check if you're currently logged in\n     *\n     * @example\n     * var amILoggedIn = authMgr.isLoggedIn();\n     *\n     * \n     * @param {none} none\n     * @return {Boolean} true if you're logged in\n     */\n    isLoggedIn: function () {\n        var session = this.getCurrentUserSessionInfo();\n        return !!(session && session.userId);\n    },\n\n    /**\n     * Returns session information for the current user, including the `userId`, `account`, `project`, `groupId`, `groupName`, `isFac` (whether the end user is a facilitator of this group), and `auth_token` (user access token).\n     *\n     * *Important*: This method is synchronous. The session information is returned immediately in an object; no callbacks or promises are needed.\n     *\n     * Session information is stored in a cookie in the browser.\n     *\n     * @example\n     * var sessionObj = authMgr.getCurrentUserSessionInfo();\n     *\n     * \n     * @param {Object} [options] Overrides for configuration options.\n     * @return {Object} session information\n     */\n    getCurrentUserSessionInfo: function (options) {\n        var adapterOptions = this.sessionManager.getMergedOptions({ success: $.noop }, options);\n        return this.sessionManager.getSession(adapterOptions);\n    },\n\n    /*\n     * Adds one or more groups to the current session. \n     *\n     * This method assumes that the project and group exist and the user specified in the session is part of this project and group.\n     *\n     * Returns the new session object.\n     *\n     * @example\n     * authMgr.addGroups({ project: 'hello-world', groupName: 'groupName', groupId: 'groupId' });\n     * authMgr.addGroups([{ project: 'hello-world', groupName: 'groupName', groupId: 'groupId' }, { project: 'hello-world', groupName: '...' }]);\n     *\n     * \n     * @param {object|array} groups (Required) The group object must contain the `project` (**Project ID**) and `groupName` properties. If passing an array of such objects, all of the objects must contain *different* `project` (**Project ID**) values: although end users may be logged in to multiple projects at once, they may only be logged in to one group per project at a time.\n     * @param {string} [group.isFac] Defaults to `false`. Set to `true` if the user in the session should be a facilitator in this group.\n     * @param {string} [group.groupId] Defaults to undefined. Needed mostly for the Members API.\n     * @return {Object} session information\n    */\n    addGroups: function (groups) {\n        var session = this.getCurrentUserSessionInfo();\n        var isArray = Array.isArray(groups);\n        groups = isArray ? groups : [groups];\n\n        $.each(groups, function (index, group) {\n            var extendedGroup = $.extend({}, { isFac: false }, group);\n            var project = extendedGroup.project;\n            var validProps = ['groupName', 'groupId', 'isFac'];\n            if (!project || !extendedGroup.groupName) {\n                throw new Error('No project or groupName specified.');\n            }\n            // filter object\n            extendedGroup = _pick(extendedGroup, validProps);\n            session.groups[project] = extendedGroup;\n        });\n        this.sessionManager.saveSession(session);\n        return session;\n    }\n});\n\nexport default AuthManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/auth-manager/index.js","/**\n * The `none` strategy never returns a run or tries to create a new run. It simply returns the contents of the current [Run Service instance](../run-api-service/).\n * \n * This strategy is useful if you want to manually decide how to create your own runs and don't want any automatic assistance.\n */\nexport default class NoRunStrategy {\n    reset() {\n        // return a newly created run\n        return $.Deferred().resolve().promise();\n    }\n\n    getRun(runService) {\n        // return a usable run\n        return $.Deferred().resolve(runService).promise();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/none-strategy.js","'use strict';\n\nvar epiVersion = require('../../api-version.json');\n\nfunction isLocalHost(host) {\n    var isLocal = !host || //phantomjs\n        host === '127.0.0.1' ||\n        host.indexOf('local.') === 0 ||\n        host.indexOf('ngrok') !== -1 ||\n        host.indexOf('localhost') === 0;\n    return isLocal;\n}\n\n//TODO: urlutils to get host, since no window on node\nvar defaults = {\n    protocol: isLocalHost(window.location.host) ? 'https' : window.location.protocol.replace(':', ''),\n    host: window.location.host,\n    pathname: window.location.pathname\n};\n\nfunction getLocalHost(existingFn, host) {\n    var localHostFn;\n    if (existingFn !== undefined) {\n        if (!$.isFunction(existingFn)) {\n            localHostFn = function () { return existingFn; };\n        } else {\n            localHostFn = existingFn;\n        }\n    } else {\n        localHostFn = function () {\n            return isLocalHost(host);\n        };\n    }\n    return localHostFn;\n}\n\nvar UrlConfigService = function (config) {\n    var envConf = UrlConfigService.defaults;\n\n    if (!config) {\n        config = {};\n    }\n    var configOverrides = $.extend({}, defaults, config);\n    var overrides = $.extend({}, envConf, config);\n    var options = $.extend({}, defaults, overrides);\n\n    overrides.isLocalhost = options.isLocalhost = getLocalHost(options.isLocalhost, configOverrides.host);\n\n    var actingHost = config && config.host;\n    if (!actingHost && options.isLocalhost()) {\n        actingHost = 'forio.com';\n    } else {\n        actingHost = options.host;\n    }\n\n    var actingProtocol = config && config.protocol;\n    if (!actingProtocol && options.isLocalhost()) {\n        actingProtocol = 'https';\n    } else {\n        actingProtocol = options.protocol;\n    }\n\n    var HOST_API_MAPPING = {\n        'forio.com': 'api.forio.com',\n        'foriodev.com': 'api.epicenter.foriodev.com'\n    };\n\n    var publicExports = {\n        protocol: actingProtocol,\n\n        api: '',\n\n        actingHost: actingHost,\n\n        //TODO: this should really be called 'apihost', but can't because that would break too many things\n        host: (function () {\n            var apiHost = (HOST_API_MAPPING[actingHost]) ? HOST_API_MAPPING[actingHost] : actingHost;\n            return apiHost;\n        }()),\n\n        isCustomDomain: (function () {\n            var path = options.pathname.split('/');\n            var pathHasApp = path && path[1] === 'app';\n            return (!options.isLocalhost() && !pathHasApp);\n        }()),\n\n        appPath: (function () {\n            var path = options.pathname.split('/');\n\n            return path && path[1] || '';\n        }()),\n\n        accountPath: (function () {\n            var accnt = '';\n            var path = options.pathname.split('/');\n            if (path && path[1] === 'app') {\n                accnt = path[2];\n            }\n            return accnt;\n        }()),\n\n        projectPath: (function () {\n            var prj = '';\n            var path = options.pathname.split('/');\n            if (path && path[1] === 'app') {\n                prj = path[3]; //eslint-disable-line no-magic-numbers\n            }\n            return prj;\n        }()),\n\n        versionPath: (function () {\n            var version = epiVersion.version ? epiVersion.version + '/' : '';\n            return version;\n        }()),\n\n        baseURL: function () {\n            var baseURL = this.protocol + '://' + this.host + '/' + this.versionPath;\n            return baseURL;\n        },\n\n        getAPIPath: function (api) {\n            var PROJECT_APIS = ['run', 'data', 'file', 'presence', 'project', 'multiplayer/project'];\n            var apiMapping = {\n                channel: 'channel/subscribe'\n            };\n            var apiEndpoint = apiMapping[api] || api;\n\n            if (apiEndpoint === 'config') {\n                var actualProtocol = window.location.protocol.replace(':', '');\n                var configProtocol = (options.isLocalhost()) ? this.protocol : actualProtocol;\n                return configProtocol + '://' + actingHost + '/epicenter/' + this.versionPath + 'config';\n            }\n            var baseURL = (typeof this.baseURL === 'function') ? this.baseURL() : this.baseURL;\n            var apiPath;\n            if (this.versionPath === 'v3') {\n                apiPath = baseURL + '/' + this.accountPath + '/' + this.projectPath + '/' + apiEndpoint + '/';\n            } else {\n                apiPath = baseURL + apiEndpoint + '/';\n                if (PROJECT_APIS.indexOf(apiEndpoint) !== -1) {\n                    apiPath += this.accountPath + '/' + this.projectPath + '/';\n                }\n            }\n            \n            return apiPath;\n        }\n    };\n\n\n    $.extend(publicExports, overrides);\n    return publicExports;\n};\n// This data can be set by external scripts, for loading from an env server for eg;\nUrlConfigService.defaults = {};\n\nmodule.exports = UrlConfigService;\n\n\n// WEBPACK FOOTER //\n// ./src/service/url-config-service/index.js","'use strict';\n\nmodule.exports = {\n    EPI_SESSION_KEY: 'epicenterjs.session',\n    STRATEGY_SESSION_KEY: 'epicenter-scenario'\n};\n\n\n// WEBPACK FOOTER //\n// ./src/managers/key-names.js","import TransportFactory from 'transport/http-transport-factory';\n\nimport { getDefaultOptions } from 'service/service-utils';\nimport { SCOPES, getURL, getScopedName } from './data-service-scope-utils';\n\nimport ChannelManager from 'managers/epicenter-channel-manager';\nimport { rejectPromise } from 'util/index';\n\nconst API_ENDPOINT = 'data';\nconst getAPIURL = getURL.bind(null, API_ENDPOINT);\n\nclass DataService {\n    /**\n     * @param {AccountAPIServiceOptions} config\n     * @property {string} root The name of the collection. If you have multiple collections within each of your projects, you can also pass the collection name as an option for each call.\n     * @property {string} [scope] Determines who has read-write access to this data collection. See above for available scopes.\n     */\n    constructor(config) {\n        const defaults = {\n            scope: SCOPES.CUSTOM,\n            root: '/',\n\n            account: undefined,\n            project: undefined,\n            token: undefined,\n            transport: {}\n        };\n        const serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: API_ENDPOINT });\n\n        this.serviceOptions = serviceOptions;\n        this.http = new TransportFactory(serviceOptions.transport);\n    }\n\n    /**\n     * Search for data within a collection.\n     *\n     * Searching using comparison or logical operators (as opposed to exact matches) requires MongoDB syntax. See the underlying [Data API](../../../rest_apis/data_api/#searching) for additional details.\n     *\n     * @example\n     * // request all data associated with document 'user1'\n     * ds.query('user1');\n     *\n     * // exact matching:\n     * // request all documents in collection where 'question2' is 9\n     * ds.query('', { 'question2': 9});\n     *\n     * // comparison operators:\n     * // request all documents in collection where 'question2' is greater than 9\n     * ds.query('', { 'question2': { '$gt': 9} });\n     *\n     * // logical operators:\n     * // request all documents in collection where 'question2' is less than 10, and 'question3' is false\n     * ds.query('', { '$and': [ { 'question2': { '$lt':10} }, { 'question3': false }] });\n     *\n     * // regular expresssions: use any Perl-compatible regular expressions\n     * // request all documents in collection where 'question5' contains the string '.*day'\n     * ds.query('', { 'question5': { '$regex': '.*day' } });\n     *\n     *\n     * @param {String} documentID The id of the document to search. Pass the empty string ('') to search the entire collection.\n     * @param {Object} query The query object. For exact matching, this object contains the field name and field value to match. For matching based on comparison, this object contains the field name and the comparison expression. For matching based on logical operators, this object contains an expression using MongoDB syntax. See the underlying [Data API](../../../rest_apis/data_api/#searching) for additional examples.\n     * @param {Object} [outputModifier] Available fields include: `sort`, and `direction` (`asc` or `desc`).\n     * @param {Object} [options] Overrides for configuration options.\n     * @return {Promise}\n     */\n    query(documentID, query, outputModifier, options) {\n        var params = $.extend(true, { q: query }, outputModifier);\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        try {\n            mergedOptions.url = getAPIURL(mergedOptions.root, documentID, mergedOptions);\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.get(params, mergedOptions);\n    }\n\n    /**\n     * Save data in an anonymous document within the collection.\n     *\n     * The `root` of the collection must be specified. By default the `root` is taken from the Data Service configuration options; you can also pass the `root` to the `save` call explicitly by overriding the options (third parameter).\n     *\n     * (Additional background: Documents are top-level elements within a collection. Collections must be unique within this account (team or personal account) and project and are set with the `root` field in the `option` parameter. See the underlying [Data API](../../../rest_apis/data_api/) for more information. The `save` method is making a `POST` request.)\n     *\n     * @example\n     * // Create a new document, with one element, at the default root level\n     * ds.save('question1', 'yes');\n     *\n     * // Create a new document, with two elements, at the default root level\n     * ds.save({ question1:'yes', question2: 32 });\n     *\n     * // Create a new document, with two elements, at `/students/`\n     * ds.save({ name:'John', className: 'CS101' }, { root: 'students' });\n     *\n     * @param {String|Object} key If `key` is a string, it is the id of the element to save (create) in this document. If `key` is an object, the object is the data to save (create) in this document. In both cases, the id for the document is generated automatically.\n     * @param {Object} [value] The data to save. If `key` is a string, this is the value to save. If `key` is an object, the value(s) to save are already part of `key` and this argument is not required.\n     * @param {Object} [options] Overrides for configuration options. If you want to override the default `root` of the collection, do so here.\n     * @return {Promise}\n     */\n    save(key, value, options) {\n        var attrs;\n        if (typeof key === 'object') {\n            attrs = key;\n            options = value;\n        } else {\n            (attrs = {})[key] = value;\n        }\n\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        try {\n            mergedOptions.url = getAPIURL(mergedOptions.root, '', mergedOptions);\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.post(attrs, mergedOptions);\n    }\n\n    /**\n     * Append value to an array data structure within a document\n     *\n     * @param  {string} documentPath     path to array item\n     * @param  {any} val     value to append to array\n     * @param  {object} [options] Overrides for configuration options\n     * @return {Promise}\n     */\n    pushToArray(documentPath, val, options) {\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        try {\n            mergedOptions.url = getAPIURL(mergedOptions.root, documentPath, mergedOptions);\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.post(val, mergedOptions);\n    }\n\n    /**\n     * Save (create or replace) data in a named document or element within the collection.\n     *\n     * The `root` of the collection must be specified. By default the `root` is taken from the Data Service configuration options; you can also pass the `root` to the `saveAs` call explicitly by overriding the options (third parameter).\n     *\n     * Optionally, the named document or element can include path information, so that you are saving just part of the document.\n     *\n     * (Additional background: Documents are top-level elements within a collection. Collections must be unique within this account (team or personal account) and project and are set with the `root` field in the `option` parameter. See the underlying [Data API](../../../rest_apis/data_api/) for more information. The `saveAs` method is making a `PUT` request.)\n     *\n     * @example\n     * // Create (or replace) the `user1` document at the default root level.\n     * // Note that this replaces any existing content in the `user1` document.\n     * ds.saveAs('user1',\n     *     { 'question1': 2, 'question2': 10,\n     *      'question3': false, 'question4': 'sometimes' } );\n     *\n     * // Create (or replace) the `student1` document at the `students` root,\n     * // that is, the data at `/students/student1/`.\n     * // Note that this replaces any existing content in the `/students/student1/` document.\n     * // However, this will keep existing content in other paths of this collection.\n     * // For example, the data at `/students/student2/` is unchanged by this call.\n     * ds.saveAs('student1',\n     *     { firstName: 'john', lastName: 'smith' },\n     *     { root: 'students' });\n     *\n     * // Create (or replace) the `mgmt100/groupB` document at the `myclasses` root,\n     * // that is, the data at `/myclasses/mgmt100/groupB/`.\n     * // Note that this replaces any existing content in the `/myclasses/mgmt100/groupB/` document.\n     * // However, this will keep existing content in other paths of this collection.\n     * // For example, the data at `/myclasses/mgmt100/groupA/` is unchanged by this call.\n     * ds.saveAs('mgmt100/groupB',\n     *     { scenarioYear: '2015' },\n     *     { root: 'myclasses' });\n     *\n     * @param {String} documentPath Can be the id of a document, or a path to data within that document.\n     * @param {Object} [value] The data to save, in key:value pairs.\n     * @param {Object} [options] Overrides for configuration options. If you want to override the default `root` of the collection, do so here.\n     * @return {Promise}\n     */\n    saveAs(documentPath, value, options) {\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        try {\n            mergedOptions.url = getAPIURL(mergedOptions.root, documentPath, mergedOptions);\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.put(value, mergedOptions);\n    }\n\n    /**\n     * Get data for a specific document or field.\n     *\n     * @example\n     * ds.load('user1');\n     * ds.load('user1/question3');\n     *\n     * @param  {String|Object} [documentPath] The id of the data to return. Can be the id of a document, or a path to data within that document. If blank, returns whole collection\n     * @param {Object} [outputModifier] Available fields include: `sort`, and `direction` (`asc` or `desc`).\n     * @param {Object} [options] Overrides for configuration options.\n     * @return {Promise}\n     */\n    load(documentPath, outputModifier, options) {\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        try {\n            mergedOptions.url = getAPIURL(mergedOptions.root, documentPath, mergedOptions);\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.get(outputModifier, mergedOptions);\n    }\n    /**\n     * Removes data from collection. Only documents (top-level elements in each collection) can be deleted.\n     *\n     * @example\n     * ds.remove('user1');\n     *\n     * @param {String|Array} keys The id of the document to remove from this collection, or an array of such ids.\n     * @param {Object} [options] Overrides for configuration options.\n     * @return {Promise}\n     */\n    remove(keys, options) {\n        var mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        var params;\n        try {\n            if (Array.isArray(keys)) {\n                params = 'id=' + keys.join('&id=');\n                mergedOptions.url = getAPIURL(mergedOptions.root, '', mergedOptions);\n            } else {\n                params = '';\n                mergedOptions.url = getAPIURL(mergedOptions.root, keys, mergedOptions);\n            }\n        } catch (e) {\n            return rejectPromise(e.type, e.message);\n        }\n        return this.http.delete(params, mergedOptions);\n    }\n\n    /**\n     * Returns the internal collection name (with scope)\n     *\n     * @param {object} session Group/User info to add to scope. Gets it from current session otherwise\n     * @param {Object} [options] Overrides for configuration options.\n     * @param {string} options.scope Scope to set to.\n     * @return {string} Scoped collection name.\n     */\n    getScopedName(session, options) {\n        const opts = $.extend(true, {}, this.serviceOptions, options);\n        const collName = opts.root.split('/')[0];\n        const scopedCollName = getScopedName(collName, opts.scope, session);\n        return scopedCollName;\n    }\n\n    /**\n     * Gets a channel to listen to notifications on for this collection\n     *\n     * @param {Object} [options] Overrides for configuration options.\n     * @return {Channnel} channel instance to subscribe with.\n     */\n    getChannel(options) {\n        const opts = $.extend(true, {}, this.serviceOptions, options);\n        const scopedCollName = this.getScopedName(opts);\n        const cm = new ChannelManager(opts);\n        return cm.getDataChannel(scopedCollName);\n    }\n    // Epicenter doesn't allow nuking collections\n    //     /**\n    //      * Removes collection being referenced\n    //      * @return null\n    //      */\n    //     destroy(options) {\n    //         return this.remove('', options);\n    //     }\n}\n\nDataService.SCOPES = SCOPES;\n\nexport default DataService;\n\n\n// WEBPACK FOOTER //\n// ./src/service/data-api-service/index.js","import TransportFactory from 'transport/http-transport-factory';\nimport { pick } from 'util/object-util';\nimport { getURLConfig, getDefaultOptions } from '../service-utils';\n\nconst API_ENDPOINT = 'member/local';\n\n/**\n * @description\n * ## Member API Adapter\n *\n * The Member API Adapter provides methods to look up information about end users for your project and how they are divided across groups. It is based on query capabilities of the underlying RESTful [Member API](../../../rest_apis/user_management/member/).\n *\n * This is only needed for Authenticated projects, that is, team projects with [end users and groups](../../../groups_and_end_users/). For example, if some of your end users are facilitators, or if your end users should be treated differently based on which group they are in, use the Member API to find that information.\n *\n * ```js\n * const ma = new F.service.Member();\n * ma.getGroupsForUser({ userId: 'b6b313a3-ab84-479c-baea-206f6bff337' });\n * ma.getGroupDetails({ groupId: '00b53308-9833-47f2-b21e-1278c07d53b8' });\n * ```\n *\n * @param {ServiceOptions} config\n * @property {string} [userId] Epicenter user id.\n * @property {string} [groupId] Epicenter group id. Note that this is the group *id*, not the group *name*.\n */\nexport default function MemberAPIService(config) {\n    const defaults = {\n        userId: undefined,\n        groupId: undefined,\n\n        transport: {}\n    };\n\n    const serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: API_ENDPOINT });\n    const urlConfig = getURLConfig(serviceOptions);\n    const http = new TransportFactory(serviceOptions.transport);\n\n    const getFinalParams = function (params) {\n        if (typeof params === 'object') {\n            return $.extend(true, serviceOptions, params);\n        }\n        return serviceOptions;\n    };\n\n    const generateUserQuery = function (params) {\n        if (!params.userId || !params.userId.length) {\n            throw new Error('No userId specified.');\n        }\n\n        const uidQuery = ([].concat(params.userId)).join('&userId=');\n        return `?userId=${uidQuery}`;\n    };\n\n    const patchUserActiveField = function (params, active, options) {\n        params = getFinalParams(params);\n        const httpOptions = $.extend(true, serviceOptions, options, {\n            url: urlConfig.getAPIPath(API_ENDPOINT) + params.groupId + generateUserQuery(params)\n        });\n\n        return http.patch({ active: active }, httpOptions);\n    };\n\n    const publicAPI = {\n\n        /**\n        * Retrieve details about all of the group memberships for one end user. The membership details are returned in an array, with one element (group record) for each group to which the end user belongs.\n        *\n        * In the membership array, each group record includes the group id, project id, account (team) id, and an array of members. However, only the user whose userId is included in the call is listed in the members array (regardless of whether there are other members in this group).\n        *\n        * @example\n        * const ma = new F.service.Member();\n        * ma.getGroupsForUser('42836d4b-5b61-4fe4-80eb-3136e956ee5c')\n        *     .then(function(memberships){\n        *         for (const i=0; i<memberships.length; i++) {\n        *             console.log(memberships[i].groupId);\n        *         }\n        *     });\n        *\n        * ma.getGroupsForUser({ userId: '42836d4b-5b61-4fe4-80eb-3136e956ee5c' });\n        *\n        *\n        * @param {string|object} params The user id for the end user. Alternatively, an object with field `userId` and value the user id.\n        * @param {object} [options] Overrides for configuration options.\n        * @returns {JQuery.Promise}\n        */\n        getGroupsForUser: function (params, options) {\n            options = options || {};\n            const httpOptions = $.extend(true, serviceOptions, options);\n            const isString = typeof params === 'string';\n            const objParams = getFinalParams(params);\n            if (!isString && !objParams.userId) {\n                throw new Error('No userId specified.');\n            }\n\n            const getParams = isString ? { userId: params } : pick(objParams, ['userId']);\n            return http.get(getParams, httpOptions);\n        },\n\n        /**\n         * Add given userids to group\n         *\n         * @example\n         * const ma = new F.service.Member();\n         * ma.addUsersToGroup(['42836d4b-5b61-4fe4-80eb-3136e956ee5c', '42836d4b-5b61-4fe4-80eb-3136e956ee5c'])\n         *\n         * @param {string[] | {userId:string}[]} userlist list of users to add to group. [userId1,userId2..] or [{userid: userId},{userId: userId2}...]\n         * @param {string} [groupId] Group to add users to. Pulls current group from session if not provided\n         * @param {object} [options] Overrides for configuration options.\n         * @returns {JQuery.Promise}\n         */\n        addUsersToGroup: function (userlist, groupId, options) {\n            const httpOptions = getDefaultOptions(serviceOptions, options, { groupId: groupId });\n            if (!httpOptions.groupId) {\n                throw new Error('addUsersToGroup: No group provided, and cannot retrieve from session');\n            }\n            if (!userlist || !Array.isArray(userlist)) {\n                throw new Error('addUsersToGroup: No userlist provided. Provide a list of userids to upload');\n            }\n\n            const params = userlist.map((u)=> ($.isPlainObject(u) ? u : { userId: u }));\n            httpOptions.url = `${urlConfig.getAPIPath(API_ENDPOINT)}${httpOptions.groupId}`;\n            return http.post(params, httpOptions);\n        },\n\n        /**\n        * Retrieve details about one group, including an array of all its members.\n        *\n        * @example\n        * const ma = new F.service.Member();\n        * ma.getGroupDetails('80257a25-aa10-4959-968b-fd053901f72f')\n        *     .then(function(group){\n        *         for (const i=0; i<group.members.length; i++) {\n        *             console.log(group.members[i].userName);\n        *         }\n        *     });\n        *\n        * ma.getGroupDetails({ groupId: '80257a25-aa10-4959-968b-fd053901f72f' });\n        *\n        *\n        * @param {string|object} params The group id. Alternatively, an object with field `groupId` and value the group id.\n        * @param {object} [options] Overrides for configuration options.\n        * @returns {JQuery.Promise}\n        */\n        getGroupDetails: function (params, options) {\n            options = options || {};\n            const isString = typeof params === 'string';\n            const objParams = getFinalParams(params);\n            if (!isString && !objParams.groupId) {\n                throw new Error('No groupId specified.');\n            }\n\n            const groupId = isString ? params : objParams.groupId;\n            const httpOptions = $.extend(true, serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(API_ENDPOINT) + groupId }\n            );\n\n            return http.get({}, httpOptions);\n        },\n\n        /**\n        * Set a particular end user as `active`. Active end users can be assigned to [worlds](../world-manager/) in multiplayer games during automatic assignment.\n        *\n        * @example\n        * const ma = new F.service.Member();\n        * ma.makeUserActive({ userId: '42836d4b-5b61-4fe4-80eb-3136e956ee5c',\n        *                           groupId: '80257a25-aa10-4959-968b-fd053901f72f' });\n        *\n        *\n        * @param {object} params The end user and group information.\n        * @param {string|string[]} params.userId The id or list of ids of the end user(s) to make active.\n        * @param {string} params.groupId The id of the group to which this end user belongs, and in which the end user should become active.\n        * @param {object} [options] Overrides for configuration options.\n        * @returns {JQuery.Promise}\n        */\n        makeUserActive: function (params, options) {\n            return patchUserActiveField(params, true, options);\n        },\n\n        /**\n        * Set a particular end user as `inactive`. Inactive end users are not assigned to [worlds](../world-manager/) in multiplayer games during automatic assignment.\n        *\n        * @example\n        * const ma = new F.service.Member();\n        * ma.makeUserInactive({ userId: '42836d4b-5b61-4fe4-80eb-3136e956ee5c',\n        *   groupId: '80257a25-aa10-4959-968b-fd053901f72f' });\n        *\n        *\n        * @param {object} params The end user and group information.\n        * @param {string|string[]} params.userId The id or list of ids of the end user(s) to make inactive.\n        * @param {string} params.groupId The id of the group to which this end user belongs, and in which the end user should become inactive.\n        * @param {object} [options] Overrides for configuration options.\n        * @returns {JQuery.Promise}\n        */\n        makeUserInactive: function (params, options) {\n            return patchUserActiveField(params, false, options);\n        }\n    };\n\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/member-api-adapter/index.js","import ChannelManager from './channel-manager';\nimport ConfigService from 'service/configuration-service';\nimport classFrom from 'util/inherit';\nimport SessionManager from 'store/session-manager';\n\nimport subscribeToWorldChannel from './world-channel/subscribe-world-channel';\n\nvar validTypes = {\n    project: true,\n    group: true,\n    world: true,\n    user: true,\n    data: true,\n    general: true,\n    chat: true\n};\nvar getFromSessionOrError = function (value, sessionKeyName, settings) {\n    if (!value) {\n        if (settings && settings[sessionKeyName]) {\n            value = settings[sessionKeyName];\n        } else {\n            throw new Error(sessionKeyName + ' not found. Please log-in again, or specify ' + sessionKeyName + ' explicitly');\n        }\n    }\n    return value;\n};\n\nvar isPresenceData = function (payload) {\n    return payload.data && payload.data.type === 'user' && payload.data.user;\n};\n\nvar __super = ChannelManager.prototype;\nvar EpicenterChannelManager = classFrom(ChannelManager, {\n    /**\n     * @constructor\n     * @param {AccountAPIServiceOptions} options\n     * @property {string} userName Epicenter userName used for authentication.\n     * @property {string} [userId] Epicenter user id used for authentication. Optional; `options.userName` is preferred.\n     * @property {boolean} [allowAllChannels] If not included or if set to `false`, all channel paths are validated; if your project requires [Push Channel Authorization](../../../updating_your_settings/), you should use this option. If you want to allow other channel paths, set to `true`; this is not common.\n     */\n    constructor: function (options) {\n        this.sessionManager = new SessionManager(options);\n        var defaultCometOptions = this.sessionManager.getMergedOptions(options);\n\n        var urlConfig = new ConfigService(defaultCometOptions).get('server');\n        if (!defaultCometOptions.url) {\n            defaultCometOptions.url = urlConfig.getAPIPath('channel');\n        }\n\n        if (defaultCometOptions.handshake === undefined) {\n            var userName = defaultCometOptions.userName;\n            var userId = defaultCometOptions.userId;\n            var token = defaultCometOptions.token;\n            if ((userName || userId) && token) {\n                var userProp = userName ? 'userName' : 'userId';\n                var ext = {\n                    authorization: 'Bearer ' + token\n                };\n                ext[userProp] = userName ? userName : userId;\n\n                defaultCometOptions.handshake = {\n                    ext: ext\n                };\n            }\n        }\n\n        this.options = defaultCometOptions;\n        return __super.constructor.call(this, defaultCometOptions);\n    },\n\n    /**\n     * Creates and returns a channel, that is, an instance of a [Channel Service](../channel-service/).\n     *\n     * This method enforces Epicenter-specific channel naming: all channels requested must be in the form `/{type}/{account id}/{project id}/{...}`, where `type` is one of `run`, `data`, `user`, `world`, or `chat`.\n     *\n     * @example\n     *      var cm = new F.manager.EpicenterChannelManager();\n     *      var channel = cm.getChannel('/group/acme/supply-chain-game/');\n     *\n     *      channel.subscribe('topic', callback);\n     *      channel.publish('topic', { myData: 100 });\n     *\n     *\n     * @param {Object|String} [options] If string, assumed to be the base channel url. If object, assumed to be configuration options for the constructor.\n     * @return {Channel} Channel instance\n     */\n    getChannel: function (options) {\n        if (options && typeof options !== 'object') {\n            options = {\n                base: options\n            };\n        }\n        var channelOpts = $.extend({}, this.options, options);\n        var base = channelOpts.base;\n        if (!base) {\n            throw new Error('No base topic was provided');\n        }\n\n        if (!channelOpts.allowAllChannels) {\n            var baseParts = base.split('/');\n            var channelType = baseParts[1];\n            if (baseParts.length < 4) { //eslint-disable-line\n                throw new Error('Invalid channel base name, it must be in the form /{type}/{account id}/{project id}/{...}');\n            }\n            if (!validTypes[channelType]) {\n                throw new Error('Invalid channel type');\n            }\n        }\n        return __super.getChannel.apply(this, arguments);\n    },\n\n    /**\n     * Create and return a publish/subscribe channel (from the underlying [Channel Manager](../channel-manager/)) for the given [group](../../../glossary/#groups). The group must exist in the account (team) and project provided.\n     *\n     * There are no notifications from Epicenter on this channel; all messages are user-originated.\n     *\n     * @example\n     *     var cm = new F.manager.ChannelManager();\n     *     var gc = cm.getGroupChannel();\n     *     gc.subscribe('broadcasts', callback);\n     *\n     * **Return Value**\n     *\n     * * *Channel* Returns the channel (an instance of the [Channel Service](../channel-service/)).\n     * @param  {string} [groupName] Group to broadcast to. If not provided, picks up group from current session if end user is logged in.\n     * @return {Channel} Channel instance\n     */\n    getGroupChannel: function (groupName) {\n        var session = this.sessionManager.getMergedOptions(this.options);\n        groupName = getFromSessionOrError(groupName, 'groupName', session);\n        var account = getFromSessionOrError('', 'account', session);\n        var project = getFromSessionOrError('', 'project', session);\n\n        var baseTopic = ['/group', account, project, groupName].join('/');\n        var channel = __super.getChannel.call(this, { base: baseTopic });\n        var oldsubs = channel.subscribe;\n        channel.subscribe = function (topic, callback, context, options) {\n            var callbackWithoutPresenceData = function (payload) {\n                if (!isPresenceData(payload)) {\n                    callback.call(context, payload);\n                }\n            };\n            return oldsubs.call(channel, topic, callbackWithoutPresenceData, context, options);\n        };\n        return channel;\n    },\n\n    /**\n     * Create and return a publish/subscribe channel (from the underlying [Channel Manager](../channel-manager/)) for the given [world](../../../glossary/#world).\n     * This is typically used together with the [World Manager](../world-manager).\n     *\n     * The list of available topics available to subscribe to are:\n     *\n     * | Topic | Description |\n     * | ------------- | ------------- |\n     * | ALL | All events |\n     * | RUN | All Run events |\n     * | RUN_VARIABLES | Variable sets only |\n     * | RUN_OPERATIONS | Operation executions only |\n     * | RUN_RESET | New run attached to the world |\n     * | PRESENCE | All Presence events |\n     * | PRESENCE_ONLINE | Online notifications only |\n     * | PRESENCE_OFFLINE | Offline notifications only |\n     * | ROLES | All role events |\n     * | ROLES_ASSIGN | Role assignments only |\n     * | ROLES_UNASSIGN | Role unassignments |\n     * | CONSENSUS | Consensus topics |\n     *\n     * @example\n     *     var cm = new F.manager.ChannelManager();\n     *     var worldManager = new F.manager.WorldManager({\n     *         account: 'acme-simulations',\n     *         project: 'supply-chain-game',\n     *         group: 'team1',\n     *         run: { model: 'model.eqn' }\n     *     });\n     *     worldManager.getCurrentWorld().then(function (worldObject, worldAdapter) {\n     *         var worldChannel = cm.getWorldChannel(worldObject);\n     *         worldChannel.subscribe(worldChannel.TOPICS.RUN, function (data) {\n     *             console.log(data);\n     *         });\n     *      });\n     *\n     * @param  {String|Object} world The world object or id.\n     * @param  {string} [groupName] Group the world exists in. If not provided, picks up group from current session if end user is logged in.\n     * @return {Channel} Channel instance\n     */\n    getWorldChannel: function (world, groupName) {\n        var worldid = ($.isPlainObject(world) && world.id) ? world.id : world;\n        if (!worldid) {\n            throw new Error('Please specify a world id');\n        }\n        var session = this.sessionManager.getMergedOptions(this.options);\n\n        groupName = getFromSessionOrError(groupName, 'groupName', session);\n        var account = getFromSessionOrError('', 'account', session);\n        var project = getFromSessionOrError('', 'project', session);\n\n        var baseTopic = ['/world', account, project, groupName, worldid].join('/');\n        var channel = __super.getChannel.call(this, { base: baseTopic });\n\n        return subscribeToWorldChannel(worldid, channel, session, {\n            baseTopic: baseTopic,\n            account: account,\n            project: project,\n        });\n    },\n\n    /**\n     * Create and return a publish/subscribe channel (from the underlying [Channel Manager](../channel-manager/)) for the current [end user](../../../glossary/#users) in that user's current [world](../../../glossary/#world).\n     *\n     * This is typically used together with the [World Manager](../world-manager). Note that this channel only gets notifications for worlds currently in memory. (See more background on [persistence](../../../run_persistence).)\n     *\n     * @example\n     *     var cm = new F.manager.ChannelManager();\n     *     var worldManager = new F.manager.WorldManager({\n     *         account: 'acme-simulations',\n     *         project: 'supply-chain-game',\n     *         group: 'team1',\n     *         run: { model: 'model.eqn' }\n     *     });\n     *     worldManager.getCurrentWorld().then(function (worldObject, worldAdapter) {\n     *         var userChannel = cm.getUserChannel(worldObject);\n     *         userChannel.subscribe('', function (data) {\n     *             console.log(data);\n     *         });\n     *      });\n     *\n     *\n     * **Return Value**\n     *\n     * * *Channel* Returns the channel (an instance of the [Channel Service](../channel-service/)).\n     * @param  {String|{ id: string }} world World object or id.\n     * @param  {String|Object} [user] User object or id. If not provided, picks up user id from current session if end user is logged in.\n     * @param  {string} [groupName] Group the world exists in. If not provided, picks up group from current session if end user is logged in.\n     * @return {Channel} Channel instance\n     */\n    getUserChannel: function (world, user, groupName) {\n        var worldid = ($.isPlainObject(world) && world.id) ? world.id : world;\n        if (!worldid) {\n            throw new Error('Please specify a world id');\n        }\n        var session = this.sessionManager.getMergedOptions(this.options);\n\n        var userid = ($.isPlainObject(user) && user.id) ? user.id : user;\n        userid = getFromSessionOrError(userid, 'userId', session);\n        groupName = getFromSessionOrError(groupName, 'groupName', session);\n\n        var account = getFromSessionOrError('', 'account', session);\n        var project = getFromSessionOrError('', 'project', session);\n\n        var baseTopic = ['/user', account, project, groupName, worldid, userid].join('/');\n        return __super.getChannel.call(this, { base: baseTopic });\n    },\n\n    /**\n     * Create and return a publish/subscribe channel (from the underlying [Channel Manager](../channel-manager/)) that automatically tracks the presence of an [end user](../../../glossary/#users), that is, whether the end user is currently online in this group. Notifications are automatically sent when the end user comes online, and when the end user goes offline (not present for more than 2 minutes). Useful in multiplayer games for letting each end user know whether other users in their group are also online.\n     *\n     * Note that the presence channel is tracking all end users in a group. In particular, if the project additionally splits each group into [worlds](../world-manager/), this channel continues to show notifications for all end users in the group (not restricted by worlds).\n     *\n     * @example\n     *     var cm = new F.manager.ChannelManager();\n     *     var pc = cm.getPresenceChannel();\n     *     pc.subscribe('', function (data) {\n     *          // 'data' is the entire message object to the channel;\n     *          // parse for information of interest\n     *          if (data.data.subType === 'disconnect') {\n     *               console.log('user ', data.data.user.userName, 'disconnected at ', data.data.date);\n     *          }\n     *          if (data.data.subType === 'connect') {\n     *               console.log('user ', data.data.user.userName, 'connected at ', data.data.date);\n     *          }\n     *     });\n     *\n     *\n     * **Return Value**\n     *\n     * * *Channel* Returns the channel (an instance of the [Channel Service](../channel-service/)).\n     * @param  {string} [groupName] Group the end user is in. If not provided, picks up group from current session if end user is logged in.\n     * @return {Channel} Channel instance\n     */\n    getPresenceChannel: function (groupName) {\n        var session = this.sessionManager.getMergedOptions(this.options);\n        groupName = getFromSessionOrError(groupName, 'groupName', session);\n        var account = getFromSessionOrError('', 'account', session);\n        var project = getFromSessionOrError('', 'project', session);\n\n        var baseTopic = ['/group', account, project, groupName].join('/');\n        var channel = __super.getChannel.call(this, { base: baseTopic });\n        var oldsubs = channel.subscribe;\n        channel.subscribe = function (topic, callback, context, options) {\n            var callbackWithOnlyPresenceData = function (payload) {\n                if (isPresenceData(payload)) {\n                    callback.call(context, payload);\n                }\n            };\n            return oldsubs.call(channel, topic, callbackWithOnlyPresenceData, context, options);\n        };\n        return channel;\n    },\n\n    /**\n     * Create and return a publish/subscribe channel (from the underlying [Channel Manager](../channel-manager/)) for the given collection. (The collection name is specified in the `root` argument when the [Data Service](../data-api-service/) is instantiated.) Must be one of the collections in this account (team) and project.\n     *\n     * There are automatic notifications from Epicenter on this channel when data is created, updated, or deleted in this collection. See more on [automatic messages to the data channel](../../../rest_apis/multiplayer/channel/#data-messages).\n     *\n     * @example\n     *     var cm = new F.manager.ChannelManager();\n     *     var dc = cm.getDataChannel('survey-responses');\n     *     dc.subscribe('', function(data, meta) {\n     *          console.log(data);\n     *\n     *          // meta.date is time of change,\n     *          // meta.subType is the kind of change: new, update, or delete\n     *          // meta.path is the full path to the changed data\n     *          console.log(meta);\n     *     });\n     *\n     * **Return Value**\n     *\n     * * *Channel* Returns the channel (an instance of the [Channel Service](../channel-service/)).\n     * @param  {String} collection Name of collection whose automatic notifications you want to receive.\n     * @return {Channel} Channel instance\n     */\n    getDataChannel: function (collection) {\n        if (!collection) {\n            throw new Error('Please specify a collection to listen on.');\n        }\n\n        var session = this.sessionManager.getMergedOptions(this.options);\n        var account = getFromSessionOrError('', 'account', session);\n        var project = getFromSessionOrError('', 'project', session);\n        var baseTopic = ['/data', account, project, collection].join('/');\n        var channel = __super.getChannel.call(this, { base: baseTopic });\n\n        //TODO: Fix after Epicenter bug is resolved\n        var oldsubs = channel.subscribe;\n        channel.subscribe = function (topic, callback, context, options) {\n            var callbackWithCleanData = function (payload) {\n                var meta = {\n                    path: payload.channel,\n                    subType: payload.data.subType,\n                    date: payload.data.date,\n                    dataPath: payload.data.data.path,\n                };\n                var actualData = payload.data.data;\n                if (actualData.data !== undefined) { //Delete notifications are one data-level behind of course\n                    actualData = actualData.data;\n                }\n\n                callback.call(context, actualData, meta);\n            };\n            return oldsubs.call(channel, topic, callbackWithCleanData, context, options);\n        };\n\n        return channel;\n    }\n});\n\nexport default EpicenterChannelManager;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/epicenter-channel-manager/index.js","import TransportFactory from 'transport/http-transport-factory';\nimport { getDefaultOptions, getURLConfig } from 'service/service-utils';\n\nconst API_ENDPOINT = 'multiplayer/consensus';\n\nfunction normalizeActions(actions) {\n    return [].concat(actions).map(function (action) {\n        if (action.arguments) {\n            return { execute: action };\n        }\n        return action;\n    });\n}\n\n/**\n * @description\n * ## Consensus Service\n *\n * The Consensus Service allows you to build common features in multiplayer games like:\n *\n    - Delaying execution of an operation until all users within a world have 'submitted'\n    - Enforcing timed 'rounds' within the game\n    - Providing the model with default values for users who haven't submitted\n\n    The consensus endpoint is scoped by world, and acts upon the current run in the world. \n\n        var wm = new F.manager.WorldManager({ model: 'mymodel.vmf' });\n        wm.getCurrentWorld().then(function (world) {\n            var cs = new F.service.Consensus({ \n                name: 'round-1',\n                worldId: world.id\n            });\n            return cs;\n        });\n    \n    You can optionally provide a `consensusGroup` parameter to group related consensus steps. For example:\n\n        new F.service.Consensus({ \n            consensusGroup: 'round'\n            name: '1',\n            worldId: world.id\n        });\n\n    This allows you to use `F.service.ConsensusGroup` to list out/ delete all consensus points within that group for reporting.\n\n *  @param {ServiceOptions} config\n *  @property {string} worldId Id of world this consensus service is a part of\n *  @property {string} name Name Unique identifier for this consensus point (e.g. step-1, step-2 etc.)\n *  @property {string} [consensusGroup] This allows you to use `F.service.ConsensusGroup` to list out/ delete all consensus points within the given 'consensusGroup' for reporting.; if not passed in, a group name of 'default' is assumed.\n */\nexport default function ConsensusService(config) {\n    const defaults = {\n        worldId: '',\n        consensusGroup: '',\n        name: '',\n        token: undefined,\n    };\n    const serviceOptions = getDefaultOptions(defaults, config);\n    const urlConfig = getURLConfig(serviceOptions);\n    const http = new TransportFactory(serviceOptions.transport);\n\n    function getHTTPOptions(action, options) {\n        const mergedOptions = $.extend(true, {}, serviceOptions, options);\n        const consensusGroup = mergedOptions.consensusGroup || 'default';\n        \n        if (!mergedOptions.worldId || !mergedOptions.name) {\n            throw new Error('Consensus Service: worldId and name are required');\n        }\n        const urlSegment = [].concat(action || [], [mergedOptions.worldId, consensusGroup, mergedOptions.name]).join('/');\n        const baseURL = urlConfig.getAPIPath(API_ENDPOINT);\n        const url = baseURL + urlSegment;\n\n        const httpOptions = $.extend(true, {}, mergedOptions, { url: url });\n        return httpOptions;\n    }\n\n    const publicAPI = {\n        /**\n         * Creates a new consensus point\n         * \n         * @example\n         *  cs.create({\n                roles: ['P1', 'P2'],\n                defaultActions: {\n                    P1: [{ name: 'submitPlayer1', arguments: [1] }],\n                    P2: [{ name: 'submitPlayer2', arguments: [2] }],\n                },\n                ttlSeconds: 10\n            }\n         * \n         * @param  {object} params  creation options\n         * @param  {string[]|{string: number}} params.roles\n         * @param  {{string:object[]}} [params.defaultActions] Actions to take if the role specified in the key does not submit\n         * @param  {number} [params.ttlSeconds] How long the consensus point lasts for - note you'll still have to explicitly call `forceClose` yourself after timer runs out\n         * @param  {boolean} [params.executeActionsImmediately] Determines if actions are immediately sent to the server. If set to false, only the *last* action which completes the consensus will be passed on\n         * @param  {object} [options] Overrides for service options\n         * @return {Promise}\n         */\n        create: function (params, options) {\n            const httpOptions = getHTTPOptions('', options);\n            \n            if (!params || !params.roles) {\n                throw new Error('Consensus Service: no roles passed to create');\n            }\n            const postParams = Object.keys(params).reduce(function (accum, field) {\n                const fieldVal = params[field];\n                if (field === 'roles' && Array.isArray(fieldVal)) {\n                    accum.roles = fieldVal.reduce(function (accum, role) {\n                        accum[role] = 1;\n                        return accum;\n                    }, {});\n                } else if (field === 'defaultActions') {\n                    accum.actions = Object.keys(fieldVal).reduce(function (rolesAccum, roleName) {\n                        rolesAccum[roleName] = normalizeActions(fieldVal[roleName]);\n                        return rolesAccum;\n                    }, {});\n                } else {\n                    accum[field] = fieldVal;\n                }\n                return accum;\n            }, { roles: {} });\n            return http.post(postParams, httpOptions);\n        },\n\n        /**\n         * Update defaults set during create. Currently only updating defaultActions is supported.\n         *\n         * @param {{defaultActions: actions[]}} params Consensus defaults to override\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        updateDefaults: function (params, options) {\n            if (!params || !params.defaultActions) {\n                throw new Error('updateDefaults: Need to pass in parameters to update');\n            }\n            \n            const httpOptions = getHTTPOptions('actions', options);\n            return http.patch({\n                actions: normalizeActions(params.defaultActions)\n            }, httpOptions);\n        },\n        /**\n         * Returns current consensus point\n         *\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        load: function (options) {\n            const httpOptions = getHTTPOptions('', options);\n            return http.get({}, httpOptions);\n        },\n        /**\n         * Deletes current consensus point\n         *\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        delete: function (options) {\n            const httpOptions = getHTTPOptions('', options);\n            return http.delete({}, httpOptions);\n        },\n        /**\n         * Marks current consensus point as complete. Default actions, if specified, will be sent for defaulting roles.\n         *\n         * @example\n         * cs.forceClose();\n         * \n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        forceClose: function (options) {\n            const httpOptions = getHTTPOptions('close', options);\n            return http.post({}, httpOptions);\n        },\n        /**\n         * Submits actions for your turn and marks you as having `submitted`. If `executeActionsImmediately` was set to `true` while creating the consensus point, the actions will be immediately sent to the model.\n         * Note that you can still call operations from the RunService directly, but will bypass the consensus requirements.\n         *\n         * @example\n         * cs.submitActions([{ name: 'step', arguments: [] }]);\n         *  \n         * @param {object[]|{name: string, arguments: any[]}} actions Actions to send\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        submitActions: function (actions, options) {\n            if (!actions || !([].concat(actions)).length) {\n                throw new Error('submitActions: No actions provided to submit');\n            }\n            const httpOptions = getHTTPOptions('actions', options);\n            return http.post({\n                actions: normalizeActions(actions)\n            }, httpOptions);\n        },\n        /**\n         * Reverts submission. Note if `executeActionsImmediately` was set to `true` while creating the consensus point the action will have already been passed on to the model.\n         *\n         * @param {object} [options] Overrides for service options\n         * @returns {Promise}\n         */\n        undoSubmit: function (options) {\n            const httpOptions = getHTTPOptions('actions', options);\n            return http.delete({}, httpOptions);\n        },\n\n        /**\n         * Returns current configuration\n         *\n         * @returns {object}\n         */\n        getCurrentConfig: function () {\n            return serviceOptions;\n        },\n\n        getChannel: function (options) {\n            \n        }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/consensus-api-service/consensus-service.js","import { getDefaultOptions, getURLConfig } from '../service-utils';\nimport TransportFactory from 'transport/http-transport-factory';\nimport { toQueryFormat } from 'util/query-util';\n\n/**\n * @description\n * \n * ## User API Adapter\n *\n * The User API Adapter allows you to retrieve details about end users in your team (account). It is based on the querying capabilities of the underlying RESTful [User API](../../../rest_apis/user_management/user/).\n *\n * Example:\n *```js\n * var ua = new F.service.User({\n *     account: 'acme-simulations',\n *     token: 'user-or-project-access-token'\n * });\n * ua.getById('42836d4b-5b61-4fe4-80eb-3136e956ee5c');\n * ua.get({ userName: 'jsmith' });\n * ua.get({ id: ['42836d4b-5b61-4fe4-80eb-3136e956ee5c',\n *             '4ea75631-4c8d-4872-9d80-b4600146478e'] });\n * ```\n * \n * @param {AccountAPIServiceOptions} config \n */\nexport default function UserAPIAdapter(config) {\n    const API_ENDPOINT = 'user';\n\n    var defaults = {\n        account: undefined,\n        token: undefined,\n        transport: {}\n    };\n\n    const serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: API_ENDPOINT });\n    const urlConfig = getURLConfig(serviceOptions);\n    const http = new TransportFactory(serviceOptions.transport);\n    const publicAPI = {\n\n        /**\n        * Retrieve details about particular end users in your team, based on user name or user id.\n        *\n        * @example\n        * var ua = new F.service.User({\n        *     account: 'acme-simulations',\n        * });\n        * ua.get({ userName: 'jsmith' });\n        * ua.get({ id: ['42836d4b-5b61-4fe4-80eb-3136e956ee5c',\n        *                   '4ea75631-4c8d-4872-9d80-b4600146478e'] });\n        *\n        * \n        * @param {object} filter Object with field `userName` and value of the username. Alternatively, object with field `id` and value of an array of user ids.\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        get: function (filter, options) {\n            filter = filter || {};\n\n            const httpOptions = $.extend(true, {}, serviceOptions, options);\n            function toIdFilters(id) {\n                if (!id) return '';\n                \n                const qs = Array.isArray(id) ? id : [id];\n                return 'id=' + qs.join('&id=');\n            }\n\n            const query = filter.userName ? { q: filter.userName } : {}; // API only supports filtering by username\n            const params = [\n                'account=' + httpOptions.account,\n                toIdFilters(filter.id),\n                toQueryFormat(query)\n            ].join('&');\n\n            // special case for queries with large number of ids\n            // make it as a post with GET semantics\n            var threshold = 30;\n            if (filter.id && Array.isArray(filter.id) && filter.id.length >= threshold) {\n                httpOptions.url = urlConfig.getAPIPath('user') + '?_method=GET';\n                return http.post({ id: filter.id }, httpOptions);\n            } else {\n                return http.get(params, httpOptions);\n            }\n        },\n\n        /**\n        * Retrieve details about a single end user in your team, based on user id.\n        *\n        * @example\n        * var ua = new F.service.User({\n        *     account: 'acme-simulations',\n        * });\n        * ua.getById('42836d4b-5b61-4fe4-80eb-3136e956ee5c');\n        *\n        * \n        * @param {string} userId The user id for the end user in your team.\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        getById: function (userId, options) {\n            return publicAPI.get({ id: userId }, options);\n        },\n\n\n        /**\n        * Upload list of users to current account\n        *\n        * @example\n        * var us = new F.service.User({\n        *     account: 'acme-simulations',\n        * });\n        * us.createUsers([{ userName: 'jsmith@forio.com', firstName: 'John', lastName: 'Smith', password: 'passw0rd' }]);\n        *       \n        * @param {object[]} userList Array of {userName, password, firstName, lastName, ...} objects to upload\n        * @param {object} [options] Overrides for configuration options.\n        * @returns {JQuery.Promise}\n        */\n        createUsers: function (userList, options) {\n            if (!userList || !Array.isArray(userList)) {\n                return $.Deferred().reject({\n                    type: 'INVALID_USERS',\n                    payload: userList\n                }).promise();\n            }\n\n            const httpOptions = $.extend(true, {}, serviceOptions, options);\n            const requiredFields = ['userName', 'password', 'firstName', 'lastName'];\n\n            const sortedUsers = userList.reduce((accum, user)=> {\n                const missingRequiredFields = requiredFields.filter((field)=> user[field] === undefined);\n                const account = user.account || httpOptions.account;\n                if (!account) missingRequiredFields.push(account);\n                if (missingRequiredFields.length) {\n                    accum.invalid.push({ user: user, missingFields: missingRequiredFields });\n                }\n                if (!user.account) {\n                    user.account = httpOptions.account;\n                }\n                accum.valid.push(user);\n                return accum;\n            }, { valid: [], invalid: [] });\n\n            if (sortedUsers.invalid.length) {\n                return $.Deferred().reject({\n                    type: 'INVALID_USERS',\n                    payload: sortedUsers.invalid\n                }).promise();\n            }\n            return http.post(sortedUsers.valid, httpOptions);\n        },\n\n        translateV3UserKeys: function (v3UserKeyList, options) {\n            if (!v3UserKeyList || !Array.isArray(v3UserKeyList) || v3UserKeyList.length === 0) {\n                var resp = { status: 401, statusMessage: 'No user keys specified.' };\n                return Promise.reject(resp);\n            }\n\n            var httpOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(API_ENDPOINT) + '/translate' }\n            );\n\n            return http.post(v3UserKeyList, httpOptions);\n        }\n\n    };\n\n    $.extend(this, publicAPI);\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/user-api-adapter/index.js","export const ACTIONS = {\n    CREATE: 'CREATE',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    RESUME: 'RESUME',\n    COMPLETE: 'COMPLETE',\n    RESET: 'RESET',\n    TICK: 'TICK',\n};\n\nexport const STRATEGY = {\n    START_BY_FIRST_USER: 'first-user',\n    START_WHEN_ALL_USERS: 'all-users',\n};\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/timer-constants.js","import strategies, { strategyKeys } from 'managers/run-strategies';\nimport * as specialOperations from './special-operations';\n\nimport RunService from 'service/run-api-service';\nimport SessionManager from 'store/session-manager';\n\nimport { isEmpty, omit } from 'util/object-util';\nimport { STRATEGY_SESSION_KEY } from 'managers/key-names';\n\nfunction patchRunService(service, manager) {\n    if (service.patched) {\n        return service;\n    }\n\n    const orig = service.do;\n    service.do = function (operation, params, options) {\n        const reservedOps = Object.keys(specialOperations);\n        if (reservedOps.indexOf(operation) === -1) {\n            return orig.apply(service, arguments);\n        } else {\n            return specialOperations[operation].call(service, params, options, manager);\n        }\n    };\n\n    service.patched = true;\n\n    return service;\n}\n\nfunction sessionKeyFromOptions(options, runService) {\n    const config = runService.getCurrentConfig();\n    const sessionKey = $.isFunction(options.sessionKey) ? options.sessionKey(config) : options.sessionKey;\n    return sessionKey;\n}\n\nfunction setRunInSession(sessionKey, run, sessionManager) {\n    if (sessionKey) {\n        delete run.variables;\n        sessionManager.getStore().set(sessionKey, JSON.stringify(run));\n    }\n}\n\nclass RunManager {\n    /**\n     * @param {AccountAPIServiceOptions} options \n     * @property {object} run\n     * @property {string} run.model The name of your primary model file. (See more on [Writing your Model](../../../writing_your_model/).)\n     * @property {string} [run.scope] Scope object for the run, for example `scope.group` with value of the name of the group.\n     * @property {string[]} [run.files] If and only if you are using a Vensim model and you have additional data to pass in to your model, you can optionally pass a `files` object with the names of the files, for example: `\"files\": {\"data\": \"myExtraData.xls\"}`. (See more on [Using External Data in Vensim](../../../model_code/vensim/vensim_example_xls/).)\n     * @property {string|function} [strategy] Run creation strategy for when to create a new run and when to reuse an end user's existing run. This is *optional*; by default, the Run Manager selects `reuse-per-session`, or `reuse-last-initialized` if you also pass in an initial operation. See [below](#using-the-run-manager-to-access-and-register-strategies) for more information on strategies.\n     * @property {object} [strategyOptions] Additional options passed directly to the [run creation strategy](../strategies/).\n     * @property {string} [sessionKey] Name of browser cookie in which to store run information, including run id. Many conditional strategies, including the provided strategies, rely on this browser cookie to store the run id and help make the decision of whether to create a new run or use an existing one. The name of this cookie defaults to `epicenter-scenario` and can be set with the `sessionKey` parameter. This can also be a function which returns a string, if you'd like to control this at runtime.\n     */\n    constructor(options) {\n        const defaults = {\n            sessionKey: function (config) { \n                const baseKey = STRATEGY_SESSION_KEY;\n                const key = ['account', 'project', 'model'].reduce(function (accum, key) {\n                    return config[key] ? accum + '-' + config[key] : accum; \n                }, baseKey);\n                return key;\n            }\n        };\n        \n        this.options = $.extend(true, {}, defaults, options);\n\n        if (this.options.run instanceof RunService) {\n            this.run = this.options.run;\n        } else if (!isEmpty(this.options.run)) {\n            this.run = new RunService(this.options.run);\n        } else {\n            throw new Error('No run options passed to RunManager');\n        }\n        patchRunService(this.run, this);\n    \n        this.strategy = strategies.getBestStrategy(this.options);\n        this.sessionManager = new SessionManager(this.options);\n    }\n\n    /**\n     * Returns the run object for the 'correct' run. The correct run is defined by the strategy. \n     *\n     * For example, if the strategy is `reuse-never`, the call\n     * to `getRun()` always returns a newly created run; if the strategy is `reuse-per-session`,\n     * `getRun()` returns the run currently referenced in the browser cookie, and if there is none, creates a new run. \n     * See [Run Manager Strategies](../strategies/) for more on strategies.\n     *\n     * @example\n     * rm.getRun().then(function (run) {\n     *     // use the run object\n     *     const thisRunId = run.id;\n     *\n     *     // use the Run Service object\n     *     rm.run.do('runModel');\n     * });\n     *\n     * rm.getRun(['sample_int']).then(function (run) {\n     *    // an object whose fields are the name : value pairs of the variables passed to getRun()\n     *    console.log(run.variables);\n     *    // the value of sample_int\n     *    console.log(run.variables.sample_int); \n     * });\n     *\n     * @param {string[]} [variables] The run object is populated with the provided model variables, if provided. Note: `getRun()` does not throw an error if you try to get a variable which doesn't exist. Instead, the variables list is empty, and any errors are logged to the console.\n     * @param {Object} [options] Configuration options; passed on to [RunService#create](../run-api-service/#create) if the strategy does create a new run.\n     * @return {JQuery.Promise} Promise to complete the call.\n     */\n    getRun(variables, options) {\n        const sessionStore = this.sessionManager.getStore();\n\n        const sessionContents = sessionStore.get(sessionKeyFromOptions(this.options, this.run));\n        const runSession = JSON.parse(sessionContents || '{}');\n        \n        if (runSession.runId) {\n            //Legacy: EpiJS < 2.2 used runId as key, so maintain comptaibility. Remove at some future date (Summer `17?)\n            runSession.id = runSession.runId;\n        }\n\n        const authSession = this.sessionManager.getSession();\n        if (this.strategy.requiresAuth && isEmpty(authSession)) {\n            console.error('No user-session available', this.options.strategy, 'requires authentication.');\n            return $.Deferred().reject({ type: 'UNAUTHORIZED', message: 'No user-session available' }).promise();\n        }\n        if (this.fetchProm) {\n            console.warn('Two simultaneous calls to `getRun` detected on the same RunManager instance. Either create different instances, or eliminate duplicate call');\n            return this.fetchProm;\n        }\n\n        this.fetchProm = this.strategy\n            .getRun(this.run, authSession, runSession, options).then((run)=> {\n                if (!run || !run.id) {\n                    return run;\n                }\n\n                this.run.updateConfig({ filter: run.id });\n                const canCache = this.strategy.allowRunIDCache !== false;\n                if (canCache) {\n                    const sessionKey = sessionKeyFromOptions(this.options, this.run);\n                    setRunInSession(sessionKey, run, this.sessionManager);\n                }\n\n                if (!variables || !variables.length) {\n                    return run;\n                }\n                return this.run.variables().query(variables).then(function (results) {\n                    run.variables = results;\n                    return run;\n                }).catch(function (err) {\n                    run.variables = {};\n                    console.error('RunManager variables fetch error', err);\n                    return run;\n                });\n            }).then((r)=> {\n                this.fetchProm = null;\n                return r;\n            }, (err)=> {\n                this.fetchProm = null;\n                throw err;\n            });\n        return this.fetchProm;\n    }\n\n    /**\n     * Returns the run object for a 'reset' run. The definition of a reset is defined by the strategy, but typically means forcing the creation of a new run. For example, `reset()` for the default strategies `reuse-per-session` and `reuse-last-initialized` both create new runs.\n     *\n     * @example\n     * rm.reset().then(function (run) {\n     *     // use the (new) run object\n     *     const thisRunId = run.id;\n     *\n     *     // use the Run Service object\n     *     rm.run.do('runModel');\n     * });\n     *\n     * @param {Object} [options] Configuration options; passed on to [RunService#create](../run-api-service/#create).\n     * @return {Promise}\n     */\n    reset(options) {\n        const authSession = this.sessionManager.getSession();\n        if (this.strategy.requiresAuth && isEmpty(authSession)) {\n            console.error('No user-session available', this.options.strategy, 'requires authentication.');\n            return $.Deferred().reject({ type: 'UNAUTHORIZED', message: 'No user-session available' }).promise();\n        }\n\n        const optionsToPassOn = omit(options, ['success', 'error']); //strategy can just throw, so handle errors directly\n        return this.strategy.reset(this.run, authSession, optionsToPassOn).then((run)=> {\n            if (run && run.id) {\n                this.run.updateConfig({ filter: run.id });\n                const canCache = this.strategy.allowRunIDCache !== false;\n                if (canCache) {\n                    const sessionKey = sessionKeyFromOptions(this.options, this.run);\n                    setRunInSession(sessionKey, run.id, this.sessionManager);\n                }\n            }\n            if (options && options.success) {\n                options && options.success(run);\n            }\n            return run;\n        }).catch((e)=> {\n            if (options && options.error) {\n                options && options.error(e);\n            }\n            throw e;\n        });\n    }\n}\n\nRunManager.STRATEGY = strategyKeys;\nRunManager.strategies = strategies;\nexport default RunManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-manager/index.js","import RunService from 'service/run-api-service';\nimport SessionManager from 'store/session-manager';\n\nimport { injectFiltersFromSession } from 'managers/run-strategies/strategy-utils';\nimport bulkFetchRuns from 'util/bulk-fetch-records';\n\n/**\n * @description\n * \n * ## Saved Runs Manager\n *\n * The Saved Runs Manager is a specific type of [Run Manager](../../run-manager/) which provides access to a list of runs (rather than just one run). It also provides utility functions for dealing with multiple runs (e.g. saving, deleting, listing).\n *\n * An instance of a Saved Runs Manager is included automatically in every instance of a [Scenario Manager](../), and is accessible from the Scenario Manager at `.savedRuns`. See [more information](../#properties) on using `.savedRuns` within the Scenario Manager.\n */\nexport default class SavedRunsManager {\n\n    /**\n     * @param {object} config \n     * @property {boolean} [scopeByGroup]  If set, will only pull runs from current group. Defaults to `true`.\n     * @property {boolean} [scopeByUser]  If set, will only pull runs from current user. Defaults to `true`. For multiplayer run comparison projects, set this to false so that all end users in a group can view the shared set of saved runs.\n     * @property {object} [run] Run Service options\n     */\n    constructor(config) {\n        const defaults = {\n            scopeByGroup: true,\n            scopeByUser: true,\n            run: null,\n        };\n    \n        this.sessionManager = new SessionManager();\n    \n        const options = $.extend(true, {}, defaults, config);\n        if (options.run) {\n            if (options.run instanceof RunService) {\n                this.runService = options.run;\n            } else {\n                this.runService = new RunService(options.run);\n            }\n            this.options = options;\n        } else {\n            throw new Error('No run options passed to SavedRunsManager');\n        }\n    }\n    \n    /**\n     * Marks a run as saved. \n     *\n     * Note that while any run can be saved, only runs which also match the configuration options `scopeByGroup` and `scopeByUser` are returned by the `getRuns()` method.\n     *\n     * @example\n     * const sm = new F.manager.ScenarioManager();\n     * sm.savedRuns.save('0000015a4cd1700209cd0a7d207f44bac289');\n     *\n     * @param  {String|RunService} run Run to save. Pass in either the run id, as a string, or the [Run Service](../../run-api-service/).\n     * @param  {object} [otherFields] Any other meta-data to save with the run.\n     * @return {Promise}\n     */\n    save(run, otherFields) {\n        const runConfig = this.runService.getCurrentConfig();\n        const defaultToSave = {};\n        if (runConfig.scope && runConfig.scope.trackingKey) {\n            defaultToSave.scope = { trackingKey: runConfig.scope.trackingKey };\n        }\n        const param = $.extend(true, defaultToSave, otherFields, { saved: true, trashed: false });\n        return this.mark(run, param);\n    }\n\n    /**\n     * Marks a run as removed; the inverse of marking as saved.\n     *\n     * @example\n     * const sm = new F.manager.ScenarioManager();\n     * sm.savedRuns.remove('0000015a4cd1700209cd0a7d207f44bac289');\n     *\n     * @param  {String|RunService|object} run Run to remove. Pass in either the run id, as a string, or the [Run Service](../../run-api-service/).\n     * @param  {object} [otherFields] any other meta-data to save with the run.\n     * @return {Promise}\n     */\n    remove(run, otherFields) {\n        const param = $.extend(true, {}, otherFields, { saved: false, trashed: true });\n        return this.mark(run, param);\n    }\n\n\n    /**\n     * Sets additional fields on a run. This is a convenience method for [RunService#save](../../run-api-service/#save).\n     *\n     * @example\n     * const sm = new F.manager.ScenarioManager();\n     * sm.savedRuns.mark('0000015a4cd1700209cd0a7d207f44bac289', \n     *     { 'myRunName': 'sample policy decisions' });\n     *\n     * @param  {String|string[]|RunService} run  Run to operate on. Pass in either the run id, as a string, or the [Run Service](../../run-api-service/).\n     * @param  {Object} toMark Fields to set, as name : value pairs.\n     * @return {Promise}\n     */\n    mark(run, toMark) {\n        let rs;\n        const existingOptions = this.runService.getCurrentConfig();\n        if (run instanceof RunService) {\n            rs = run;\n        } else if (run && (typeof run === 'string')) {\n            rs = new RunService($.extend(true, {}, existingOptions, { id: run, autoRestore: false }));\n        } else if (Array.isArray(run)) {\n            const me = this;\n            const proms = run.map(function (r) {\n                return me.mark(r, toMark);\n            });\n            return $.when.apply(null, proms);\n        } else {\n            throw new Error('Invalid run object provided');\n        }\n        return rs.save(toMark);\n    }\n\n    /**\n     * Returns a list of saved runs. Note: This recursively fetches **all** runs by default; if you need access to data as it's being fetched use `options.onData`, else the promise is resolved with the final list of runs.\n     *\n     * @example\n     * const sm = new F.manager.ScenarioManager();\n     * sm.savedRuns.getRuns().then(function (runs) {\n     *  console.log('Found runs', runs.length);\n     * });\n     *\n     * @param  {string[]} [variables] If provided, in the returned list of runs, each run will have a `.variables` property with these set.\n     * @param  {object} [filter]    Any filters to apply while fetching the run. See [RunService#filter](../../run-api-service/#filter) for details.\n     * @param  {object} [modifiers] Use for paging/sorting etc. See [RunService#filter](../../run-api-service/#filter) for details.\n     * @param  {object} [options]\n     * @param {function(object[]):void} [options.onData] Use to get progressive data notifications as they're being fetched. Called with <options.recordsPerFetch> runs until all runs are loaded.\n     * @param {Number} [options.recordsPerFetch] Control the number of runs loaded with each request. Defaults to 100, set to lower to get results faster.\n     * @return {Promise}\n     */\n    getRuns(variables, filter, modifiers, options) {\n        const session = this.sessionManager.getSession(this.runService.getCurrentConfig());\n\n        const runopts = this.runService.getCurrentConfig();\n        const scopedFilter = injectFiltersFromSession($.extend(true, {}, {\n            saved: true, \n            trashed: false,\n            model: runopts.model,\n        }, filter), session, this.options);\n        Object.keys(filter || {}).forEach((key)=> {\n            if (filter[key] === undefined) {\n                delete scopedFilter[key];\n            }\n        });\n\n        const opModifiers = $.extend(true, {}, {\n            sort: 'created',\n            direction: 'asc',\n        }, modifiers);\n        if (variables) {\n            opModifiers.include = [].concat(variables);\n        }\n\n        const ops = $.extend({}, {\n            recordsPerFetch: 100,\n            onData: ()=> {},\n            startRecord: opModifiers.startRecord,\n            endRecord: opModifiers.endRecord,\n        }, options);\n        return bulkFetchRuns((startRecord, endRecord)=> {\n            const opModifiersWithPaging = $.extend({}, opModifiers, { startRecord: startRecord, endRecord: endRecord });\n            return this.runService.query(scopedFilter, opModifiersWithPaging);\n        }, ops);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/saved-runs-manager/index.js","module.exports = {\"version\":\"v2\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/api-version.json\n// module id = 25\n// module chunks = 0","var { omit } = require('util/object-util');\nvar { toQueryFormat } = require('util/query-util');\n\nmodule.exports = function (config) {\n\n    var defaults = {\n        url: '',\n\n        contentType: 'application/json',\n        headers: {},\n        statusCode: {\n            404: $.noop\n        },\n\n        /**\n         * ONLY for strings in the url. All GET & DELETE params are run through this\n         * @type {Function}\n         */\n        parameterParser: toQueryFormat,\n\n        // To allow epicenter.token and other session cookies to be passed\n        // with the requests\n        xhrFields: {\n            withCredentials: true\n        }\n    };\n\n    var transportOptions = $.extend({}, defaults, config);\n\n    var result = function (d) {\n        return ($.isFunction(d)) ? d() : d;\n    };\n\n    var connect = function (method, params, connectOptions) {\n        params = result(params);\n        params = ($.isPlainObject(params) || Array.isArray(params)) ? JSON.stringify(params) : params;\n\n        var options = $.extend(true, {}, transportOptions, connectOptions, {\n            method: method,\n            data: params\n        });\n        var ALLOWED_TO_BE_FUNCTIONS = ['data', 'url'];\n        $.each(options, function (key, value) {\n            if ($.isFunction(value) && ALLOWED_TO_BE_FUNCTIONS.indexOf(key) !== -1) {\n                options[key] = value();\n            }\n        });\n\n        if (options.logLevel && options.logLevel === 'DEBUG') {\n            console.log(options.url);\n            var oldSuccessFn = options.success || $.noop;\n            options.success = function (response, ajaxStatus, ajaxReq) {\n                console.log(response);\n                oldSuccessFn.apply(this, arguments);\n            };\n        }\n\n        var beforeSend = options.beforeSend;\n        options.beforeSend = function (xhr, settings) {\n            xhr.requestUrl = (connectOptions || {}).url;\n            if (beforeSend) {\n                beforeSend.apply(this, arguments);\n            }\n        };\n\n        //These params mean affect jQuery behavior, and may be passed in inadvertently since all the different options are merged together\n        //FIXME: Do not merge with service options and we won't have this problem\n        const paramsToIgnore = ['password', 'username', 'isLocal', 'type'];\n        const cleaned = omit(options, paramsToIgnore);\n\n        //Legacy: jquery .then resolves with 3 different response values, which makes $.when return an array.  remove in 3.0\n        return $.ajax(cleaned);\n    };\n\n    var publicAPI = {\n        get: function (params, ajaxOptions) {\n            var options = $.extend({}, transportOptions, ajaxOptions);\n            params = options.parameterParser(result(params));\n            return connect.call(this, 'GET', params, options);\n        },\n        splitGet: function () {\n\n        },\n        post: function () {\n            return connect.apply(this, ['post'].concat([].slice.call(arguments)));\n        },\n        patch: function () {\n            return connect.apply(this, ['patch'].concat([].slice.call(arguments)));\n        },\n        put: function () {\n            return connect.apply(this, ['put'].concat([].slice.call(arguments)));\n        },\n        delete: function (params, ajaxOptions) {\n            //DELETE doesn't support body params, but jQuery thinks it does.\n            var options = $.extend({}, transportOptions, ajaxOptions);\n            params = options.parameterParser(result(params));\n            if ($.trim(params)) {\n                var delimiter = (result(options.url).indexOf('?') === -1) ? '?' : '&';\n                options.url = result(options.url) + delimiter + params;\n            }\n            return connect.call(this, 'DELETE', null, options);\n        },\n        head: function () {\n            return connect.apply(this, ['head'].concat([].slice.call(arguments)));\n        },\n        options: function () {\n            return connect.apply(this, ['options'].concat([].slice.call(arguments)));\n        }\n    };\n\n    return $.extend(this, publicAPI);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/transport/ajax-http-transport.js","import TransportFactory from 'transport/http-transport-factory';\nimport { splitGetFactory } from 'util/run-util';\n\n/**\n * @description\n * ## Variables API Service\n *\n * Used in conjunction with the [Run API Service](../run-api-service/) to read, write, and search for specific model variables.\n * ```js\n * var rm = new F.manager.RunManager({\n *       run: {\n *           account: 'acme-simulations',\n *           project: 'supply-chain-game',\n *           model: 'supply-chain-model.jl'\n *       }\n *  });\n * rm.getRun()\n *   .then(function() {\n *      var vs = rm.run.variables();\n *      vs.save({sample_int: 4});\n *    });\n * ```\n * @param {object} config\n * @property {RunService} runService The run service instance to which the variable filters apply.\n */\nexport default function VariablesService(config) {\n    var defaults = {\n        runService: null\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n\n    var getURL = function () {\n        //TODO: Replace with getCurrentconfig instead?\n        return serviceOptions.runService.urlConfig.getFilterURL() + 'variables/';\n    };\n\n    var addAutoRestoreHeader = function (options) {\n        return serviceOptions.runService.urlConfig.addAutoRestoreHeader(options);\n    };\n\n    var httpOptions = {\n        url: getURL\n    };\n    if (serviceOptions.token) {\n        httpOptions.headers = {\n            Authorization: 'Bearer ' + serviceOptions.token\n        };\n    }\n    var http = new TransportFactory(httpOptions);\n    http.splitGet = splitGetFactory(httpOptions);\n\n    var publicAPI = {\n\n        /**\n         * Get values for a variable.\n         *\n         * @example\n         * vs.load('sample_int')\n         *     .then(function(val){\n         *         // val contains the value of sample_int\n         *     });\n         *\n         * \n         * @param {string} variable Name of variable to load.\n         * @param {{startRecord:?number, endRecord:?number, sort:?string, direction:?string}} [outputModifier] Available fields include: `startrecord`, `endrecord`, `sort`, and `direction` (`asc` or `desc`).\n         * @param {object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        load: function (variable, outputModifier, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            httpOptions = addAutoRestoreHeader(httpOptions);\n            return http.get(outputModifier, $.extend({}, httpOptions, {\n                url: getURL() + variable + '/'\n            }));\n        },\n\n        /**\n         * Returns particular variables, based on conditions specified in the `query` object.\n         *\n         * @example\n         * vs.query(['price', 'sales'])\n         *     .then(function(val) {\n         *         // val is an object with the values of the requested variables: val.price, val.sales\n         *     });\n         *\n         * vs.query({ include:['price', 'sales'] });\n         * \n         * @param {Object|Array} query The names of the variables requested.\n         * @param {{startRecord:?number, endRecord:?number, sort:?string, direction:?string}} [outputModifier] Available fields include: `startrecord`, `endrecord`, `sort`, and `direction` (`asc` or `desc`).\n         * @param {object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        query: function (query, outputModifier, options) {\n            //Query and outputModifier are both querystrings in the url; only calling them out separately here to be consistent with the other calls\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            httpOptions = addAutoRestoreHeader(httpOptions);\n\n            if (Array.isArray(query)) {\n                query = { include: query };\n            }\n            $.extend(query, outputModifier);\n            return http.splitGet(query, httpOptions);\n        },\n\n        /**\n         * Save values to model variables. Overwrites existing values. Note that you can only update model variables if the run is [in memory](../../../run_persistence/#runs-in-memory). (An alternate way to update model variables is to call a method from the model and make sure that the method persists the variables. See `do`, `serial`, and `parallel` in the [Run API Service](../run-api-service/) for calling methods from the model.)\n         *\n         * @example\n         * vs.save('price', 4);\n         * vs.save({ price: 4, quantity: 5, products: [2,3,4] });\n         * \n         * @param {Object|String} variable An object composed of the model variables and the values to save. Alternatively, a string with the name of the variable.\n         * @param {object} [val] If passing a string for `variable`, use this argument for the value to save.\n         * @param {object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        save: function (variable, val, options) {\n            var attrs;\n            if (typeof variable === 'object') {\n                attrs = variable;\n                options = val;\n            } else {\n                (attrs = {})[variable] = val;\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n\n            return http.patch.call(this, attrs, httpOptions);\n        }\n\n        // Not Available until underlying API supports PUT. Otherwise save would be PUT and merge would be PATCH\n        // *\n        //  * Save values to the api. Merges arrays, but otherwise same as save\n        //  * @param {Object|String} variable Object with attributes, or string key\n        //  * @param {object} val Optional if prev parameter was a string, set value here\n        //  * @param {object} options Overrides for configuration options\n        //  *\n        //  * @example\n        //  *     vs.merge({ price: 4, quantity: 5, products: [2,3,4] })\n        //  *     vs.merge('price', 4);\n\n        // merge: function (variable, val, options) {\n        //     var attrs;\n        //     if (typeof variable === 'object') {\n        //       attrs = variable;\n        //       options = val;\n        //     } else {\n        //       (attrs = {})[variable] = val;\n        //     }\n        //     var httpOptions = $.extend(true, {}, serviceOptions, options);\n\n        //     return http.patch.call(this, attrs, httpOptions);\n        // }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/run-api-service/variables-api-service.js","import TransportFactory from 'transport/http-transport-factory';\nimport { getURLConfig, getDefaultOptions } from '../service-utils';\n\nvar apiEndpoint = 'model/introspect';\n\n/**\n * @description\n * \n * ## Introspection API Service\n *\n * The Introspection API Service allows you to view a list of the variables and operations in a model. Typically used in conjunction with the [Run API Service](../run-api-service/).\n *\n * The Introspection API Service is not available for Forio SimLang.\n *\n * ```js\n * var intro = new F.service.Introspect({\n *         account: 'acme-simulations',\n *         project: 'supply-chain-game'\n * });\n * intro.byModel('supply-chain.py').then(function(data){ ... });\n * intro.byRunID('2b4d8f71-5c34-435a-8c16-9de674ab72e6').then(function(data){ ... });\n * ```\n * \n * @param {AccountAPIServiceOptions} config \n */\nexport default function (config) {\n    var defaults = {\n        token: undefined,\n        account: undefined,\n        project: undefined,\n    };\n\n    const serviceOptions = getDefaultOptions(defaults, config, {\n        apiEndpoint: apiEndpoint\n    });\n    const urlConfig = getURLConfig(serviceOptions);\n    var http = new TransportFactory(serviceOptions.transport);\n\n    var publicAPI = {\n        /**\n         * Get the available variables and operations for a given model file.\n         *\n         * Note: This does not work for any model which requires additional parameters, such as `files`.\n         *\n         * @example\n         * intro.byModel('abc.vmf')\n         *     .then(function(data) {\n         *         // data contains an object with available functions (used with operations API) and available variables (used with variables API)\n         *         console.log(data.functions);\n         *         console.log(data.variables);\n         *     });\n         *\n         * \n         * @param  {string} modelFile Name of the model file to introspect.\n         * @param  {object} [options] Overrides for configuration options.\n         * @return {Promise} \n         */\n        byModel: function (modelFile, options) {\n            var opts = $.extend(true, {}, serviceOptions, options);\n            if (!opts.account || !opts.project) {\n                throw new Error('Account and project are required when using introspect#byModel');\n            }\n            if (!modelFile) {\n                throw new Error('modelFile is required when using introspect#byModel');\n            }\n            var url = { url: urlConfig.getAPIPath(apiEndpoint) + [opts.account, opts.project, modelFile].join('/') };\n            var httpOptions = $.extend(true, {}, serviceOptions, options, url);\n            return http.get('', httpOptions);\n        },\n\n        /**\n         * Get the available variables and operations for a given model file.\n         *\n         * Note: This does not work for any model which requires additional parameters such as `files`.\n         *\n         * @example\n         * intro.byRunID('2b4d8f71-5c34-435a-8c16-9de674ab72e6')\n         *     .then(function(data) {\n         *         // data contains an object with available functions (used with operations API) and available variables (used with variables API)\n         *         console.log(data.functions);\n         *         console.log(data.variables);\n         *     });\n         *\n         * \n         * @param  {string} runID Id of the run to introspect.\n         * @param  {object} [options] Overrides for configuration options.\n         * @return {Promise} \n         */\n        byRunID: function (runID, options) {\n            if (!runID) {\n                throw new Error('runID is required when using introspect#byModel');\n            }\n            var url = { url: urlConfig.getAPIPath(apiEndpoint) + runID };\n            var httpOptions = $.extend(true, {}, serviceOptions, options, url);\n            return http.get('', httpOptions);\n        }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/introspection-api-service/index.js","/**\n    Decides type of store to provide\n*/\n\n'use strict';\n// var isNode = false; FIXME: Browserify/minifyify has issues with the next link\n// var store = (isNode) ? require('./session-store') : require('./cookie-store');\nvar store = require('./cookie-store');\n\nmodule.exports = store;\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/store-factory.js","/**\n * @class Cookie Storage Service\n *\n * @example\n *      var people = require('cookie-store')({ root: 'people' });\n        people\n            .save({lastName: 'smith' })\n\n */\n\n// Thin document.cookie wrapper to allow unit testing\nvar Cookie = function () {\n    this.get = function () {\n        return document.cookie;\n    };\n\n    this.set = function (newCookie) {\n        document.cookie = newCookie;\n    };\n};\n\nmodule.exports = function (config) {\n    var host = window.location.hostname;\n    var secureFlag = location.protocol === 'https:';\n    var validHost = host.split('.').length > 1;\n    var domain = validHost ? '.' + host : null;\n\n    var defaults = {\n        /**\n         * Name of collection\n         * @type { string}\n         */\n        root: '/',\n\n        domain: domain,\n        secure: secureFlag,\n        cookie: new Cookie()\n    };\n    this.serviceOptions = $.extend({}, defaults, config);\n\n    var publicAPI = {\n        // * TBD\n        //  * Query collection; uses MongoDB syntax\n        //  * @see  <TBD: Data API URL>\n        //  *\n        //  * @param { string} qs Query Filter\n        //  * @param { string} limiters @see <TBD: url for limits, paging etc>\n        //  *\n        //  * @example\n        //  *     cs.query(\n        //  *      { name: 'John', className: 'CSC101' },\n        //  *      {limit: 10}\n        //  *     )\n\n        // query: function (qs, limiters) {\n\n        // },\n\n        /**\n         * Save cookie value.  Note: root defaults to '/', domain defaults to current domain, samesite defaults to \"none\".\n         * Secure flag is added to pages served from https.\n         * @param  { string|Object} key   If given a key save values under it, if given an object directly, save to top-level api\n         * @param  {any} [value] value to store\n         * @param {object} [options] Overrides for service options (domain, samesite, root)\n         *\n         * @return {*} The saved value\n         *\n         * @example\n         *     cs.set('person', { firstName: 'john', lastName: 'smith' });\n         *     cs.set({ name:'smith', age:'32' });\n         */\n        set: function (key, value, options) {\n            var setOptions = $.extend(true, {}, this.serviceOptions, options);\n\n            var domain = setOptions.domain;\n            var samesite = setOptions.samesite;\n            var path = setOptions.root;\n            var cookie = setOptions.cookie;\n            var secureFlag = setOptions.secure;\n\n            const contents = [`${encodeURIComponent(key)}=${encodeURIComponent(value)}`];\n            if (domain) {\n                contents.push(`domain=${domain}`);\n            }\n            if (path) {\n                contents.push(`path=${path}`);\n            }\n            if (secureFlag) {\n                contents.push('secure');\n            }\n            if (samesite) {\n                contents.push(`samesite=${samesite}`);\n            } else if (domain === '.local.forio.com') {\n                contents.push('samesite=lax');\n            } else {\n                contents.push('samesite=none');\n            }\n            if (setOptions.expires !== undefined) {\n                contents.push(`expires=${setOptions.expires}`);\n            }\n            cookie.set(contents.join('; '));\n\n            return value;\n        },\n\n        /**\n         * Load cookie value\n         * @param  {string| object} key   If given a key save values under it, if given an object directly, save to top-level api\n         * @return {any} The value stored\n         *\n         * @example\n         *     cs.get('person');\n         */\n        get: function (key) {\n            var cookie = this.serviceOptions.cookie;\n            var cookieReg = new RegExp('(?:^|;)\\\\s*' + encodeURIComponent(key).replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$');\n            var res = cookieReg.exec(cookie.get());\n            var val = res ? decodeURIComponent(res[1]) : null;\n            return val;\n        },\n\n        /**\n         * Removes key from collection\n         * @param {string} key key to remove\n         * @param {object} [options] overrides for service options\n         * @return {string} key The key removed\n         *\n         * @example\n         *     cs.remove('person');\n         */\n        remove: function (key, options) {\n            var remOptions = $.extend(true, {}, this.serviceOptions, options);\n\n            var domain = remOptions.domain;\n            var path = remOptions.root;\n            var cookie = remOptions.cookie;\n\n            cookie.set(encodeURIComponent(key) +\n                            '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\n                            (domain ? '; domain=' + domain : '') +\n                            (path ? '; path=' + path : '')\n            );\n            return key;\n        },\n\n        /**\n         * Removes collection being referenced\n         * @return {string[]} keys All the keys removed\n         */\n        destroy: function () {\n            var cookie = this.serviceOptions.cookie;\n            var aKeys = cookie.get().replace(/((?:^|\\s*;)[^=]+)(?=;|$)|^\\s*|\\s*(?:=[^;]*)?(?:\\1|$)/g, '').split(/\\s*(?:=[^;]*)?;\\s*/);\n            for (var nIdx = 0; nIdx < aKeys.length; nIdx++) {\n                var cookieKey = decodeURIComponent(aKeys[nIdx]);\n                this.remove(cookieKey);\n            }\n            return aKeys;\n        }\n    };\n\n    $.extend(this, publicAPI);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/cookie-store.js","import ConfigService from 'service/configuration-service';\nimport TransportFactory from 'transport/http-transport-factory';\n\n/**\n * @description\n *\n * ## Authentication API Service\n *\n * The Authentication API Service provides a method for logging in, which creates and returns a user access token.\n *\n * User access tokens are required for each call to Epicenter. (See [Project Access](../../../project_access/) for more information.)\n *\n * If you need additional functionality -- such as tracking session information, easily retrieving the user token, or getting the groups to which an end user belongs -- consider using the [Authorization Manager](../auth-manager/) instead.\n *\n *      var auth = new F.service.Auth();\n *      auth.login({ userName: 'jsmith@acmesimulations.com',\n *                  password: 'passw0rd' });\n *  @param {AccountAPIServiceOptions} config\n *  @property {string} userName Email or username to use for logging in.\n */\nexport default function AuthService(config) {\n    var defaults = {\n        userName: '',\n        account: '',\n        transport: {}\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n    var urlConfig = new ConfigService(serviceOptions).get('server');\n\n    var transportOptions = $.extend(true, {}, serviceOptions.transport, {\n        url: urlConfig.getAPIPath('authentication')\n    });\n    var http = new TransportFactory(transportOptions);\n\n    var publicAPI = {\n\n        /**\n         * Logs user in, returning the user access token.\n         *\n         * If no `userName` or `password` were provided in the initial configuration options, they are required in the `options` here. If no `account` was provided in the initial configuration options and the `userName` is for an [end user](../../../glossary/#users), the `account` is required as well.\n         *\n         * @example\n         * auth.login({\n         *     userName: 'jsmith',\n         *     password: 'passw0rd',\n         *     account: 'acme-simulations' })\n         * .then(function (token) {\n         *     console.log(\"user access token is: \", token.access_token);\n         * });\n         *\n         *\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        login: function (options) {\n            var httpOptions = $.extend(true, { success: $.noop }, serviceOptions, options);\n            if (!httpOptions.userName || !httpOptions.password) {\n                var resp = { status: 401, statusMessage: 'No username or password specified.' };\n                if (options.error) {\n                    options.error.call(this, resp);\n                }\n\n                return $.Deferred().reject(resp).promise();\n            }\n\n            var postParams = {\n                userName: httpOptions.userName,\n                password: httpOptions.password,\n            };\n            if (httpOptions.account) {\n                //pass in null for account under options if you don't want it to be sent\n                postParams.account = httpOptions.account;\n            }\n\n            // EPICENTER-3738: Add this back when we properly handle a list of groups as the response from the Auth API\n            // if (httpOptions.project) {\n            //     postParams.project = httpOptions.project;\n            // }\n\n            return http.post(postParams, httpOptions);\n        },\n\n        // (replace with /* */ comment block, to make visible in docs, once this is more than a noop)\n        //\n        // Logs user out from specified accounts.\n        //\n        // Epicenter logout is not implemented yet, so for now this is a dummy promise that gets automatically resolved.\n        //\n        // @example\n        //      auth.logout();\n        //\n        //\n        // @param {Object} [options] Overrides for configuration options.\n        //\n        logout: function (options) {\n            var dtd = $.Deferred();\n            dtd.resolve();\n            return dtd.promise();\n        }\n    };\n\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/auth-api-service/index.js","/**\n *\n * ## Group API Adapter\n *\n * The Group API Adapter provides methods to look up, create, change or remove information about groups in a project. It is based on query capabilities of the underlying RESTful [Group API](../../../rest_apis/user_management/group/).\n *\n * This is only needed for Authenticated projects, that is, team projects with [end users and groups](../../../groups_and_end_users/).\n *\n *      var ma = new F.service.Group({ token: 'user-or-project-access-token' });\n *      ma.getGroupsForProject({ account: 'acme', project: 'sample' });\n */\n\nimport { getDefaultOptions, getApiUrl } from 'service/service-utils';\nimport TransportFactory from 'transport/http-transport-factory';\n\nvar apiEndpoint = 'group/local';\n\nvar GroupService = function (config) {\n    var defaults = {\n        /**\n         * Epicenter account name. Defaults to undefined.\n         * @type {string}\n         */\n        account: undefined,\n\n        /**\n         * Epicenter project name. Defaults to undefined.\n         * @type {string}\n         */\n        project: undefined,\n\n        /**\n         * Options to pass on to the underlying transport layer. All jquery.ajax options at http://api.jquery.com/jQuery.ajax/ are available. Defaults to empty object.\n         * @type {object}\n         */\n        transport: {}\n    };\n    var serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: apiEndpoint });\n    var transportOptions = serviceOptions.transport;\n    delete serviceOptions.transport;\n    var http = new TransportFactory(transportOptions, serviceOptions);\n    var publicAPI = {\n        /**\n        * Gets information for a group or multiple groups.\n        * @param {Object} params object with query parameters\n        * @param {string} params.q partial match for name, organization or event.\n        * @param {string} params.account Epicenter's Team ID\n        * @param {string} params.project Epicenter's Project ID\n        * @param {string} params.name Epicenter's Group Name\n        * @param {Object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        getGroups: function (params, options) {\n            //groupID is part of the URL\n            //q, account and project are part of the query string\n            var finalOpts = $.extend(true, {}, serviceOptions, options);\n            var finalParams;\n            if (typeof params === 'string') {\n                finalOpts.url = getApiUrl(apiEndpoint + '/' + params, finalOpts);\n            } else {\n                finalParams = params;\n            }\n            return http.get(finalParams, finalOpts);\n        }\n    };\n    $.extend(this, publicAPI);\n};\n\nexport default GroupService;\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/group-api-service/index.js","var makeName = function (channelName, topic) {\n    //Replace trailing/double slashes\n    var newName = (channelName ? (channelName + '/' + topic) : topic).replace(/\\/\\//g, '/').replace(/\\/$/, '');\n    return newName;\n};\n\n\nexport default class ChannelService {\n    /**\n     * @param {object} options\n     * @property {string} [base] The base topic. This is added as a prefix to all further topics you publish or subscribe to while working with this Channel Service.\n     * @property {function(topic): string} [topicResolver]  A function that processes all 'topics' passed into the `publish` and `subscribe` methods. This is useful if you want to implement your own serialize functions for converting custom objects to topic names. By default, it just echoes the topic.\n     * @property {object} [transport] The instance of `$.cometd` to hook onto. See http://docs.cometd.org/reference/javascript.html for additional background on cometd.\n     */\n    constructor(options) {\n        var defaults = {\n            base: '',\n            topicResolver: function (topic) {\n                return topic;\n            },\n            transport: null\n        };\n        this.channelOptions = $.extend(true, {}, defaults, options);\n    }\n\n    /**\n     * Subscribe to changes on a topic.\n     *\n     * The topic should include the full path of the account id (**Team ID** for team projects), project id, and group name. (In most cases, it is simpler to use the [Epicenter Channel Manager](../epicenter-channel-manager/) instead, in which case this is configured for you.)\n     *\n     *  @example\n     *  var cb = function(val) { console.log(val.data); };\n     *\n     *  // Subscribe to changes on a top-level 'run' topic\n     *  cs.subscribe('/acme-simulations/supply-chain-game/fall-seminar/run', cb);\n     *\n     *  // Subscribe to changes on children of the 'run' topic. Note this will also be triggered for changes to run.x.y.z.\n     *  cs.subscribe('/acme-simulations/supply-chain-game/fall-seminar/run/*', cb);\n     *\n     *  // Subscribe to changes on both the top-level 'run' topic and its children\n     *  cs.subscribe(['/acme-simulations/supply-chain-game/fall-seminar/run',\n     *      '/acme-simulations/supply-chain-game/fall-seminar/run/*'], cb);\n     *\n     *  // Subscribe to changes on a particular variable\n     *  subscribe('/acme-simulations/supply-chain-game/fall-seminar/run/variables/price', cb);\n     *\n     * @param  {String|Array}   topic    List of topics to listen for changes on.\n     * @param  {Function} callback Callback function to execute. Callback is called with signature `(evt, payload, metadata)`.\n     * @param  {Object}   context  Context in which the `callback` is executed.\n     * @param  {Object}   [options] Overrides for configuration options.\n     * @param  {number}   [options.priority]  Used to control order of operations. Defaults to 0. Can be any +ve or -ve number.\n     * @param  {String|number|Function}   [options.value] The `callback` is only triggered if this condition matches. See examples for details.\n     * @return {object} Returns a subscription object you can later use to unsubscribe.\n     */\n    subscribe(topic, callback, context, options) {\n\n        var topics = [].concat(topic);\n        var me = this;\n        var subscriptionIds = [];\n        var opts = me.channelOptions;\n\n        opts.transport.batch(function () {\n            $.each(topics, function (index, topic) {\n                topic = makeName(opts.base, opts.topicResolver(topic));\n                subscriptionIds.push(opts.transport.subscribe(topic, callback));\n            });\n        });\n        return (subscriptionIds[1] ? subscriptionIds : subscriptionIds[0]);\n    }\n\n    /**\n     * Publish data to a topic.\n     *\n     * @example\n     * // Send data to all subscribers of the 'run' topic\n     * cs.publish('/acme-simulations/supply-chain-game/fall-seminar/run', { completed: false });\n     *\n     * // Send data to all subscribers of the 'run/variables' topic\n     * cs.publish('/acme-simulations/supply-chain-game/fall-seminar/run/variables', { price: 50 });\n     *\n     * @param  {String} topic Topic to publish to.\n     * @param  {*} data  Data to publish to topic.\n     * @return {Array | Object} Responses to published data\n     */\n    publish(topic, data) {\n        var topics = [].concat(topic);\n        var me = this;\n        var returnObjs = [];\n        var opts = me.channelOptions;\n\n\n        opts.transport.batch(function () {\n            $.each(topics, function (index, topic) {\n                topic = makeName(opts.base, opts.topicResolver(topic));\n                if (topic.charAt(topic.length - 1) === '*') {\n                    topic = topic.replace(/\\*+$/, '');\n                    console.warn('You can cannot publish to channels with wildcards. Publishing to ', topic, 'instead');\n                }\n                returnObjs.push(opts.transport.publish(topic, data));\n            });\n        });\n        return (returnObjs[1] ? returnObjs : returnObjs[0]);\n    }\n\n    /**\n     * Unsubscribe from changes to a topic.\n     *\n     * @example\n     * cs.unsubscribe('sampleToken');\n     *\n     *\n     * @param  {String} token The token for topic is returned when you initially subscribe. Pass it here to unsubscribe from that topic.\n     * @return {Object} reference to current instance\n     */\n    unsubscribe(token) {\n        this.channelOptions.transport.unsubscribe(token);\n        return this;\n    }\n\n    /**\n     * Start listening for events on this instance. Signature is same as for jQuery Events: http://api.jquery.com/on/.\n     *\n     * Supported events are: `connect`, `disconnect`, `subscribe`, `unsubscribe`, `publish`, `error`.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/on/.\n     */\n    on(event) {\n        $(this).on.apply($(this), arguments);\n    }\n\n    /**\n     * Stop listening for events on this instance. Signature is same as for jQuery Events: http://api.jquery.com/off/.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/off/.\n     */\n    off(event) {\n        $(this).off.apply($(this), arguments);\n    }\n\n    /**\n     * Trigger events and execute handlers. Signature is same as for jQuery Events: http://api.jquery.com/trigger/.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/trigger/.\n     */\n    trigger(event) {\n        $(this).trigger.apply($(this), arguments);\n    }\n}\n\n// future functionality:\n//      // Set the context for the callback\n//      cs.subscribe('run', function () { this.innerHTML = 'Triggered'}, document.body);\n//\n//      // Control the order of operations by setting the `priority`\n//      cs.subscribe('run', cb, this, {priority: 9});\n//\n//      // Only execute the callback, `cb`, if the value of the `price` variable is 50\n//      cs.subscribe('run/variables/price', cb, this, {priority: 30, value: 50});\n//\n//      // Only execute the callback, `cb`, if the value of the `price` variable is greater than 50\n//      subscribe('run/variables/price', cb, this, {priority: 30, value: '>50'});\n//\n//      // Only execute the callback, `cb`, if the value of the `price` variable is even\n//      subscribe('run/variables/price', cb, this, {priority: 30, value(val) {return val % 2 === 0}});\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/channel-service/index.js","\nimport { getDefaultOptions, getURLConfig } from 'service/service-utils';\nimport TransportFactory from 'transport/http-transport-factory';\nvar apiEndpoint = 'presence';\n\n/**\n *\n * @description\n * \n * ## Presence API Service\n *\n * The Presence API Service provides methods to get and set the presence of an end user in a project, that is, to indicate whether the end user is online. This happens automatically: in projects that use [channels](../epicenter-channel-manager/), the end user's presence is published automatically on a \"presence\" channel that is specific to each group. You can also use the Presence API Service to do this explicitly: you can make a call to indicate that a particular end user is online or offline. \n *\n * The Presence API Service is only needed for Authenticated projects, that is, team projects with [end users and groups](../../../groups_and_end_users/). It is typically used only in multiplayer projects, to facilitate end users communicating with each other. It is based on the query capabilities of the underlying RESTful [Presence API](../../../rest_apis/multiplayer/presence/).\n *\n *      var pr = new F.service.Presence();\n *      pr.markOnline('example-userId');\n *      pr.markOffline('example-userId');\n *      pr.getStatus();\n * \n * @param {AccountAPIServiceOptions} config \n * @property {string} [groupName] Epicenter group name. Note that this is the group *name*, not the group *id*. If left blank, taken from the session manager.\n */\nexport default function (config) {\n    var defaults = {\n        groupName: undefined,\n\n        account: undefined,\n        project: undefined,\n        \n        transport: {},\n    };\n    const serviceOptions = getDefaultOptions(defaults, config, {\n        apiEndpoint: apiEndpoint\n    });\n    const urlConfig = getURLConfig(serviceOptions);\n    var http = new TransportFactory(serviceOptions.transport);\n\n    var getFinalParams = function (params) {\n        if (typeof params === 'object') {\n            return $.extend(true, {}, serviceOptions, params);\n        }\n        return serviceOptions;\n    };\n\n    const userOnlineTimers = {};\n    function cancelKeepOnline(userid) {\n        clearInterval(userOnlineTimers[userid]);\n    }\n\n    var publicAPI = {\n        /**\n         * Marks an end user as online.\n         *\n         *\n         * @example\n         *     var pr = new F.service.Presence();\n         *     pr.markOnline('0000015a68d806bc09cd0a7d207f44ba5f74')\n         *          .then(function(presenceObj) {\n         *               console.log('user ', presenceObj.userId, \n         *                    ' now online, as of ', presenceObj.lastModified);\n         *          });\n         *\n         * @param  {string} [userId] optional If not provided, taken from session cookie.\n         * @param  {Object} [options] Additional options to change the presence service defaults.\n         * @param  {boolean} [options.keepOnline] Starts a timer registering the user as online every 5 minutes. Timer is canceled when you call `markOffline` or `cancelKeepOnline`\n         * @return {Promise} Promise with presence information for user marked online.\n         */\n        markOnline: function (userId, options) {\n            options = options || {};\n            var isString = typeof userId === 'string';\n            var objParams = getFinalParams(userId);\n            if (!objParams.groupName && !options.groupName) {\n                throw new Error('No groupName specified.');\n            }\n            userId = isString ? userId : objParams.userId;\n            var groupName = options.groupName || objParams.groupName;\n            var httpOptions = $.extend(true, {}, serviceOptions, options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + groupName + '/' + userId }\n            );\n            \n            if (options.keepOnline) {\n                const PRESENCE_TIMEOUT_INTERVAL = 5;\n                userOnlineTimers[userId] = setInterval(()=> {\n                    http.post({ message: 'online' }, httpOptions);\n                }, PRESENCE_TIMEOUT_INTERVAL * 60 * 1000);\n            }\n            return http.post({ message: 'online' }, httpOptions);\n        },\n\n        /**\n         * If you set `keepOnline` to true while calling `markOnline`, use this to cancel the timer\n         * @param {string} userid\n         */\n        cancelKeepOnline: function (userid) {\n            cancelKeepOnline(userid);\n        },\n\n        /**\n         * Marks an end user as offline.\n         *\n         *\n         * @example\n         * var pr = new F.service.Presence();\n         * pr.markOffline('0000015a68d806bc09cd0a7d207f44ba5f74');\n         *\n         * @param  {string} [userId] If not provided, taken from session cookie.\n         * @param  {Object} [options] Additional options to change the presence service defaults.\n         * @return {Promise} Promise to remove presence record for end user.\n         */\n        markOffline: function (userId, options) {\n            options = options || {};\n            var isString = typeof userId === 'string';\n            var objParams = getFinalParams(userId);\n            if (!objParams.groupName && !options.groupName) {\n                throw new Error('No groupName specified.');\n            }\n            userId = isString ? userId : objParams.userId;\n            var groupName = options.groupName || objParams.groupName;\n            var httpOptions = $.extend(true, {}, serviceOptions, options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + groupName + '/' + userId }\n            );\n            cancelKeepOnline(userId);\n            return http.delete({}, httpOptions);\n        },\n\n        /**\n         * Returns a list of all end users in this group that are currently online.\n         *\n         *\n         * @example\n         * var pr = new F.service.Presence();\n         * pr.getStatus('groupName').then(function(onlineUsers) {\n         *      for (var i=0; i < onlineUsers.length; i++) {\n         *           console.log('user ', onlineUsers[i].userId, \n         *                ' is online as of ', onlineUsers[i].lastModified);\n         *      }\n         * });\n         *\n         * @param  {string} [groupName] If not provided, taken from session cookie.\n         * @param  {object} [options] Additional options to change the presence service defaults.\n         * @return {Promise} Promise with status of online users\n         */\n        getStatus: function (groupName, options) {\n            options = options || {};\n            var objParams = getFinalParams(groupName);\n            if (!groupName && !objParams.groupName) {\n                throw new Error('No groupName specified.');\n            }\n            groupName = groupName || objParams.groupName;\n            var httpOptions = $.extend(true, {}, serviceOptions, options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + groupName }\n            );\n            return http.get({}, httpOptions);\n        },\n\n        /**\n         * Appends a boolean 'isOnline' field to provided list of users\n         *\n         * @example\n         * var pr = new F.service.Presence();\n         * pr.getStatusForUsers([{ userId: 'a', userId: 'b'}]).then(function(onlineUsers) {\n         *      console.log(onlineUsers[a].isOnline);\n         * });\n         *\n         * @param {{userId: string}[]} userList Users to get status for\n         * @param  {string} [groupName] If not provided, taken from session cookie.\n         * @param  {object} [options] Additional options to change the presence service defaults.\n         * \n         * @return {Promise} Promise with status of online users\n         */\n        getStatusForUsers: function (userList, groupName, options) {\n            if (!userList || !Array.isArray(userList)) {\n                throw new Error('getStatusForUsers: No userList provided.');\n            }\n            return this.getStatus(groupName, options).then((presenceList)=> {\n                return userList.map((user)=> {\n                    const isOnline = presenceList.find((status)=> status.userId === user.userId);\n                    user.isOnline = !!isOnline;\n                    return user;\n                });\n            });\n        },\n\n        /**\n         * End users are automatically marked online and offline in a \"presence\" channel that is specific to each group. Gets this channel (an instance of the [Channel Service](../channel-service/)) for the given group. (Note that this Channel Service instance is also available from the [Epicenter Channel Manager getPresenceChannel()](../epicenter-channel-manager/#getPresenceChannel).)\n         *\n         * @example\n         * var pr = new F.service.Presence();\n         * var cm = pr.getChannel('group1');\n         * cm.publish('', 'a message to presence channel');\n         *\n         * Channel instance for Presence channel\n         * @param  {string} [groupName] If not provided, taken from session cookie.\n         * @param  {Object} [options] Additional options to change the presence service defaults\n         * @return {Channel} Channel instance\n         */\n        getChannel: function (groupName, options) {\n            var ChannelManager = require('managers/epicenter-channel-manager').default;\n            options = options || {};\n            var isString = typeof groupName === 'string';\n            var objParams = getFinalParams(groupName);\n            if (!isString && !objParams.groupName) {\n                throw new Error('No groupName specified.');\n            }\n            groupName = isString ? groupName : objParams.groupName;\n            var cm = new ChannelManager(options);\n            return cm.getPresenceChannel(groupName);\n        }\n    };\n\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/presence-api-service/index.js","import TransportFactory from 'transport/http-transport-factory';\nimport { pick } from 'util/object-util';\nimport { getDefaultOptions, getURLConfig } from 'service/service-utils';\nvar apiEndpoint = 'model/state';\n\n/**\n * @description\n * ## State API Adapter\n *\n * The State API Adapter allows you to view the history of a run, and to replay or clone runs. \n *\n * The State API Adapter brings existing, persisted run data from the database back into memory, using the same run id (`replay`) or a new run id (`clone`). Runs must be in memory in order for you to update variables or call operations on them.\n *\n * Specifically, the State API Adapter works by \"re-running\" the run (user interactions) from the creation of the run up to the time it was last persisted in the database. This process uses the current version of the run's model. Therefore, if the model has changed since the original run was created, the retrieved run will use the new model — and may end up having different values or behavior as a result. Use with care!\n *\n * To use the State API Adapter, instantiate it and then call its methods:\n *\n *      var sa = new F.service.State();\n *      sa.replay({runId: '1842bb5c-83ad-4ba8-a955-bd13cc2fdb4f'});\n *\n * @param {object} config\n */\nexport default function StateService(config) {\n    var defaults = {};\n\n    const serviceOptions = getDefaultOptions(defaults, config, {\n        apiEndpoint: apiEndpoint\n    });\n    const urlConfig = getURLConfig(serviceOptions);\n    var http = new TransportFactory(serviceOptions.transport);\n\n    var parseRunIdOrError = function (params) {\n        if ($.isPlainObject(params) && params.runId) {\n            return params.runId;\n        } else {\n            throw new Error('Please pass in a run id');\n        }\n    };\n\n    var publicAPI = {\n\n        /**\n        * View the history of a run.\n        * \n        * @example\n        * var sa = new F.service.State();\n        * sa.load('0000015a06bb58613b28b57365677ec89ec5').then(function(history) {\n        *       console.log('history = ', history);\n        * });\n        *\n        *  \n        * @param {string} runId The id of the run.\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        load: function (runId, options) {\n            var httpParams = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + runId }\n            );\n            return http.get('', httpParams);\n        },\n\n        /**\n        * Replay a run. After this call, the run, with its original run id, is now available [in memory](../../../run_persistence/#runs-in-memory). (It continues to be persisted into the Epicenter database at regular intervals.)\n        *\n        * @example\n        * var sa = new F.service.State();\n        * sa.replay({runId: '1842bb5c-83ad-4ba8-a955-bd13cc2fdb4f', stopBefore: 'calculateScore'});\n        *\n        *  \n        * @param {object} params\n        * @param {string} params.runId The id of the run to bring back to memory.\n        * @param {string} [params.stopBefore] The run is advanced only up to the first occurrence of this method.\n        * @param {string[]} [params.exclude] Array of methods to exclude when advancing the run.\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        replay: function (params, options) {\n            var runId = parseRunIdOrError(params);\n\n            var replayOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + runId }\n            );\n\n            params = $.extend(true, { action: 'replay' }, pick(params, ['stopBefore', 'exclude']));\n\n            return http.post(params, replayOptions);\n        },\n\n\n        /**\n        * 'Rewind' applies to time-based models; it replays the model and stops before the last instance of the rewind operation.\n        * \n        *  Note that for this action to work, you need to define `\"rewind\":{\"name\": \"step\"}` in your model context file, where `step` is the name of the operation you typically use to advance your simulation.\n        *  \n        * @example\n        * var sa = new F.service.State();\n        * sa.rewind({runId: '1842bb5c-83ad-4ba8-a955-bd13cc2fdb4f' });\n        *\n        * @param {object} params\n        * @param {string} params.runId The id of the run to rewind\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        rewind: function (params, options) {\n            var runId = parseRunIdOrError(params);\n\n            var replayOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + 'rewind/' + runId }\n            );\n            return http.post({}, replayOptions);\n        },\n\n        /**\n        * Clone a given run and return a new run in the same state as the given run.\n        *\n        * The new run id is now available [in memory](../../../run_persistence/#runs-in-memory). The new run includes a copy of all of the data from the original run, EXCEPT:\n        *\n        * * The `saved` field in the new run record is not copied from the original run record. It defaults to `false`.\n        * * The `initialized` field in the new run record is not copied from the original run record. It defaults to `false` but may change to `true` as the new run is advanced. For example, if there has been a call to the `step` function (for Vensim models), the `initialized` field is set to `true`.\n        * * The `created` field in the new run record is the date and time at which the clone was created (not the time that the original run was created.)\n        *\n        * The original run remains only [in the database](../../../run_persistence/#runs-in-db).\n        *\n        * @example\n        * var sa = new F.service.State();\n        * sa.clone({runId: '1842bb5c-83ad-4ba8-a955-bd13cc2fdb4f', stopBefore: 'calculateScore', exclude: ['interimCalculation'] });\n        *  \n        * @param {object} params\n        * @param {string} params.runId The id of the run to clone from memory.\n        * @param {string} [params.stopBefore] The newly cloned run is advanced only up to the first occurrence of this method.\n        * @param {string[]} [params.exclude] Array of methods to exclude when advancing the newly cloned run.\n        * @param {object} [options] Overrides for configuration options.\n        * @return {Promise}\n        */\n        clone: function (params, options) {\n            var runId = parseRunIdOrError(params);\n\n            var replayOptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + runId }\n            );\n\n            params = $.extend(true, { action: 'clone' }, pick(params, ['stopBefore', 'exclude']));\n\n            return http.post(params, replayOptions);\n        },\n\n        //Specific to Vensim, only used within the interface builder for now\n        cloneForSensitivity: function (runId, options) {\n            const params = {\n                modelContext: {\n                    restorations: {\n                        assembly: [{\n                            replay: {\n                                operations: [{\n                                    operationType: 'stop_before',\n                                    targetType: 'execute',\n                                    targetKey: 'stepTo'\n                                }]\n                            }\n                        }]\n                    }\n                },\n                executionContext: {\n                    tool: {\n                        vensim: {\n                            sensitivityMode: true\n                        }\n                    }\n                }\n            };\n            var httpoptions = $.extend(true, {},\n                serviceOptions,\n                options,\n                { url: urlConfig.getAPIPath(apiEndpoint) + 'clone/' + runId }\n            );\n            return http.post(params, httpoptions);\n        }\n    };\n\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/state-api-adapter/index.js","import ConfigService from 'service/configuration-service';\nimport TransportFactory from 'transport/http-transport-factory';\nconst apiEndpoint = 'time';\n\n/**\n *  Service to get current server time, to avoid relying on unreliable client-reported times.\n */\nexport default class TimeAPIService {\n    constructor(config) {\n        this.serviceOptions = $.extend(true, {}, config);\n\n        const urlConfig = new ConfigService(this.serviceOptions).get('server');\n        const transportOptions = $.extend(true, {}, this.serviceOptions.transport, {\n            url: urlConfig.getAPIPath(apiEndpoint)\n        });\n        this.http = new TransportFactory(transportOptions);\n    }\n    \n    /**\n     * Get current server time\n     *  @returns {Promise<Date>}\n     */\n    getTime() {\n        return this.http.get().then(function (t) {\n            return new Date(t);\n        }).catch(function (e) {\n            //EPICENTER-3516 wrong response-type\n            if (e.responseText) {\n                return new Date(e.responseText);\n            }\n            throw e;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/time-api-service/index.js","import $ from 'jquery';\nimport { intersection } from 'util/array-utils';\n/**\n * @typedef Publishable\n * @property {string} name\n * @property {*} value\n */\n\n/**\n  * @typedef Subscription\n  * @prop {string} id\n  * @prop {Function} callback\n  * @prop {string[]} topics\n  */\n\n/**\n * @param {object} obj\n * @return {Publishable[]}\n */\nexport function objectToPublishable(obj) {\n    var mapped = Object.keys(obj || {}).map(function (t) {\n        return { name: t, value: obj[t] };\n    });\n    return mapped;\n}\n\n/**\n * Converts arrays of the form [{ name: '', value: ''}] to {[name]: value}\n * @param {Publishable[]} arr\n * @param {object} [mergeWith]\n * @returns {object}\n */\nexport function publishableToObject(arr, mergeWith) {\n    var result = (arr || []).reduce(function (accum, topic) {\n        accum[topic.name] = topic.value;\n        return accum;\n    }, $.extend(true, {}, mergeWith));\n    return result;\n}\n\n/**\n * @typedef NormalizedParam\n * @property {Publishable[]} params\n * @property {Object} options\n */\n\n/**\n *\n * @param {String|Object|array} topic \n * @param {*} publishValue \n * @param {Object} [options]\n * @return {NormalizedParam}\n */\nexport function normalizeParamOptions(topic, publishValue, options) {\n    if (!topic) {\n        return { params: [], options: {} };\n    }\n    if ($.isPlainObject(topic)) {\n        return { params: objectToPublishable(topic), options: publishValue };\n    }\n    if (Array.isArray(topic)) {\n        return { params: topic, options: publishValue };\n    }\n    return { params: [{ name: topic, value: publishValue }], options: options };\n}\n\nlet i = 0;\nfunction uniqueId(prefix) {\n    i++;\n    return `${prefix || ''}${i}`;\n}\n\n\n/**\n * \n * @param {String[]|String} topics \n * @param {Function} callback \n * @param {Object} options\n * @return {Subscription}\n */\nfunction makeSubs(topics, callback, options) {\n    var id = uniqueId('subs-');\n    var defaults = {\n        batch: false,\n    };\n    var opts = $.extend({}, defaults, options);\n    if (!callback) {\n        throw new Error('subscribe callback should be a function');\n    }\n    return $.extend(true, {\n        id: id,\n        topics: [].concat(topics).map((t)=> t.toLowerCase()),\n        callback: callback,\n    }, opts);\n}\n\n/**\n* @param {Publishable[]} topics\n* @param {Subscription} subscription \n*/\nfunction checkAndNotifyBatch(topics, subscription) {\n    var merged = $.extend(true, {}, publishableToObject(topics));\n    var keys = Object.keys(merged).map((k)=> k.toLowerCase());\n    var matchingTopics = intersection(keys, subscription.topics);\n    if (matchingTopics.length > 0) {\n        var toSend = subscription.topics.reduce(function (accum, topic) {\n            accum[topic] = merged[topic];\n            return accum;\n        }, {});\n\n        if (matchingTopics.length === subscription.topics.length) {\n            subscription.callback(toSend);\n        }\n    }\n}\n\n\n/**\n * @param {Publishable[]} topics\n * @param {Subscription} subscription \n */\nfunction checkAndNotify(topics, subscription) {\n    topics.forEach(function (topic) {\n        if (subscription.topics.indexOf(topic.name.toLowerCase()) !== -1 || subscription.topics.indexOf('*') !== -1) { \n            subscription.callback(topic.value);\n        }\n    });\n}\n\n\nclass PubSub {\n    /**\n     * @param {{validTopics: string[]}} [options] \n     */\n    constructor(options) {\n        const defaults = {\n            validTopics: []\n        };\n        this.options = $.extend({}, defaults, options);\n        this.subscriptions = [];\n    }\n\n    /**\n     * @param {String | Publishable } topic\n     * @param {any} [value] item to publish\n     * @param {Object} [options]\n     * @return {Promise}\n     */\n    publish(topic, value, options) {\n        var normalized = normalizeParamOptions(topic, value, options);\n        // console.log('notify', normalized.params);\n        return this.subscriptions.forEach(function (subs) {\n            var fn = subs.batch ? checkAndNotifyBatch : checkAndNotify;\n            fn(normalized.params, subs);\n        });\n    }\n\n    /**\n     * @param {String[] | String} topics\n     * @param {Function} cb\n     * @param {Object} [options]\n     * @return {String}\n     */\n    subscribe(topics, cb, options) {\n        topics = [].concat(topics);\n        const knownTopics = this.options.validTopics; \n        const areAllValid = knownTopics.length === 0 || intersection(topics, knownTopics).length === topics.length;\n        if (!areAllValid) {\n            console.error('Uknown topics - ', topics, '. Only known topics are', knownTopics);\n            throw new Error('INVALID_TOPICS');\n        }\n        var subs = makeSubs(topics, cb, options);\n        this.subscriptions = this.subscriptions.concat(subs);\n        return subs.id;\n    }\n        \n\n    /**\n     * @param {String} token\n     */\n    unsubscribe(token) {\n        var olderLength = this.subscriptions.length;\n        if (!olderLength) {\n            throw new Error('No subscriptions found to unsubscribe from');\n        }\n    \n        var remaining = this.subscriptions.filter(function (subs) {\n            return subs.id !== token;\n        });\n        if (remaining.length === olderLength) {\n            throw new Error('No subscription found for token ' + token);\n        }\n        this.subscriptions = remaining;\n    }\n    unsubscribeAll() {\n        this.subscriptions = [];\n    }\n}\n\nexport default PubSub;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/pubsub/index.js","/**\n * \n * @param {array} a \n * @param {array} b \n * @returns {array}\n */\nexport function intersection(a, b) {\n    var t;\n    if (b.length > a.length) {\n        t = b;\n        b = a;\n        a = t; \n    }// indexOf to loop over shorter\n    return a.filter(function (e) {\n        return b.indexOf(e) > -1;\n    });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/util/array-utils.js","import { ACTIONS } from '../timer-constants';\n\nexport default function reduceActions(actions, options) {\n    const defaults = $.extend({\n        condition: ()=> true\n    }, options);\n\n    const initialState = {\n        startTime: 0, \n        startedUsers: [],\n    };\n    const reduced = actions.reduce(function (accum, action) {\n        if (action.type !== ACTIONS.START || accum.startTime) {\n            return accum;\n        }\n        const ts = +(new Date(action.time));\n        const user = action.user;\n        const isUserAlreadyCounted = !!(accum.startedUsers.find((u)=> u.userName === user.userName));\n        if (!isUserAlreadyCounted) {\n            accum.startedUsers.push(user);\n        }\n        const areUserRequirementsMet = defaults.condition([].concat(accum.startedUsers));\n        if (areUserRequirementsMet) {\n            accum.startTime = ts;\n        }\n        return accum;\n    }, initialState);\n\n    return reduced.startTime;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/start-time-strategies/start-when-user-condition.js","import ConsensusService from './consensus-service.js';\nimport TransportFactory from 'transport/http-transport-factory';\n\nimport { getDefaultOptions, getURLConfig } from 'service/service-utils.js';\n\nconst API_ENDPOINT = 'multiplayer/consensus';\n\n/**\n * @description\n * ## Consensus Group Service\n *\n * The Consensus Group Service provides a way to group different consensus points within your world. This is typically used in faculty pages to report progression throw different Consensus Points.\n * \n *      var cg = new F.service.ConsensusGroup({\n *          worldId: world.id,\n *          name: 'rounds'\n *      });\n *      cg.consensus('round1').create(..);\n *\n * You can use the Consensus Service (`F.service.Consensus`) without using the ConsensusGroup (`F.service.ConsensusGroup`) - the Consensus Service uses a group called \"default\" by default.\n * \n *  @param {ServiceOptions} config\n *  @property {string} worldId Id of world this consensus service is a part of\n *  @property {string} [name] Unique identifier for this consensus group. Defaults to being named 'default'\n */\nexport default function ConsensusGroupService(config) {\n    const defaults = {\n        worldId: '',\n        name: 'default',\n        token: undefined,\n    };\n\n    const serviceOptions = getDefaultOptions(defaults, config);\n    const urlConfig = getURLConfig(serviceOptions);\n\n    const http = new TransportFactory(serviceOptions.transport);\n\n    function getHTTPOptions(options) {\n        const mergedOptions = $.extend(true, {}, serviceOptions, options);\n        if (!mergedOptions.worldId) {\n            throw new Error('ConsensusGroup Service: worldId is required');\n        }        \n        const baseURL = urlConfig.getAPIPath(API_ENDPOINT);\n        const url = baseURL + [mergedOptions.worldId, mergedOptions.name].join('/');\n\n        const httpOptions = $.extend(true, {}, mergedOptions, { url: url });\n        return httpOptions;\n    }\n    const publicAPI = {\n        /**\n         * List all consensus points within this group\n         * \n         * @param {object} outputModifier Currently unused, may be used for paging etc later\n         * @param {object} [options] Overrides for serviceoptions\n         * @returns {Promise}\n         */\n        list: function (outputModifier, options) {\n            const httpOptions = getHTTPOptions(options);\n            return http.get(outputModifier, httpOptions);         \n        },\n\n        /**\n         * Deletes all consensus points within this group\n         * \n         * @param {object} [options] Overrides for serviceoptions\n         * @returns {Promise}\n         */\n        delete: function (options) {\n            const httpOptions = getHTTPOptions(options);\n            return http.delete({}, httpOptions);        \n        },\n\n        /**\n         * Helper to return a Consensus instance \n         * \n         * @param {string} [name] Returns a new instance of a consensus service. Note it is not created until you call `create` on the returned service.\n         * @param {object} [options] Overrides for serviceoptions\n         * @returns {ConsensusService}\n         */\n        consensus: function (name, options) {\n            const opts = $.extend({}, true, serviceOptions, options);\n            const cs = new ConsensusService($.extend(true, opts, {\n                consensusGroup: opts.name,\n                name: name,\n            }));\n            return cs;\n        }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/consensus-api-service/consensus-group-service.js","/**\n * ### Working with Run Strategies\n *\n * You can access a list of available strategies using `F.manager.RunManager.strategies.list`. You can also ask for a particular strategy by name.\n *\n * If you decide to [create your own run strategy](#create-your-own), you can register your strategy. Registering your strategy means that:\n *\n * * You can pass the strategy by name to a Run Manager (as opposed to passing the strategy function): `new F.manager.RunManager({ strategy: 'mynewname'})`.\n * * You can pass configuration options to your strategy.\n * * You can specify whether or not your strategy requires authorization (a valid user session) to work.\n */\n\nimport conditionalCreation from './conditional-creation-strategy';\nimport newIfInitialized from './deprecated/new-if-initialized-strategy';\nimport newIfPersisted from './deprecated/new-if-persisted-strategy';\n\nimport identity from './none-strategy';\nimport multiplayer from './multiplayer-strategy';\nimport reuseNever from './reuse-never';\nimport reusePerSession from './reuse-per-session';\nimport reuseAcrossSessions from './reuse-across-sessions';\nimport reuseLastInitialized from './reuse-last-initialized';\nimport reuseByTrackingKey from './reuse-by-tracking-key';\nimport multiplayerWithTrackingKey from './multiplayer-with-tracking-key';\n\nimport useSpecificRun from './use-specific-run-strategy';\n\nexport const strategyKeys = {\n    REUSE_NEVER: 'reuse-never',\n    REUSE_PER_SESSION: 'reuse-per-session',\n    REUSE_ACROSS_SESSIONS: 'reuse-across-sessions',\n    REUSE_LAST_INITIALIZED: 'reuse-last-initialized',\n\n    REUSE_BY_TRACKINGKEY: 'reuse-by-tracking-key',\n    REUSE_BY_TRACKINGKEY_MULTIPLAYER: 'reuse-by-tracking-key-multiplayer',\n\n    USE_SPECIFIC_RUN: 'use-specific-run',\n\n    MULTIPLAYER: 'multiplayer',\n    NONE: 'none'\n};\n\nvar list = {\n    'conditional-creation': conditionalCreation,\n    'new-if-initialized': newIfInitialized,\n    'new-if-persisted': newIfPersisted,\n\n    [strategyKeys.NONE]: identity,\n    [strategyKeys.MULTIPLAYER]: multiplayer,\n    [strategyKeys.USE_SPECIFIC_RUN]: useSpecificRun,\n    [strategyKeys.REUSE_NEVER]: reuseNever,\n    [strategyKeys.REUSE_PER_SESSION]: reusePerSession,\n    [strategyKeys.REUSE_ACROSS_SESSIONS]: reuseAcrossSessions,\n    [strategyKeys.REUSE_LAST_INITIALIZED]: reuseLastInitialized,\n    [strategyKeys.REUSE_BY_TRACKINGKEY]: reuseByTrackingKey,\n    [strategyKeys.REUSE_BY_TRACKINGKEY_MULTIPLAYER]: multiplayerWithTrackingKey,\n};\n\n//Add back older aliases\nlist['always-new'] = list['reuse-never'];\nlist['new-if-missing'] = list['reuse-per-session'];\nlist['persistent-single-player'] = list['reuse-across-sessions'];\n\nconst strategyManager = {\n    /**\n     * List of available strategies. Within this object, each key is the strategy name and the associated value is the strategy constructor.\n     * @type {Object} \n     */\n    list: list,\n\n    /**\n     * Gets strategy by name.\n     *\n     * @example\n     *      var reuseStrat = F.manager.RunManager.strategies.byName('reuse-across-sessions');\n     *      // shows strategy function\n     *      console.log('reuseStrat = ', reuseStrat);\n     *      // create a new run manager using this strategy\n     *      var rm = new F.manager.RunManager({strategy: reuseStrat, run: { model: 'model.vmf'} });\n     *\n     * \n     * @param  {String} strategyName Name of strategy to get.\n     * @return {Function} Strategy function.\n     */\n    byName: function (strategyName) {\n        return list[strategyName];\n    },\n\n    getBestStrategy: function (options) {\n        var strategy = options.strategy;\n        if (!strategy) {\n            if (options.strategyOptions && options.strategyOptions.initOperation) {\n                strategy = 'reuse-last-initialized';\n            } else {\n                strategy = 'reuse-per-session';\n            }\n        }\n\n        if (strategy.getRun) {\n            return strategy;\n        }\n        var StrategyCtor = typeof strategy === 'function' ? strategy : strategyManager.byName(strategy);\n        if (!StrategyCtor) {\n            throw new Error('Specified run creation strategy was invalid:' + strategy);\n        }\n\n        var strategyInstance = new StrategyCtor(options);\n        if (!strategyInstance.getRun || !strategyInstance.reset) {\n            throw new Error('All strategies should implement a `getRun` and `reset` interface' + options.strategy);\n        }\n        strategyInstance.requiresAuth = StrategyCtor.requiresAuth;\n        strategyInstance.allowRunIDCache = StrategyCtor.allowRunIDCache;\n\n        return strategyInstance;\n    },\n\n    /**\n     * Adds a new strategy.\n     *\n     * @example\n     * // this \"favorite run\" strategy always returns the same run, no matter what\n     * // (not a useful strategy, except as an example)\n     * F.manager.RunManager.strategies.register('favRun', function() { \n     *  return { \n     *      getRun: function() { return '0000015a4cd1700209cd0a7d207f44bac289'; },\n     *      reset: function() { return '0000015a4cd1700209cd0a7d207f44bac289'; } \n     *  }}, { requiresAuth: true });\n     * var rm = new F.manager.RunManager({strategy: 'favRun', run: { model: 'model.vmf'} });\n     *\n     * \n     * @param  {String} name Name for strategy. This string can then be passed to a Run Manager as `new F.manager.RunManager({ strategy: 'mynewname'})`.\n     * @param  {Function} strategy The strategy constructor. Will be called with `new` on Run Manager initialization.\n     * @param  {Object} options  Options for strategy.\n     * @param  {Boolean} options.requiresAuth Specify if the strategy requires a valid user session to work.\n     */\n    register: function (name, strategy, options) {\n        strategy.options = options;\n        list[name] = strategy;\n    }\n};\n\nexport default strategyManager;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/index.js","import WorldApiAdapter from 'service/world-api-adapter';\nimport { rejectPromise } from 'util/index';\nimport { omit } from 'util/object-util';\n\nfunction worldFromRun(runService) {\n    const config = omit(runService.getCurrentConfig(), ['filter', 'id']);\n    const worldService = new WorldApiAdapter(config);\n    return worldService;\n}\n\nexport function reset(runService, session, options) {\n    const { userId, groupName } = session;\n    const optionsToPassOn = omit($.extend(true, {}, options, {\n        success: $.noop,\n    }), ['filter', 'id']);\n    const worldApi = worldFromRun(runService);\n    return worldApi\n        .getCurrentWorldForUser(userId, groupName)\n        .then((world)=> {\n            return worldApi.newRunForWorld(world.id, optionsToPassOn).then(function (runid) {\n                return runService.load(runid);\n            }).then((run)=> {\n                run.freshlyCreated = true;\n                run.world = world;\n                return run;\n            });\n        });\n}\nexport function getCurrentWorld(runService, session) {\n    const { userId, groupName } = session;\n    const worldApi = worldFromRun(runService);\n    return worldApi\n        .getCurrentWorldForUser(userId, groupName);\n}\n\nexport function getRun(runService, session, options) {\n    const { userId } = session;\n    const worldApi = worldFromRun(runService);\n    const model = runService.getCurrentConfig().model;\n\n    if (!userId) {\n        return rejectPromise('UNAUTHORIZED', 'We need an authenticated user to join a multiplayer world. (ERR: no userId in session)');\n    }\n\n    function loadRunFromWorld(world) {\n        if (!world) {\n            return rejectPromise('NO_WORLD_FOR_USER', `User ${userId} is not part of a world`);\n        }\n        const createOptions = $.extend(true, {}, options, { model: model, filter: world.id, id: world.id });\n        return worldApi.getCurrentRunId(createOptions)\n            .then(function (id, status, xhr) {\n                return runService.load(id).then((run)=> {\n                    const RUN_CREATION_STATUS = 201;\n                    run.freshlyCreated = xhr.status === RUN_CREATION_STATUS;\n                    return run;\n                });\n            })\n            .then(function (run) {\n                run.world = world;\n                return run;\n            });\n    }\n\n    return getCurrentWorld(runService, session)\n        .then(loadRunFromWorld);\n}\n/**\n * The `multiplayer` strategy is for use with [multiplayer worlds](../../../glossary/#world). It checks the current world for this end user, and always returns the current run for that world. This is equivalent to calling `getCurrentWorldForUser()` and then `getCurrentRunId()` from the [World API Adapater](../world-api-adapter/). If you use the [World Manager](../world-manager/), you are automatically using this strategy.\n * \n * Using this strategy means that end users in projects with multiplayer worlds always see the most current world and run. This ensures that they are in sync with the other end users sharing their world and run. In turn, this allows for competitive or collaborative multiplayer projects.\n */\nexport default class MultiplayerStrategy {\n    reset(runService, session, options) {\n        return reset(runService, session, options);\n    }\n\n    getRun(runService, session, options) {\n        return getRun(runService, session, options);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/multiplayer-strategy.js","import { injectFiltersFromSession, injectScopeFromSession } from 'managers/run-strategies/strategy-utils';\n\n/**\n * The `reuse-last-initialized` strategy looks for the most recent run that matches particular criteria; if it cannot find one, it creates a new run and immediately executes a set of \"initialization\" operations.\n *\n * This strategy is useful if you have a time-based model and always want the run you're operating on to start at a particular step. For example:\n *\n *  ```\n *  const rm = new F.manager.RunManager({\n *      strategy: 'reuse-last-initialized',\n *      strategyOptions: {\n *          initOperation: [{ step: 10 }]\n *      }\n *  });\n *  ```\n * This strategy is also useful if you have a custom initialization function in your model, and want to make sure it's always executed for new runs.\n *\n * Specifically, the strategy is:\n *\n * * Look for the most recent run that matches the (optional) `flag` criteria\n * * If there are no runs that match the `flag` criteria, create a new run. Immediately \"initialize\" this new run by:\n *     *  Calling the model operation(s) specified in the `initOperation` array.\n *     *  Optionally, setting a `flag` in the run.\n *\n */\nexport default class ReuseLastInitializedStrategy {\n    /**\n     *\n     * @param {object} [options]\n     * @property {object[]} [options.initOperation] Operations to execute in the model for initialization to be considered complete. Can be in any of the formats [Run Service's `serial()`](../run-api-service/#serial) supports.\n     * @property {object} [options.flag] Flag to set in run after initialization operations are run. You typically would not override this unless you needed to set additional properties as well.\n     * @property {object} [options.scope]\n     * @property {boolean} [options.scope.scopeByUser]  If true, only returns the last run for the user in session. Defaults to true.\n     * @property {boolean} [options.scope.scopeByGroup] If true, only returns the last run for the group in session. Defaults to true.\n     */\n    constructor(options) {\n        const defaults = {\n            initOperation: [],\n            flag: null,\n            scope: {\n                scopeByUser: true,\n                scopeByGroup: true,\n            }\n        };\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = $.extend(true, {}, defaults, strategyOptions);\n        if (!this.options.initOperation || !this.options.initOperation.length) {\n            throw new Error('Specifying an init function is required for this strategy');\n        }\n        if (!this.options.flag) {\n            this.options.flag = {\n                isInitComplete: true\n            };\n        }\n    }\n\n    reset(runService, userSession, options) {\n        const opt = injectScopeFromSession(runService.getCurrentConfig(), userSession);\n        return runService.create(opt, options).then((createResponse)=> {\n            return runService.serial([].concat(this.options.initOperation)).then(()=> createResponse);\n        }).then((createResponse)=> {\n            return runService.save(this.options.flag).then((patchResponse)=> {\n                return $.extend(true, {}, createResponse, patchResponse);\n            });\n        });\n    }\n\n    getRun(runService, userSession, runSession, options) {\n        const sessionFilter = injectFiltersFromSession(this.options.flag, userSession, this.options.scope);\n        const runopts = runService.getCurrentConfig();\n        const filter = $.extend(true, { trashed: false }, sessionFilter, { model: runopts.model });\n        return runService.query(filter, {\n            startrecord: 0,\n            endrecord: 0,\n            sort: 'created',\n            direction: 'desc'\n        }).then((runs)=> {\n            const latestActiveRun = (runs || []).find((run)=> !run.trashed);\n            if (!runs.length || !latestActiveRun) {\n                // If no runs exist or the most recent run is trashed, create a new run\n                return this.reset(runService, userSession, options);\n            }\n            return latestActiveRun;\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/reuse-last-initialized.js","import RunService from 'service/run-api-service';\nimport { parseContentRange } from 'util/run-util';\nimport { injectScopeFromSession, injectFiltersFromSession } from './strategy-utils';\nimport { result, makePromise, rejectPromise, resolvePromise } from 'util/index';\n\nconst errors = {\n    RUN_LIMIT_REACHED: 'RUN_LIMIT_REACHED',\n    NO_TRACKING_KEY: 'NO_TRACKING_KEY'\n};\n\n/**\n * @param {string} trackingKey\n * @param {object} userSession\n * @param {object} metaFilter Additional criteria to filter by\n * @returns {object}\n */\nfunction makeFilter(trackingKey, userSession, metaFilter) {\n    const runFilter = $.extend(true, {\n        scope: {\n            trackingKey: trackingKey\n        }\n    }, metaFilter);\n    const filter = injectFiltersFromSession(runFilter, userSession);\n    return filter;\n}\n\n/**\n * @param {RunService} runService\n * @param {object} filter\n * @returns {Promise<object[]>}\n */\nfunction getRunsForFilter(runService, filter) {\n    return runService.query(filter, {\n        startRecord: 0,\n        endRecord: 0,\n        sort: 'created',\n        direction: 'desc'\n    });\n}\n\nfunction addSettingsToRun(run, settings) {\n    return $.extend(true, {}, run, { settings: settings });\n}\n/**\n * The `reuse-by-tracking-key` strategy creates or returns the most recent run matching a given tracking key. You can optionally  also provide a \"Run limit\", and it'll prevent new runs from being created with this strategy once that limit has  been reached.\n *\n * ```\n *  const rm = new F.manager.RunManager({\n *      strategy: 'reuse-by-tracking-key',\n *      strategyOptions: {\n *          settings: {\n *              trackingKey: 'foobar'\n *          }\n *      }\n *  });\n *  ```\n *  Any runs created with this strategy will have a 'settings' field which returns the current settings for that run (when retreived with `getRun` or `reset`)\n *\n * This strategy is used by the Settings Manager to apply class settings for turn-by-turn simulations, but can also be used stand-alone.\n *\n */\nclass ReuseWithTrackingKeyStrategy {\n    /**\n     * @param {object} [options]\n     * @property {object|function():object|function():Promise<object>} settings An object with trackingKey, runlimit, and any other key values; will be passed to `onCreate` function if provided\n     * @property {string} settings.trackingKey Key to track runs with\n     * @property {string} [settings.runLimit] Attempts to create new runs once limit is reach will return a `RUN_LIMIT_REACHED` error\n     * @property {object} [settings.filter] Criteria to filter runs by, in addition to matching by tracking key (and user/group). Defaults to trashed: false\n     * @property {function(RunService, object):any} [onCreate] Callback will be called each time a new run is created\n     */\n    constructor(options) {\n        const defaults = {\n            settings: {\n                trackingKey: null,\n                runLimit: Infinity,\n            },\n            filter: {\n                trashed: false\n            },\n            onCreate: (runService, settings, run)=> run\n        };\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = $.extend(true, {}, defaults, strategyOptions);\n    }\n\n    getSettings(runService, userSession) {\n        const settings = result(this.options.settings, runService, userSession);\n        const prom = makePromise(settings).then((settings)=> {\n            const key = settings && settings.trackingKey;\n            if (!key) {\n                return rejectPromise(errors.NO_TRACKING_KEY, 'No tracking key provided to reuse-by-tracking-key strategy');\n            }\n            return settings;\n        });\n        return prom;\n    }\n\n    forceCreateRun(runService, userSession, settings, runCreateOptions) {\n        const runConfig = runService.getCurrentConfig();\n        const trackingKey = settings && settings.trackingKey;\n\n        const createOptions = injectScopeFromSession(runConfig, userSession);\n        const opt = $.extend(true, createOptions, {\n            scope: {\n                trackingKey: trackingKey,\n            }\n        }, runCreateOptions);\n        return runService.create(opt).then((run)=> {\n            const applied = this.options.onCreate(runService, settings, run);\n            return makePromise(applied).then((res)=> {\n                return res && res.id ? res : run;\n            }).then((run)=> {\n                return addSettingsToRun(run, settings);\n            });\n        });\n    }\n\n    checkIfWithinRunLimit(runService, userSession, settings) {\n        const noRunLimit = settings.runLimit === Infinity || `${settings.runLimit}`.trim() === '';\n        if (noRunLimit) {\n            return resolvePromise(settings);\n        }\n        const runFilter = makeFilter(settings.trackingKey, userSession, this.options.filter);\n        return getRunsForFilter(runService, runFilter).then((runs, status, xhr)=> {\n            const startedRuns = parseContentRange(xhr.getResponseHeader('content-range'));\n            const runLimit = noRunLimit ? Infinity : +settings.runLimit;\n            if (startedRuns && startedRuns.total >= runLimit) {\n                return rejectPromise(errors.RUN_LIMIT_REACHED, 'You have reached your run limit and cannot create new runs.');\n            }\n            return settings;\n        });\n    }\n\n    reset(runService, userSession, runCreateOptions) {\n        return this.getSettings(runService, userSession).then((settings)=> {\n            return this.checkIfWithinRunLimit(runService, userSession, settings);\n        }).then((settings)=> {\n            return this.forceCreateRun(runService, userSession, settings, runCreateOptions);\n        });\n    }\n\n    getRun(runService, userSession, runSession, runCreateOptions) {\n        return this.getSettings(runService, userSession).then((settings)=> {\n            const runFilter = makeFilter(settings.trackingKey, userSession, this.options.filter);\n            return getRunsForFilter(runService, runFilter).then((runs)=> {\n                if (!runs.length || runs[0].trashed) {\n                    // If no runs exist or the most recent run is trashed, create a new run\n                    return this.forceCreateRun(runService, userSession, settings, runCreateOptions);\n                }\n                return addSettingsToRun(runs[0], settings);\n            });\n        });\n    }\n}\n\nReuseWithTrackingKeyStrategy.errors = errors;\nexport default ReuseWithTrackingKeyStrategy;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/reuse-by-tracking-key.js","import RunService from 'service/run-api-service';\nimport { parseContentRange } from 'util/run-util';\nimport { injectScopeFromSession, injectFiltersFromSession } from './strategy-utils';\nimport { result, makePromise, rejectPromise, resolvePromise } from 'util/index';\n\nimport { reset, getRun, getCurrentWorld } from './multiplayer-strategy';\nimport { omit } from 'util/object-util';\n\nconst errors = {\n    RUN_LIMIT_REACHED: 'RUN_LIMIT_REACHED',\n    NO_TRACKING_KEY: 'NO_TRACKING_KEY',\n};\n\n/**\n * @param {string} trackingKey \n * @param {string} worldId \n * @param {object} userSession \n * @param {object} metaFilter Additional criteria to filter by \n * @returns {object}\n */\nfunction makeFilter(trackingKey, worldId, userSession, metaFilter) {\n    const runFilter = $.extend(true, {\n        scope: {\n            trackingKey: trackingKey,\n            worldId: worldId,\n        }\n    }, metaFilter);\n    const filter = injectFiltersFromSession(runFilter, userSession, { scopeByUser: false });\n    return filter;\n}\n\n/**\n * @param {RunService} runService \n * @param {object} filter \n * @returns {Promise<object[]>}\n */\nfunction getRunsForFilter(runService, filter) {\n    return runService.query(filter, {\n        startRecord: 0,\n        endRecord: 0,\n        sort: 'created', \n        direction: 'desc'\n    });\n}\n\n/**\n * The `reuse-by-tracking-key-multiplayer` strategy creates or returns the most recent multiplayer run matching a given tracking key. You can optionally  also provide a \"Run limit\", and it'll prevent new runs from being created with this strategy once that limit has  been reached.\n *\n * ```\n *  const rm = new F.manager.RunManager({\n *      strategy: 'reuse-by-tracking-key-multiplayer',\n *      strategyOptions: {\n *          settings: {\n *              trackingKey: 'foobar'\n *          }\n *      }\n *  });\n *  ```\n *  Any runs created with this strategy will have a 'settings' field which returns the current settings for that run (when retreived with `getRun` or `reset`)\n * \n * This strategy is used by the Settings Manager to apply class settings for turn-by-turn simulations, but can also be used stand-alone.\n *\n */\nclass MultiplayerWithTrackingKeyStrategy {\n    /**\n     * @param {object} [options] \n     * @property {object|function():object|function():Promise<object>} settings An object with trackingKey, runlimit, and any other key values; will be passed to `onCreate` function if provided\n     * @property {string} settings.trackingKey Key to track runs with\n     * @property {string} [settings.runLimit] Attempts to create new runs once limit is reach will return a `RUN_LIMIT_REACHED` error\n     * @property {object} [settings.filter] Criteria to filter runs by, in addition to matching by tracking key (and user/group). Defaults to trashed: false\n     * @property {function(RunService, object):any} [onCreate] Callback will be called each time a new run is created\n     */\n    constructor(options) {\n        const defaults = {\n            settings: {\n                trackingKey: null,\n                runLimit: Infinity,\n            },\n            filter: {\n                trashed: false\n            },\n            onCreate: (runService, settings, run)=> run\n        };\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = $.extend(true, {}, defaults, strategyOptions);\n    }\n\n    getSettings(runService, userSession) {\n        const settings = result(this.options.settings, runService, userSession);\n        const prom = makePromise(settings).then((settings)=> {\n            const key = settings && settings.trackingKey;\n            if (!key) {\n                return rejectPromise(errors.NO_TRACKING_KEY, 'No tracking key provided to reuse-by-tracking-key strategy');\n            }\n            return settings;\n        });\n        return prom;\n    }\n\n    _applySettingsToNewRun(runService, settings, run) {\n        let prom = resolvePromise(run);\n\n        if (!run.scope || run.scope.trackingKey !== settings.trackingKey) {\n            prom = runService.save({\n                scope: {\n                    trackingKey: settings.trackingKey\n                }\n            });\n        }\n        return prom.then(()=> {\n            const applied = this.options.onCreate(runService, settings, run);\n            return makePromise(applied).then((res)=> {\n                return res && res.id ? res : run; \n            }).then((run)=> {\n                return $.extend(true, {}, run, { settings: settings });\n            });\n        });\n    }\n    _forceCreateRun(runService, userSession, settings, runCreateOptions) {\n        const runConfig = omit(runService.getCurrentConfig(), ['id', 'filter']);\n        const trackingKey = settings && settings.trackingKey;\n\n        const scopeConfig = injectScopeFromSession(runConfig, userSession);\n        const opt = $.extend(true, scopeConfig, {\n            scope: { \n                trackingKey: trackingKey,\n            }\n        }, runCreateOptions);\n\n        return reset(runService, userSession, opt).then((run)=> {\n            return this._applySettingsToNewRun(runService, settings, run);\n        });\n    }\n\n    checkIfWithinRunLimit(runService, userSession, settings) {\n        const noRunLimit = settings.runLimit === Infinity || `${settings.runLimit}`.trim() === '';\n        if (noRunLimit) {\n            return $.Deferred().resolve(settings).promise();\n        }\n        return getCurrentWorld(runService, userSession).then((world)=> {\n            const runFilter = makeFilter(settings.trackingKey, world.id, userSession, this.options.filter);\n            return getRunsForFilter(runService, runFilter).then((runs, status, xhr)=> {\n                const startedRuns = parseContentRange(xhr.getResponseHeader('content-range'));\n                const runLimit = noRunLimit ? Infinity : +settings.runLimit;\n                if (startedRuns && startedRuns.total >= runLimit) {\n                    return rejectPromise(errors.RUN_LIMIT_REACHED, 'You have reached your run limit and cannot create new runs.');\n                }\n                return settings;\n            });\n        });\n    }\n\n    reset(runService, userSession, runCreateOptions) {\n        return this.getSettings(runService, userSession).then((settings)=> {\n            return this.checkIfWithinRunLimit(runService, userSession, settings);\n        }).then((settings)=> {\n            return this._forceCreateRun(runService, userSession, settings, runCreateOptions);\n        });\n    }\n\n    getRun(runService, userSession, runSession, runCreateOptions) {\n        return this.getSettings(runService, userSession).then((settings)=> {\n            const { trackingKey } = settings; \n            const opt = $.extend(true, runCreateOptions, {\n                scope: { \n                    trackingKey: trackingKey,\n                }\n            });\n            return getRun(runService, userSession, opt).then((run)=> {\n                if (run.freshlyCreated) {\n                    return this._applySettingsToNewRun(runService, settings, run);\n                }\n                \n                if (!run.scope || run.scope.trackingKey !== trackingKey) {\n                    console.warn('Existing run has older settings. Reset to apply new settings');\n                }\n                return run;\n            });\n        });\n    }\n}\n\nMultiplayerWithTrackingKeyStrategy.errors = errors;\nexport default MultiplayerWithTrackingKeyStrategy;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/multiplayer-with-tracking-key.js","import WorldApi from 'service/world-api-adapter';\nimport RunManager from 'managers/run-manager';\nimport AuthManager from 'managers/auth-manager';\n\nvar worldApi;\nfunction buildStrategy(worldId) {\n    return function Ctor(options) {\n        this.options = options;\n\n        $.extend(this, {\n            reset: function () {\n                throw new Error('not implemented. Need api changes');\n            },\n            getRun: function (runService) {\n                // Model is required in the options\n                var model = this.options.run.model || this.options.model;\n                return worldApi.getCurrentRunId({ model: model, filter: worldId })\n                    .then(function (runId) {\n                        return runService.load(runId);\n                    });\n            }\n        });\n    };\n}\n\n\n/**\n * @param {AccountAPIServiceOptions} options \n * @property {string} [group] The group name to use for filters / new runs\n * @property {object} run Options to use when creating new runs with the manager, e.g. `run: { files: ['data.xls'] }`. See RunService for details.\n * @property {string} run.model The name of the primary model file for this project. \n */\nexport default function WorldManager(options) {\n    this.options = options || { run: {}, world: {} };\n\n    $.extend(true, this.options, this.options.run);\n    $.extend(true, this.options, this.options.world);\n\n    worldApi = new WorldApi(this.options);\n    this._auth = new AuthManager();\n    var me = this;\n\n    var api = {\n\n        /**\n        * Returns the current world (object) and an instance of the [World API Adapter](../world-api-adapter/).\n        *\n        * @example\n        * wMgr.getCurrentWorld()\n        *     .then(function(world, worldAdapter) {\n        *         console.log(world.id);\n        *         worldAdapter.getCurrentRunId();\n        *     });\n        *\n        * \n        * @param {string} [userId] The id of the user whose world is being accessed. Defaults to the user in the current session.\n        * @param {string} [groupName] The name of the group whose world is being accessed. Defaults to the group for the user in the current session.\n        * @return {Promise}\n        */\n        getCurrentWorld: function (userId, groupName) {\n            var session = this._auth.getCurrentUserSessionInfo();\n            if (!userId) {\n                userId = session.userId;\n            }\n            if (!groupName) {\n                groupName = session.groupName;\n            }\n            return worldApi.getCurrentWorldForUser(userId, groupName);\n        },\n\n        /**\n        * Returns the current run (object) and an instance of the [Run API Service](../run-api-service/).\n        *\n        * @example\n        * wMgr.getCurrentRun('myModel.py')\n        *     .then(function(run, runService) {\n        *         console.log(run.id);\n        *         runService.do('startGame');\n        *     });\n        *\n        * @param {string} [model] The name of the model file. Required if not already passed in as `run.model` when the World Manager is created.\n        * @return {Promise}\n        */\n        getCurrentRun: function (model) {\n            var session = this._auth.getCurrentUserSessionInfo();\n            var curUserId = session.userId;\n            var curGroupName = session.groupName;\n\n            return this.getCurrentWorld(curUserId, curGroupName).then(function getAndRestoreLatestRun(world) {\n                if (!world) {\n                    return $.Deferred().reject({ error: 'The user is not part of any world!' }).promise();\n                }\n                var runOpts = $.extend(true, me.options, { model: model });\n                var strategy = buildStrategy(world.id);\n                var opt = $.extend(true, {}, {\n                    strategy: strategy,\n                    run: runOpts\n                });\n                var rm = new RunManager(opt);\n                return rm.getRun()\n                    .then(function (run) {\n                        run.world = world;\n                        return run;\n                    });\n            });\n        }\n    };\n\n    $.extend(this, api);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/world-manager/index.js","var F = {\n    util: {},\n    factory: {},\n    transport: {},\n    store: {},\n    service: {},\n    manager: {\n        strategy: {}\n    },\n};\n\nF.load = require('./service/url-config-service/env-load');\n\nif (!window.SKIP_ENV_LOAD) {\n    F.load();\n}\n\nF.util.query = require('./util/query-util');\nF.util.run = require('./util/run-util');\nF.util.classFrom = require('./util/inherit');\n\nF.factory.Transport = require('./transport/http-transport-factory').default;\nF.transport.Ajax = require('./transport/ajax-http-transport');\n\nF.service.URL = require('./service/url-config-service');\nF.service.Config = require('./service/configuration-service').default;\nF.service.Run = require('./service/run-api-service').default;\nF.service.File = require('./service/admin-file-service');\nF.service.Variables = require('./service/run-api-service/variables-api-service').default;\nF.service.Data = require('./service/data-api-service').default;\nF.service.Auth = require('./service/auth-api-service').default;\nF.service.World = require('./service/world-api-adapter').default;\nF.service.State = require('./service/state-api-adapter').default;\nF.service.User = require('./service/user-api-adapter').default;\nF.service.Member = require('./service/member-api-adapter').default;\nF.service.Asset = require('./service/asset-api-adapter').default;\nF.service.Group = require('./service/group-api-service').default;\nF.service.Introspect = require('./service/introspection-api-service').default;\nF.service.Presence = require('./service/presence-api-service').default;\nF.service.Time = require('./service/time-api-service').default;\nF.service.Timer = require('./service/timer-service').default;\nF.service.Password = require('./service/password-api-service').default;\n\nF.service.Account = require('./service/account-api-service').default;\n\nF.service.Consensus = require('./service/consensus-api-service/consensus-service').default;\nF.service.ConsensusGroup = require('./service/consensus-api-service/consensus-group-service').default;\n\nF.service.Project = require('./service/project-api-service').default;\n\nF.store.Cookie = require('./store/cookie-store');\nF.factory.Store = require('./store/store-factory');\n\nF.manager.ScenarioManager = require('./managers/scenario-manager').default;\nF.manager.RunManager = require('./managers/run-manager').default;\nF.manager.User = require('./managers/user-manager').default;\nF.manager.AuthManager = require('./managers/auth-manager').default;\n\nF.v3 = { manager: {}, service: {} };\nF.v3.manager.AuthManager = require('./managers/auth-manager-v3').default;\n\nF.manager.WorldManager = require('./managers/world-manager').default;\nF.manager.SavedRunsManager = require('./managers/saved-runs-manager').default;\n\nvar strategies = require('./managers/run-strategies').default;\nF.manager.strategy = strategies.list; //TODO: this is not really a manager so namespace this better\n\nF.manager.Settings = require('./managers/settings-manager').default;\n\nF.manager.ChannelManager = require('./managers/epicenter-channel-manager').default;\nF.service.Channel = require('./service/channel-service').default;\n\nF.manager.ConsensusManager = require('./managers/consensus-manager').default;\n\nif (RELEASE_VERSION) F.version = RELEASE_VERSION; //eslint-disable-line no-undef\nF.api = require('./api-version.json');\n\nF.constants = require('./managers/key-names');\n\nmodule.exports = F;\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","\nvar URLConfigService = require('./index');\n\nvar envLoad = function (callback) {\n    var urlService = new URLConfigService();\n    var infoUrl = urlService.getAPIPath('config');\n    var envPromise = $.ajax({ url: infoUrl, async: false });\n    envPromise = envPromise.then(function (res) {\n        var overrides = res.api;\n        URLConfigService.defaults = $.extend(URLConfigService.defaults, overrides);\n    });\n    return envPromise.then(callback).fail(callback);\n};\n\nmodule.exports = envLoad;\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/url-config-service/env-load.js","'use strict';\n\nvar ConfigService = require('../service/configuration-service').default;\n\nvar urlConfig = new ConfigService().get('server');\nvar customDefaults = {};\nvar libDefaults = {\n    /**\n     * The account id. In the Epicenter UI, this is the **Team ID** (for team projects) or **User ID** (for personal projects). Defaults to empty string. If left undefined, taken from the URL.\n     * @type {String}\n     */\n    account: urlConfig.accountPath || undefined,\n    /**\n     * The account id. In the Epicenter UI, this is the **Team ID** (for team projects) or **User ID** (for personal projects). Defaults to empty string. If left undefined, taken from the URL.\n     * @type {String}\n     */\n    project: urlConfig.projectPath || undefined,\n    isLocal: urlConfig.isLocalhost(),\n    isCustomDomain: urlConfig.isCustomDomain,\n    store: {}\n};\n\nvar optionUtils = {\n    /**\n     * Gets the final options by overriding the global options set with\n     * optionUtils#setDefaults() and the lib defaults.\n     * @param {object} options The final options object.\n     * @return {object} Extended object\n     */\n    getOptions: function (options) {\n        return $.extend(true, {}, libDefaults, customDefaults, options);\n    },\n    /**\n     * Sets the global defaults for the optionUtils#getOptions() method.\n     * @param {object} defaults The defaults object.\n     */\n    setDefaults: function (defaults) {\n        customDefaults = defaults;\n    }\n};\nmodule.exports = optionUtils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/option-utils.js","/**\n * ## File API Service\n *\n * The File API Service allows you to upload and download files directly onto Epicenter, analogous to using the File Manager UI in Epicenter directly or SFTPing files in. It is based on the Epicenter File API.\n *\n *       var fa = new F.service.File({\n *          account: 'acme-simulations',\n *          project: 'supply-chain-game',\n *       });\n *       fa.create('test.txt', 'these are my filecontents');\n *\n *       // alternatively, create a new file using a file uploaded through a file input\n *       // <input id=\"fileupload\" type=\"file\">\n *       //\n *       $('#fileupload').on('change', function (e) {\n *          var file = e.target.files[0];\n *          var data = new FormData();\n *          data.append('file', file, file.name);\n *          fa.create(file.name, data);\n *       });\n */\n\nvar ConfigService = require('service/configuration-service').default;\nvar TransportFactory = require('transport/http-transport-factory').default;\nvar SessionManager = require('store/session-manager');\n\nmodule.exports = function (config) {\n    var defaults = {\n        /**\n         * For projects that require authentication, pass in the user access token (defaults to empty string). If the user is already logged in to Epicenter, the user access token is already set in a cookie and automatically loaded from there. (See [more background on access tokens](../../../project_access/)).\n         * @see [Authentication API Service](../auth/auth-service/) for getting tokens.\n         * @type {String}\n         */\n        token: undefined,\n\n        /**\n         * The account id. In the Epicenter UI, this is the **Team ID** (for team projects) or **User ID** (for personal projects). Defaults to undefined.\n         * @type {String}\n         */\n        account: undefined,\n\n        /**\n         * The project id. Defaults to undefined.\n         * @type {String}\n         */\n        project: undefined,\n\n        /**\n         * The folder type.  One of `model` | `static` | `node`.\n         * @type {String}\n         */\n        folderType: 'static',\n\n\n        /**\n         * Options to pass on to the underlying transport layer. All jquery.ajax options at http://api.jquery.com/jQuery.ajax/ are available. Defaults to empty object.\n         * @type {Object}\n         */\n        transport: {}\n    };\n\n    this.sessionManager = new SessionManager();\n    var serviceOptions = this.sessionManager.getMergedOptions(defaults, config);\n    var urlConfig = new ConfigService(serviceOptions).get('server');\n    if (serviceOptions.account) {\n        urlConfig.accountPath = serviceOptions.account;\n    }\n    if (serviceOptions.project) {\n        urlConfig.projectPath = serviceOptions.project;\n    }\n\n    var httpOptions = $.extend(true, {}, serviceOptions.transport, {\n        url: urlConfig.getAPIPath('file')\n    });\n\n    if (serviceOptions.token) {\n        httpOptions.headers = {\n            Authorization: 'Bearer ' + serviceOptions.token\n        };\n    }\n    var http = new TransportFactory(httpOptions);\n\n    function uploadBody(fileName, contents) {\n        var boundary = '---------------------------7da24f2e50046';\n\n        return {\n            body: '--' + boundary + '\\r\\n' +\n                    'Content-Disposition: form-data; name=\"file\";' +\n                    'filename=\"' + fileName + '\"\\r\\n' +\n                    'Content-type: text/html\\r\\n\\r\\n' +\n                    contents + '\\r\\n' +\n                    '--' + boundary + '--',\n            boundary: boundary\n        };\n    }\n\n    function uploadFileOptions(filePath, contents, options) {\n        filePath = filePath.split('/');\n        var fileName = filePath.pop();\n        filePath = filePath.join('/');\n        var path = serviceOptions.folderType + '/' + filePath;\n\n        var extraParams = {};\n        if (contents instanceof FormData) {\n            extraParams = {\n                data: contents,\n                processData: false,\n                contentType: false,\n            };\n        } else {\n            var upload = uploadBody(fileName, contents);\n            extraParams = {\n                data: upload.body,\n                contentType: 'multipart/form-data; boundary=' + upload.boundary\n            };\n        }\n\n        return $.extend(true, {}, serviceOptions, options, {\n            url: urlConfig.getAPIPath('file') + path,\n        }, extraParams);\n    }\n\n    var publicAsyncAPI = {\n        /**\n         * Get a directory listing, or contents of a file.\n         * @param {String} filePath  Path to the file\n         * @param {Object} [options] Overrides for configuration options.\n         * @return {Promise}\n         */\n        getContents: function (filePath, options) {\n            var path = serviceOptions.folderType + '/' + filePath;\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {\n                url: urlConfig.getAPIPath('file') + path\n            });\n            return http.get('', httpOptions);\n        },\n\n        /**\n         * Replaces the file at the given file path.\n         * @param  {String} filePath Path to the file\n         * @param  {String | FormData } contents Contents to write to file\n         * @param  {object} [options] Overrides for configuration options\n         * @return {Promise}\n         */\n        replace: function (filePath, contents, options) {\n            var httpOptions = uploadFileOptions(filePath, contents, options);\n            return http.put(httpOptions.data, httpOptions);\n        },\n\n        /**\n         * Creates a file in the given file path.\n         * @param  {String} filePath Path to the file\n         * @param  {String | FormData } contents Contents to write to file\n         * @param  {Boolean} replaceExisting Replace file if it already exists; defaults to false\n         * @param  {Object} [options] Overrides for configuration options\n         * @return {Promise}\n         */\n        create: function (filePath, contents, replaceExisting, options) {\n            var httpOptions = uploadFileOptions(filePath, contents, options);\n            var prom = http.post(httpOptions.data, httpOptions);\n            var me = this;\n            if (replaceExisting === true) {\n                prom = prom.then(null, function (xhr) {\n                    var conflictStatus = 409;\n                    if (xhr.status === conflictStatus) {\n                        return me.replace(filePath, contents, options);\n                    }\n                });\n            }\n            return prom;\n        },\n\n        /**\n         * Removes the file.\n         * @param  {String} filePath Path to the file\n         * @param  {object} [options] Overrides for configuration options\n         * @return {Promise}\n         */\n        remove: function (filePath, options) {\n            var path = serviceOptions.folderType + '/' + filePath;\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {\n                url: urlConfig.getAPIPath('file') + path\n            });\n            return http.delete(null, httpOptions);\n        },\n\n        /**\n         * Renames the file.\n         * @param  {String} filePath Path to the file\n         * @param  {String} newName  New name of file\n         * @param  {object} [options] Overrides for configuration options\n         * @return {Promise}\n         */\n        rename: function (filePath, newName, options) {\n            var path = serviceOptions.folderType + '/' + filePath;\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {\n                url: urlConfig.getAPIPath('file') + path\n            });\n            return http.patch({ name: newName }, httpOptions);\n        }\n    };\n\n    $.extend(this, publicAsyncAPI);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/admin-file-service/index.js","import AuthManager from 'managers/auth-manager';\nimport { normalizeSlashes } from 'util/query-util';\nimport { getURLConfig } from 'service/service-utils';\nimport { CustomError } from 'util/index';\n\nexport const SCOPES = {\n    GROUP: 'GROUP',\n    RUN: 'RUN',\n    USER: 'USER',\n    PROJECT: 'PROJECT',\n    FACILITATOR: 'FACILITATOR',\n    CUSTOM: 'CUSTOM',\n};\n\nexport const errors = {\n    UNAUTHORIZED: 'UNAUTHORIZED'\n};\n\n/**\n * \n * @param {string} key to prefix\n * @param {string} scope \n * @param {object} session \n * \n * @returns {string} scoped name\n */\nexport function addScopeToCollection(key, scope, session) {\n    const publicAccessScopes = [SCOPES.CUSTOM];\n    const allowPublicAccess = publicAccessScopes.indexOf(scope) !== -1;\n    const isValidSession = session && session.groupId && session.userId;\n    if (!isValidSession && !allowPublicAccess) {\n        throw new CustomError(errors.UNAUTHORIZED, `DataService Authorization error: ${scope} for ${key} requires an authenticated user`);\n    }\n    scope = scope.toUpperCase();\n    const delimiter = '_';\n    if (scope === SCOPES.GROUP) {\n        return [key, 'group', session.groupId].join(delimiter);\n    } else if (scope === SCOPES.USER) {\n        return [key, 'user', session.userId, 'group', session.groupId].join(delimiter);\n    } else if (scope === SCOPES.FACILITATOR) {\n        const isFac = session.isTeamMember || session.isFac;\n        if (!isFac) {\n            throw new CustomError(errors.UNAUTHORIZED, `DataService Authorization error: ${scope} for ${key} requires a Facilitator user`);\n        }\n        return [key, 'fac', 'group', session.groupId].join(delimiter);\n    } else if (scope === SCOPES.PROJECT) {\n        return [key, 'project', 'scope'].join(delimiter);\n    } else if (scope === SCOPES.CUSTOM) {\n        return key;\n    }\n    throw new Error('Unknown scope ' + scope);\n}\n\n/**\n * Takes name for form collection/doc/.. and adds scope to just collection name\n * \n * @param {string} name \n * @param {string} scope \n * @param {object} [sessionOverride] \n * @returns {string}\n */\nexport function getScopedName(name, scope, sessionOverride) {\n    const am = new AuthManager();\n    const defaultSession = am.getCurrentUserSessionInfo();\n    const session = $.extend(true, {}, defaultSession, sessionOverride);\n\n    const split = name.split('/');\n    const collection = split[0];\n   \n    split[0] = addScopeToCollection(collection, scope, session);\n\n    const newURL = split.join('/');\n    return newURL;\n}\n\nexport function getURL(API_ENDPOINT, collection, doc, options) {\n    const scopedCollection = getScopedName(collection || options.root, options.scope, options);\n\n    const urlConfig = getURLConfig(options);\n    const baseURL = urlConfig.getAPIPath(API_ENDPOINT);\n\n    const fullURL = `${baseURL}/${scopedCollection}/${doc || ''}`;\n    return normalizeSlashes(fullURL, { leading: false, trailing: true });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/data-api-service/data-service-scope-utils.js","(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof exports === 'object' && exports != null &&\n      typeof exports.nodeType !== 'number') {\n    module.exports = f ();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define ([], f);\n  } else {\n    var base64 = f ();\n    var global = typeof self !== 'undefined' ? self : $.global;\n    if (typeof global.btoa !== 'function') global.btoa = base64.btoa;\n    if (typeof global.atob !== 'function') global.atob = base64.atob;\n  }\n\n} (function() {\n\n  'use strict';\n\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error ();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  function btoa(input) {\n    var str = String (input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt (idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt (63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt (idx += 3 / 4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError (\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  }\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  function atob(input) {\n    var str = (String (input)).replace (/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n    if (str.length % 4 === 1) {\n      throw new InvalidCharacterError (\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt (idx++); // eslint-disable-line no-cond-assign\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode (255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf (buffer);\n    }\n    return output;\n  }\n\n  return {btoa: btoa, atob: atob};\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/Base64/base64.js\n// module id = 52\n// module chunks = 0","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = 53\n// module chunks = 0","import Channel from 'service/channel-service';\nimport SessionManager from 'store/session-manager';\n\n/**\n * @constructor\n * @param {object} options\n * @property {string} url The Cometd endpoint URL.\n * @property {string} [logLevel] The log level for the channel (logs to console).\n * @property {boolean} [websocketEnabled] Whether websocket support is active. Defaults to `true`, uses long-polling if false\n * @property {boolean} [ackEnabled] Whether the ACK extension is enabled. Defaults to `true`. See [https://docs.cometd.org/current/reference/#_extensions_acknowledge](https://docs.cometd.org/current/reference/#_extensions_acknowledge) for more info.\n * @property {boolean} [shareConnection] If false each instance of Channel will have a separate cometd connection to server, which could be noisy. Set to true (default) to re-use the same connection across instances.\n * @property {object} [channel] Other defaults to pass on to instances of the underlying [Channel Service](../channel-service/), which are created through `getChannel()`.\n * @property {object} [handshake] Options to pass to the channel handshake. For example, the [Epicenter Channel Manager](../epicenter-channel-manager/) passes `ext` and authorization information. More information on possible options is in the details of the underlying [Push Channel API](../../../rest_apis/multiplayer/channel/).\n */\nfunction ChannelManager(options) {\n    if (!$.cometd) {\n        console.error('Cometd library not found. Please include epicenter-multiplayer-dependencies.js');\n        throw new Error('Cometd library not found. Please include epicenter-multiplayer-dependencies.js');\n    }\n    if (!options || !options.url) {\n        throw new Error('Please provide an url for the cometd server');\n    }\n\n    var defaults = {\n        url: '',\n        logLevel: 'info',\n        websocketEnabled: true,\n        ackEnabled: true,\n        shareConnection: true,\n        channel: {\n\n        },\n        handshake: undefined\n    };\n    this.sessionManager = new SessionManager();\n    var defaultCometOptions = this.sessionManager.getMergedOptions(defaults, options);\n    this.currentSubscriptions = [];\n    this.options = defaultCometOptions;\n\n    if (defaultCometOptions.shareConnection && ChannelManager.prototype._cometd) {\n        this.cometd = ChannelManager.prototype._cometd;\n        return this;\n    }\n    var cometd = new $.CometD();\n    ChannelManager.prototype._cometd = cometd;\n\n    cometd.websocketEnabled = defaultCometOptions.websocketEnabled;\n    cometd.ackEnabled = defaultCometOptions.ackEnabled;\n\n    this.isConnected = false;\n    var connectionBroken = function (message) {\n        $(this).trigger('disconnect', message);\n    };\n    var connectionSucceeded = function (message) {\n        $(this).trigger('connect', message);\n    };\n    var me = this;\n\n    cometd.configure(defaultCometOptions);\n\n    cometd.addListener('/meta/connect', function (message) {\n        var wasConnected = this.isConnected;\n        this.isConnected = (message.successful === true);\n        if (!wasConnected && this.isConnected) { //Connecting for the first time\n            connectionSucceeded.call(this, message);\n        } else if (wasConnected && !this.isConnected) { //Only throw disconnected message fro the first disconnect, not once per try\n            connectionBroken.call(this, message);\n        }\n    }.bind(this));\n\n    cometd.addListener('/meta/disconnect', connectionBroken);\n\n    cometd.addListener('/meta/handshake', function (message) {\n        if (message.successful) {\n            //http://docs.cometd.org/reference/javascript_subscribe.html#javascript_subscribe_meta_channels\n            // ^ \"dynamic subscriptions are cleared (like any other subscription) and the application needs to figure out which dynamic subscription must be performed again\"\n            cometd.batch(function () {\n                $(me.currentSubscriptions).each(function (index, subs) {\n                    cometd.resubscribe(subs);\n                });\n            });\n        }\n    });\n\n    //Other interesting events for reference\n    cometd.addListener('/meta/subscribe', function (message) {\n        $(me).trigger('subscribe', message);\n    });\n    cometd.addListener('/meta/unsubscribe', function (message) {\n        $(me).trigger('unsubscribe', message);\n    });\n    cometd.addListener('/meta/publish', function (message) {\n        $(me).trigger('publish', message);\n    });\n    cometd.addListener('/meta/unsuccessful', function (message) {\n        $(me).trigger('error', message);\n    });\n\n    cometd.handshake(defaultCometOptions.handshake);\n\n    this.cometd = cometd;\n}\n\n\nChannelManager.prototype = $.extend(ChannelManager.prototype, {\n\n    /**\n     * Creates and returns a channel, that is, an instance of a [Channel Service](../channel-service/).\n     *\n     * @example\n     *      var cm = new F.manager.ChannelManager();\n     *      var channel = cm.getChannel();\n     *\n     *      channel.subscribe('topic', callback);\n     *      channel.publish('topic', { myData: 100 });\n     *\n     *\n     * @param {Object|String} [options] If string, assumed to be the base channel url. If object, assumed to be configuration options for the constructor.\n     * @return {Channel} Channel instance\n     */\n    getChannel: function (options) {\n        //If you just want to pass in a string\n        if (options && !$.isPlainObject(options)) {\n            options = {\n                base: options\n            };\n        }\n        var defaults = {\n            transport: this.cometd\n        };\n        var channel = new Channel($.extend(true, {}, this.options.channel, defaults, options));\n\n\n        //Wrap subs and unsubs so we can use it to re-attach handlers after being disconnected\n        var subs = channel.subscribe;\n        channel.subscribe = function () {\n            var subid = subs.apply(channel, arguments);\n            this.currentSubscriptions = this.currentSubscriptions.concat(subid);\n            return subid;\n        }.bind(this);\n\n\n        var unsubs = channel.unsubscribe;\n        channel.unsubscribe = function () {\n            var removed = unsubs.apply(channel, arguments);\n            for (var i = 0; i < this.currentSubscriptions.length; i++) {\n                if (this.currentSubscriptions[i].id === removed.id) {\n                    this.currentSubscriptions.splice(i, 1);\n                }\n            }\n            return removed;\n        }.bind(this);\n\n        return channel;\n    },\n\n    /**\n     * Start listening for events on this instance. Signature is same as for jQuery Events: http://api.jquery.com/on/.\n     *\n     * Supported events are: `connect`, `disconnect`, `subscribe`, `unsubscribe`, `publish`, `error`.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/on/.\n     */\n    on: function (event) {\n        $(this).on.apply($(this), arguments);\n    },\n\n    /**\n     * Stop listening for events on this instance. Signature is same as for jQuery Events: http://api.jquery.com/off/.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/off/.\n     */\n    off: function (event) {\n        $(this).off.apply($(this), arguments);\n    },\n\n    /**\n     * Trigger events and execute handlers. Signature is same as for jQuery Events: http://api.jquery.com/trigger/.\n     * @param {string} event The event type. See more detail at jQuery Events: http://api.jquery.com/trigger/.\n     */\n    trigger: function (event) {\n        $(this).trigger.apply($(this), arguments);\n    }\n});\n\nexport default ChannelManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/epicenter-channel-manager/channel-manager/index.js","import WorldService from 'service/world-api-adapter';\nimport { TOPICS, TOPIC_SUBTYPES } from './world-channel-constants';\nimport { pick } from 'util/object-util';\n\n\nexport default function subscribeToWorldChannel(worldid, channel, session, channelOptions) {\n    const { account, project, baseTopic, } = channelOptions;\n\n    channel.TOPICS = TOPICS;\n    var oldsubs = channel.subscribe;\n    channel.subscribe = function (fullTopic, callback, context, subscribeOptions) {\n        if (!fullTopic) {\n            return oldsubs.call(channel, fullTopic, callback, context, subscribeOptions);\n        }\n\n        const [subscribedTopic, subscribedSubTopic] = fullTopic.split('/');\n        var defaults = {\n            includeMine: true\n        };\n\n        var opts = $.extend({}, defaults, subscribeOptions);\n        if (subscribedTopic === TOPICS.PRESENCE) { //fake-send initial online status\n            var wm = new WorldService({ \n                account: account,\n                project: project,\n                filter: worldid\n            });\n            wm.getPresenceForUsers(worldid).then((users)=> {\n                users.filter((u)=> u.isOnline).forEach(function (user) {\n                    var fakeMeta = {\n                        date: Date.now(),\n                        channel: baseTopic,\n                        type: TOPICS.PRESENCE,\n                        subType: TOPIC_SUBTYPES.ONLINE,\n                        source: 'presenceAPI',\n                    };\n                    const normalizedUser = pick(user, ['userName', 'lastName', 'isOnline', 'account']);\n                    normalizedUser.id = user.userId; //regular presence notification has id, not userid\n                    callback(normalizedUser, fakeMeta); //eslint-disable-line callback-return\n                });\n            });\n        }\n        /* eslint-disable complexity */\n        var filterByType = function (res) {\n            const { type, subType } = res.data;\n\n            const isTopicMatch = subscribedTopic === type;\n            const isSubTopicMatch = !subscribedSubTopic || subscribedSubTopic === subType;\n\n            let notificationFrom = res.data.user || {};\n            const payload = res.data.data;\n            if (type === TOPICS.RUN && subType === TOPIC_SUBTYPES.RESET) {\n                if (payload.run.user) {\n                    //reset doesn't give back user info otherwise, and world api doesn't return anything regardless\n                    notificationFrom = payload.run.user;\n                }\n            } else if (type === TOPICS.ROLES && !notificationFrom.id) {\n                notificationFrom.id = session.userid; //unassign doesn't provide an user\n            }\n            \n            const isMine = session.userId === notificationFrom.id;\n            const isInitiatorMatch = isMine && opts.includeMine || !isMine;\n\n            const shouldPassOn = isTopicMatch && isSubTopicMatch && isInitiatorMatch;\n            if (!shouldPassOn) {\n                return;\n            }\n\n            const meta = {\n                user: notificationFrom,\n                date: res.data.date,\n                channel: res.channel,\n                type: subscribedTopic,\n                subType: subscribedSubTopic || subType,\n            };\n\n            switch (subscribedTopic) {\n                case TOPICS.RUN: {\n                    if (subscribedSubTopic === TOPIC_SUBTYPES.VARIABLES || subscribedSubTopic === TOPIC_SUBTYPES.OPERATIONS) {\n                        return callback(payload[subType], meta);\n                    } else if (subscribedSubTopic === TOPIC_SUBTYPES.RESET) {\n                        return callback(payload.run, meta);\n                    }\n                    return callback(payload, meta);\n                }\n                case TOPICS.ROLES: {\n                    if (subType === TOPIC_SUBTYPES.UNASSIGN) {\n                        payload.users = payload.users.map((u)=> {\n                            u.oldRole = u.role;\n                            u.role = null;\n                            return u;\n                        });\n                    }\n                    return callback(payload.users, meta);\n                }\n                case TOPICS.PRESENCE: {\n                    const user = res.data.user;\n                    user.isOnline = subType === TOPIC_SUBTYPES.ONLINE;\n                    return callback(user, meta);\n                }\n                case TOPICS.CONSENSUS: {\n                    // const { name, stage } = payload;\n                    return callback(payload, meta);\n                }\n                default:\n                    callback.call(context, res);\n                    break;\n            }\n        };\n        return oldsubs.call(channel, '', filterByType, context, subscribeOptions);\n    };\n    return channel;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/epicenter-channel-manager/world-channel/subscribe-world-channel.js","export const TOPIC_SUBTYPES = {\n    VARIABLES: 'variables',\n    OPERATIONS: 'operation',\n    RESET: 'new',\n    ONLINE: 'connect',\n    OFFLINE: 'disconnect',\n    ASSIGN: 'assign',\n    UNASSIGN: 'unassign',\n    CREATE: 'create',\n    UPDATE: 'update',\n};\n\nexport const TOPICS = {\n    ALL: '',\n    \n    RUN: 'run',\n    RUN_VARIABLES: `run/${TOPIC_SUBTYPES.VARIABLES}`,\n    RUN_OPERATIONS: `run/${TOPIC_SUBTYPES.OPERATIONS}`,\n    RUN_RESET: `run/${TOPIC_SUBTYPES.RESET}`,\n\n    PRESENCE: 'user',\n    PRESENCE_ONLINE: `user/${TOPIC_SUBTYPES.ONLINE}`,\n    PRESENCE_OFFLINE: `user/${TOPIC_SUBTYPES.OFFLINE}`,\n\n    ROLES: 'world',\n    ROLES_ASSIGN: `world/${TOPIC_SUBTYPES.ASSIGN}`,\n    ROLES_UNASSIGN: `world/${TOPIC_SUBTYPES.UNASSIGN}`,\n\n    CONSENSUS: 'consensus',\n    CONSENSUS_CREATE: `consensus/${TOPIC_SUBTYPES.CREATE}`,\n    CONSENSUS_UPDATE: `consensus/${TOPIC_SUBTYPES.UPDATE}`,\n};\n\n\n// WEBPACK FOOTER //\n// ./src/managers/epicenter-channel-manager/world-channel/world-channel-constants.js","import ConfigService from 'service/configuration-service';\nimport TransportFactory from 'transport/http-transport-factory';\nimport { pick } from 'util/object-util';\nimport SessionManager from 'store/session-manager';\n\nvar apiEndpoint = 'asset';\n\n/**\n * @param {AccountAPIServiceOptions} config \n * @property {string} userId The user id. Defaults to session's `userId`.\n * @property {user|group|project} scope The scope for the asset. Valid values are: `user`, `group`, and `project`. See above for the required permissions to write to each scope. Defaults to `user`, meaning the current end user or a facilitator in the end user's group can edit the asset.\n * @property {boolean} fullUrl  Determines if a request to list the assets in a scope includes the complete URL for each asset (`true`), or only the file names of the assets (`false`). Defaults to `true`.\n */\nexport default function AssetAdapter(config) {\n    var defaults = {\n        userId: undefined,\n        scope: 'user',\n        fullUrl: true,\n\n        token: undefined,\n        account: undefined,\n        project: undefined,\n        group: undefined,\n        \n        transport: {\n            processData: false\n        }\n    };\n    this.sessionManager = new SessionManager();\n    var serviceOptions = this.sessionManager.getMergedOptions(defaults, config);\n    var urlConfig = new ConfigService(serviceOptions).get('server');\n\n    if (!serviceOptions.account) {\n        serviceOptions.account = urlConfig.accountPath;\n    }\n\n    if (!serviceOptions.project) {\n        serviceOptions.project = urlConfig.projectPath;\n    }\n\n    var transportOptions = $.extend(true, {}, serviceOptions.transport, {\n        url: urlConfig.getAPIPath(apiEndpoint)\n    });\n\n    if (serviceOptions.token) {\n        transportOptions.headers = {\n            Authorization: 'Bearer ' + serviceOptions.token\n        };\n    }\n\n    var http = new TransportFactory(transportOptions);\n\n    var assetApiParams = ['encoding', 'data', 'contentType'];\n    var scopeConfig = {\n        user: ['scope', 'account', 'project', 'group', 'userId'],\n        group: ['scope', 'account', 'project', 'group'],\n        project: ['scope', 'account', 'project'],\n    };\n\n    var validateFilename = function (filename) {\n        if (!filename) {\n            throw new Error('filename is needed.');\n        }\n    };\n\n    var validateUrlParams = function (options) {\n        var partKeys = scopeConfig[options.scope];\n        if (!partKeys) {\n            throw new Error('scope parameter is needed.');\n        }\n\n        $.each(partKeys, function () {\n            if (!options[this]) {\n                throw new Error(this + ' parameter is needed.');\n            }\n        });\n    };\n\n    var buildUrl = function (filename, options, subEndPoint) {\n        validateUrlParams(options);\n        var partKeys = scopeConfig[options.scope];\n        var parts = partKeys.map(function (key) {\n            return options[key];\n        });\n        if (subEndPoint) parts = [subEndPoint].concat(parts);\n        if (filename) {\n            // This prevents adding a trailing / in the URL as the Asset API\n            // does not work correctly with it\n            filename = '/' + filename;\n        }\n        return urlConfig.getAPIPath(apiEndpoint) + parts.join('/') + filename;\n    };\n\n    // Private function, all requests follow a more or less same approach to\n    // use the Asset API and the difference is the HTTP verb\n    //\n    // @param {string} method` (Required) HTTP verb\n    // @param {string} filename` (Required) Name of the file to delete/replace/create\n    // @param {object} [params]` Body parameters to send to the Asset API\n    // @param {object} [options]` Options object to override global options.\n    var upload = function (method, filename, params, options) {\n        validateFilename(filename);\n        // make sure the parameter is clean\n        method = method.toLowerCase();\n        var contentType = params instanceof FormData === true ? false : 'application/json';\n        if (contentType === 'application/json') {\n            // whitelist the fields that we actually can send to the api\n            params = pick(params, assetApiParams);\n        } else { // else we're sending form data which goes directly in request body\n            // For multipart/form-data uploads the filename is not set in the URL,\n            // it's getting picked by the FormData field filename.\n            filename = method === 'post' || method === 'put' ? '' : filename;\n        }\n        var urlOptions = $.extend({}, serviceOptions, options);\n        var url = buildUrl(filename, urlOptions);\n        var createOptions = $.extend(true, {}, urlOptions, { url: url, contentType: contentType });\n\n        return http[method](params, createOptions);\n    };\n\n    var publicAPI = {\n        /**\n        * Creates a file in the Asset API. The server returns an error (status code `409`, conflict) if the file already exists, so\n        * check first with a `list()` or a `get()`.\n        *\n        * @example\n        *       var aa = new F.service.Asset({\n        *          account: 'acme-simulations',\n        *          project: 'supply-chain-game',\n        *          group: 'team1',\n        *          userId: ''\n        *       });\n        *\n        *       // create a new asset using encoded text\n        *       aa.create('test.txt', {\n        *           encoding: 'BASE_64',\n        *           data: 'VGhpcyBpcyBhIHRlc3QgZmlsZS4=',\n        *           contentType: 'text/plain'\n        *       }, { scope: 'user' });\n        *\n        *       // alternatively, create a new asset using a file uploaded through a form\n        *       // this sample code goes with an html form that looks like this:\n        *       //\n        *       // <form id=\"upload-file\">\n        *       //   <input id=\"file\" type=\"file\">\n        *       //   <input id=\"filename\" type=\"text\" value=\"myFile.txt\">\n        *       //   <button type=\"submit\">Upload myFile</button>\n        *       // </form>\n        *       //\n        *       $('#upload-file').on('submit', function (e) {\n        *          e.preventDefault();\n        *          var filename = $('#filename').val();\n        *          var data = new FormData();\n        *          var inputControl = $('#file')[0];\n        *          data.append('file', inputControl.files[0], filename);\n        *\n        *          aa.create(filename, data, { scope: 'user' });\n        *       });\n        *\n        *\n        *  \n        * @param {string} filename Name of the file to create.\n        * @param {object} [params] Body parameters to send to the Asset API. Required if the `options.transport.contentType` is `application/json`, otherwise ignored.\n        * @param {string} [params.encoding] Either `HEX` or `BASE_64`. Required if `options.transport.contentType` is `application/json`.\n        * @param {string} [params.data] The encoded data for the file. Required if `options.transport.contentType` is `application/json`.\n        * @param {string} [params.contentType] The mime type of the file. Optional.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        create: function (filename, params, options) {\n            return upload('post', filename, params, options);\n        },\n\n        /**\n        * Gets a file from the Asset API, fetching the asset content. (To get a list\n        * of the assets in a scope, use `list()`.)\n        *\n        *  \n        * @param {string} filename (Required) Name of the file to retrieve.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        get: function (filename, options) {\n            var getServiceOptions = pick(serviceOptions, ['scope', 'account', 'project', 'group', 'userId']);\n            var urlOptions = $.extend({}, getServiceOptions, options);\n            var url = buildUrl(filename, urlOptions);\n            var getOptions = $.extend(true, {}, urlOptions, { url: url });\n\n            return http.get({}, getOptions);\n        },\n\n        /**\n        * Gets the list of the assets in a scope.\n        *\n        * @example\n        *       aa.list({ fullUrl: true }).then(function(fileList){\n        *           console.log('array of files = ', fileList);\n        *       });\n        *\n        *  \n        * @param {object} [options] Options object to override global options.\n        * @param {string} [options.scope] The scope (`user`, `group`, `project`).\n        * @param {boolean} [options.fullUrl] Determines if the list of assets in a scope includes the complete URL for each asset (`true`), or only the file names of the assets (`false`).\n        * @return {Promise}\n        */\n        list: function (options) {\n            var dtd = $.Deferred();\n            var me = this;\n            var urlOptions = $.extend({}, serviceOptions, options);\n            var url = buildUrl('', urlOptions);\n            var getOptions = $.extend(true, {}, urlOptions, { url: url });\n            var fullUrl = getOptions.fullUrl;\n\n            if (!fullUrl) {\n                return http.get({}, getOptions);\n            }\n\n            http.get({}, getOptions)\n                .then(function (files) {\n                    var fullPathFiles = $.map(files, function (file) {\n                        return buildUrl(file, urlOptions);\n                    });\n                    dtd.resolveWith(me, [fullPathFiles]);\n                })\n                .fail(dtd.reject);\n\n            return dtd.promise();\n        },\n\n        /**\n        * Replaces an existing file in the Asset API.\n        *\n        * @example\n        *       // replace an asset using encoded text\n        *       aa.replace('test.txt', {\n        *           encoding: 'BASE_64',\n        *           data: 'VGhpcyBpcyBhIHNlY29uZCB0ZXN0IGZpbGUu',\n        *           contentType: 'text/plain'\n        *       }, { scope: 'user' });\n        *\n        *       // alternatively, replace an asset using a file uploaded through a form\n        *       // this sample code goes with an html form that looks like this:\n        *       //\n        *       // <form id=\"replace-file\">\n        *       //   <input id=\"file\" type=\"file\">\n        *       //   <input id=\"replace-filename\" type=\"text\" value=\"myFile.txt\">\n        *       //   <button type=\"submit\">Replace myFile</button>\n        *       // </form>\n        *       //\n        *       $('#replace-file').on('submit', function (e) {\n        *          e.preventDefault();\n        *          var filename = $('#replace-filename').val();\n        *          var data = new FormData();\n        *          var inputControl = $('#file')[0];\n        *          data.append('file', inputControl.files[0], filename);\n        *\n        *          aa.replace(filename, data, { scope: 'user' });\n        *       });\n        *\n        *  \n        * @param {string} filename Name of the file being replaced.\n        * @param {object} [params] Body parameters to send to the Asset API. Required if the `options.transport.contentType` is `application/json`, otherwise ignored.\n        * @param {string} [params.encoding] Either `HEX` or `BASE_64`. Required if `options.transport.contentType` is `application/json`.\n        * @param {string} [params.data] The encoded data for the file. Required if `options.transport.contentType` is `application/json`.\n        * @param {string} [params.contentType] The mime type of the file. Optional.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        replace: function (filename, params, options) {\n            return upload('put', filename, params, options);\n        },\n        \n        /**\n         * Get upload url to S3. Useful if you're uploading large assets and would like to skip the middle-man (Epicenter) and upload to S3 directly.\n         * \n         * @param {string} filename  Name of the file to upload.\n         * @param {object} [params] \n         * @param {number} params.ttlSeconds Number of seconds link is valid for\n         * @param {object} [options] Options object to override service options.\n         * @return {Promise}\n         */\n        getTargetUploadURL: function (filename, params, options) {\n            const getServiceOptions = pick(serviceOptions, ['scope', 'account', 'project', 'group', 'userId']);\n            const urlOptions = $.extend({}, getServiceOptions, options);\n            const url = buildUrl(filename, urlOptions, 'register');\n\n            const postOptions = Object.assign({}, {\n                ttlSeconds: 900\n            }, params);\n            const httpOptions = $.extend(true, {}, urlOptions, { url: url });\n\n            return http.post(postOptions, httpOptions);\n        },\n\n        /**\n        * Deletes a file from the Asset API.\n        *\n        * @example\n        *       aa.delete(sampleFileName);\n        *\n        *  \n        * @param {string} filename (Required) Name of the file to delete.\n        * @param {object} [options] Options object to override global options.\n        * @return {Promise}\n        */\n        delete: function (filename, options) {\n            return upload('delete', filename, {}, options);\n        },\n\n        assetUrl: function (filename, options) {\n            var urlOptions = $.extend({}, serviceOptions, options);\n            return buildUrl(filename, urlOptions);\n        }\n    };\n    $.extend(this, publicAPI);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/asset-api-adapter/index.js","import Dataservice from 'service/data-api-service';\nimport TimeService from 'service/time-api-service';\nimport SessionManager from 'store/session-manager';\nimport PubSub from 'util/pubsub';\n\nimport { default as getStrategy, STRATEGIES } from './start-time-strategies';\n\nimport reduceActions from './timer-actions-reducer';\nimport { ACTIONS } from './timer-constants';\n\n\nfunction getStore(options) {\n    const ds = new Dataservice($.extend(true, {}, options, {\n        root: 'timer',\n        scope: options.scope\n    }));\n    return ds;\n}\n\nfunction getStateFromActions(actions, currentTime, options) {\n    const getStartTime = getStrategy(options.strategy);\n    const startTime = getStartTime(actions, options.strategyOptions);\n    const state = reduceActions(actions, startTime, currentTime);\n    return state;\n}\n\nclass TimerService {\n    /**\n     * @param {AccountAPIServiceOptions} options \n     * @property {string} [name] Key to associate with this specific timer, use to disassociate multiple timers with the same scope\n     * @property {string} [scope] Determines the specificity of the timer, see DataService for available scopes\n     * @property {string|function} [strategy] strategy to use to resolve start time. Available strategies are 'first-user' (default) or 'last-user'. Can also take in a function to return a custom start time.\n     */\n    constructor(options) {\n        const defaults = {\n            name: 'timer',\n            strategy: STRATEGIES.START_BY_FIRST_USER,\n            strategyOptions: {},\n\n            account: undefined,\n            project: undefined,\n            token: undefined,\n            transport: {},\n        };\n\n        this.ACTIONS = ACTIONS;\n\n        this.options = $.extend(true, {}, defaults, options); \n        this.sessionManager = new SessionManager(this.options);\n        this.channel = new PubSub();\n\n        this.interval = null;\n        this.dataChannelSubid = null;\n    }\n\n    /**\n     * Creates a new Timer. Call `start` to start ticking.\n     * \n     * @param {object} createOptions\n     * @param {number} createOptions.timeLimit Limit for the timer, in milliseconds\n     * @param {boolean} [createOptions.startImmediately] Determines if the timer should start ticking immediately. If set to false (default) call timer.start to start ticking.\n     * \n     * @returns {JQuery.Promise}\n     */\n    create(createOptions) {\n        const options = this.sessionManager.getMergedOptions(this.options, createOptions);\n        if (!options || isNaN(+options.timeLimit)) {\n            throw new Error('Timer: expected integer timeLimit, received ' + options.timeLimit);\n        }\n        const ds = getStore(options);\n        const createAction = {\n            type: ACTIONS.CREATE,\n            timeLimit: options.timeLimit,\n            user: options.user\n        };\n\n        const prom = options.startImmediately ? this.makeAction(ACTIONS.START) : $.Deferred().resolve([]).promise();\n\n        return prom.then((actions)=> {\n            return ds.saveAs(options.name, {\n                actions: [].concat(createAction, actions) \n            });\n        }).then((doc)=> {\n            const actions = doc.actions;\n            const lastAction = actions[actions.length - 1];\n            const currentTime = lastAction.time; //Created won't have a time but that's okay, reduceActions handles it\n            const state = getStateFromActions(actions, currentTime, this.options);\n            return state;\n        });\n    }\n\n    /**\n     * Get the current timer, or create a new one and immediately start it\n     * \n     * @param {object} options\n     * @param {number} options.timeLimit Limit for the timer, in milliseconds\n     * \n     * @returns {Promise}\n     */\n    autoStart(options) {\n        return this.getState().catch(()=> {\n            const createOpts = $.extend(true, {}, options, { startImmediately: true });\n            return this.create(createOpts);\n        });\n    }\n\n    /**\n     * Cancels current timer. Need to call `create` again to restart.\n     * \n     * @returns {Promise}\n     */\n    cancel() {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        const ds = getStore(merged);\n\n        clearInterval(this.interval);\n        this.interval = null;\n        if (this.dataChannelSubid) {\n            const channel = ds.getChannel();\n            channel.unsubscribe(this.dataChannelSubid);\n        }\n        return ds.remove(merged.name);\n    }\n    \n    makeAction(action) {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        return this.getCurrentTime().then(function (t) {\n            return { \n                type: action, \n                time: t.toISOString(),\n                user: merged.user,\n            };\n        });\n    }\n\n    /**\n     * Adds a custom action to the timer state. Only relevant if you're implementing a custom strategy.\n     * \n     * @param {string} action\n     * @returns {Promise}\n     */\n    addTimerAction(action) {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        const ds = getStore(merged);\n\n        return this.makeAction(action).then((action)=> {\n            return ds.pushToArray(`${merged.name}/actions`, action)\n                .then((actions)=> {\n                    const state = getStateFromActions(actions, action.time, this.options);\n                    return state;\n                }, (res)=> {\n                    if (res.status === 404) {\n                        const errorMsg = 'Timer not found. Did you create it yet?';\n                        console.error(errorMsg);\n                        throw new Error(errorMsg);\n                    }\n                    throw res;\n                });\n        });\n    }\n\n\n    /**\n     * Start the timer\n     * \n     * @returns {Promise}\n     */\n    start() {\n        return this.addTimerAction(ACTIONS.START);\n    }\n\n    /**\n     * Pause the timer\n     * \n     * @returns {Promise}\n     */\n    pause() {\n        return this.addTimerAction(ACTIONS.PAUSE);\n    }\n\n    /**\n     * Resumes a paused timer\n     * \n     * @returns {Promise}\n     */\n    resume() {\n        return this.addTimerAction(ACTIONS.RESUME);\n    }\n\n    /**\n     * Helper method to return current server time\n     * \n     * @returns {Promise<Date>}\n     */\n    getCurrentTime() {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        const ts = new TimeService(merged);\n        return ts.getTime();\n    }\n\n    /**\n     * Resumes current state of the timer, including time elapsed and remaining\n     * \n     * @returns {Promise}\n     */\n    getState() {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        const ds = getStore(merged);\n        return ds.load(merged.name).then((doc)=> {\n            return this.getCurrentTime().then((currentTime)=> {\n                const actions = doc.actions;\n                const state = getStateFromActions(actions, currentTime, this.options);\n                return $.extend(true, {}, doc, state);\n            });\n        }, ()=> {\n            throw new Error('Timer has not been created yet');\n        });\n    }\n\n    /**\n     * Resumes a channel to hook into for timer notifications.\n     * \n     * @returns {object}\n     */\n    getChannel() {\n        const merged = this.sessionManager.getMergedOptions(this.options);\n        const ds = getStore(merged);\n        const dataChannel = ds.getChannel();\n        const me = this;\n\n        function cancelTimer() {\n            clearInterval(me.interval);\n            me.interval = null;\n        }\n        function createTimer(actions, currentTime) {\n            if (me.interval || !merged.tickInterval) {\n                return;\n            }\n            me.interval = setInterval(function () {\n                currentTime = currentTime + merged.tickInterval;\n                const state = getStateFromActions(actions, currentTime, me.options);\n                if (state.remaining.time === 0) {\n                    me.channel.publish(ACTIONS.COMPLETE, state);\n\n                    dataChannel.unsubscribe(me.dataChannelSubid);\n                    cancelTimer();\n                }\n                me.channel.publish(ACTIONS.TICK, state);\n            }, merged.tickInterval);\n\n            const state = getStateFromActions(actions, currentTime, me.options);\n            me.channel.publish(ACTIONS.TICK, state);\n        }\n\n        me.dataChannelSubid = dataChannel.subscribe('', function (res, meta) {\n            if (meta.dataPath.indexOf('/actions') === -1) { //create\n                if (meta.subType === 'delete') {\n                    me.channel.publish(ACTIONS.RESET);\n                    cancelTimer();\n                } else {\n                    const createAction = res.actions[0];\n                    me.channel.publish(ACTIONS.CREATE, createAction);\n                }\n            } else {\n                const actions = res; //you only get the array back\n                const lastAction = actions[actions.length - 1];\n\n                me.channel.publish(lastAction.type, lastAction);\n                \n                if (lastAction.type === ACTIONS.START || lastAction.type === ACTIONS.RESUME) {\n                    return me.getCurrentTime().then(function (currentTime) {\n                        createTimer(actions, +currentTime);\n                    });\n                } else if (lastAction.type === ACTIONS.PAUSE) {\n                    cancelTimer();\n                }\n            }\n        });\n\n        //TODO: Don't do the ajax request till someone calls subscribe\n        me.getState().then(function (state) {\n            //failure means timer hasn't been created, in which case the datachannel subscription should handle \n            if (state.isStarted) {\n                if (state.isPaused || state.remaining.time <= 0) {\n                    me.channel.publish(ACTIONS.TICK, state);\n                } else {\n                    createTimer(state.actions, state.currentTime); \n                }\n            }\n        });\n\n        return this.channel;\n    }\n}\n\nTimerService.ACTIONS = ACTIONS;\nTimerService.SCOPES = Dataservice.SCOPES;\nTimerService.STRATEGY = STRATEGIES;\n\nexport default TimerService;\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/index.js","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 59\n// module chunks = 0","import startOnFirstUser from './start-on-first-user';\nimport startWhenAllUsers from './start-when-all-users';\n\nexport const STRATEGIES = {\n    START_BY_FIRST_USER: 'first-user',\n    START_WHEN_ALL_USERS: 'all-users',\n};\n\nconst list = {\n    [STRATEGIES.START_BY_FIRST_USER]: startOnFirstUser,\n    [STRATEGIES.START_WHEN_ALL_USERS]: startWhenAllUsers,\n};\n\nexport default function getStrategy(strategy) {\n    if (typeof strategy === 'function') {\n        return strategy;\n    } else if (list[strategy]) {\n        return list[strategy];\n    }\n    throw new Error('Invalid timer strategy ' + strategy);\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/start-time-strategies/index.js","import startWhenCondition from './start-when-user-condition';\n\nexport default function reduceActions(actions) {\n    return startWhenCondition(actions, {\n        condition: (users)=> users.length > 0\n    });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/start-time-strategies/start-on-first-user.js","import startWhenCondition from './start-when-user-condition';\nimport { intersection } from 'util/array-utils';\n\nexport default function reduceActions(actions, options) {\n    const opts = $.extend({\n        requiredUsernames: []\n    }, options);\n\n    if (!opts.requiredUsernames.length) {\n        throw new Error('This strategy requires passing in requiredUsernames under strategyOptions');\n    }\n    return startWhenCondition(actions, {\n        condition: function (joinedUsers) {\n            const joinedNames = joinedUsers.map((u)=> u.userName);\n            const requiredUsersJoined = intersection(opts.requiredUsernames, joinedNames);\n            return requiredUsersJoined.length >= opts.requiredUsernames.length;\n        }\n    });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/start-time-strategies/start-when-all-users.js","import { ACTIONS } from './timer-constants';\n\nfunction toDetailedTime(ts) {\n    const time = Math.max(0, ts);\n\n    const secs = Math.floor(time / 1000);\n    const minutesRemaining = Math.floor(secs / 60);\n    const secondsRemaining = Math.floor(secs % 60);\n    return {\n        time: ts,\n        minutes: minutesRemaining,\n        seconds: secondsRemaining,\n    };\n}\n\n/**\n * @param {object[]} actions \n * @param {number} startTime\n * @param {number} [currentTime] \n * @returns {object}\n */\nexport default function reduceActions(actions, startTime, currentTime) {\n    if (!actions || !actions.length) {\n        return {};\n    }\n    const initialState = {\n        lastPausedTime: 0, \n        totalPauseTime: 0, \n        elapsedTime: 0, \n        timeLimit: 0,\n        isPaused: false,\n        isStarted: !!startTime,\n    };\n    const reduced = actions.reduce(function (accum, action) {\n        const ts = +(new Date(action.time));\n        if (action.type === ACTIONS.CREATE) {\n            accum.timeLimit = action.timeLimit;\n        } else if (action.type === ACTIONS.PAUSE && !accum.lastPausedTime) {\n            accum.lastPausedTime = ts;\n            accum.elapsedTime = ts - startTime;\n            accum.isPaused = true;\n        } else if (action.type === ACTIONS.RESUME && accum.lastPausedTime) {\n            const pausedTime = ts - accum.lastPausedTime;\n            accum.totalPauseTime += pausedTime;\n            accum.lastPausedTime = 0;\n            accum.elapsedTime = 0;\n            accum.isPaused = false;\n        }\n        return accum;\n    }, initialState);\n\n    let elapsed = 0;\n\n    const base = {};\n\n    if (currentTime) {\n        const current = +(new Date(currentTime));\n        base.currentTime = current;\n\n        if (reduced.isPaused) {\n            elapsed = reduced.elapsedTime;\n        } else if (reduced.isStarted) {\n            elapsed = current - startTime - reduced.totalPauseTime;\n        } \n    }\n\n    const remaining = Math.max(0, reduced.timeLimit - elapsed);\n\n    return $.extend(true, {}, base, {\n        isPaused: reduced.isPaused,\n        isStarted: reduced.isStarted,\n        elapsed: toDetailedTime(elapsed),\n        remaining: toDetailedTime(remaining),\n    });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/timer-service/timer-actions-reducer.js","import SessionManager from 'store/session-manager';\nimport { pick } from 'util/object-util';\nimport { getURLConfig, getHTTPTransport } from 'service/service-utils';\n\nconst API_ENDPOINT = 'password';\n\n/**\n * \n * ## Password Service\n *\n * The primary use-case for the Password Service is to allow end-users to reset their passwords. \n * \n */\nexport default class PasswordService {\n    /**\n     * @param {AccountAPIServiceOptions} config \n     */\n    constructor(config) {\n        var defaults = {\n            account: undefined,\n            project: undefined,\n            transport: {}\n        };\n        this.sessionManager = new SessionManager();\n        var serviceOptions = this.sessionManager.getMergedOptions(defaults, config);\n        this.serviceOptions = serviceOptions;\n    }\n\n    /**\n     * Send a password reset email for the provided userName.\n     * \n     * @example\n            var ps = new F.service.Password();\n            ps.resetPassword('myuserName@gmail.com', {\n                redirectUrl: 'login.html',\n                subject: 'Please reset your password',\n                projectFullName: 'My Awesome Project'\n            });\n\n     * This will send the following email\n     * \n     * Subject: Please reset your password\n     * To: myuserName@gmail.com\n     * From: support@forio.com\n     * Body:\n     * You have requested a password reset for the user endUser@acmesimulations.com in My Awesome Project. \n     * \n     * If you did not initiate this request, please ignore this email.\n     * \n     * To reset your password, please click the following link: https://forio.com/epicenter/recover/<password recovery token>\n\n     * @param {string} userName user to reset password for \n     * @param {object} [resetParams] \n     * @param {string} [resetParams.redirectUrl] URL to redirect to after password is reset. Defaults to project root. If relative, it's treated as being relative to project\n     * @param {string} [resetParams.subject] Subject for reset password email\n     * @param {string} [resetParams.projectFullName] Text to use within body. Text will be of the form `You have requested a password reset for the user {userName} in {projectFullName}.\n     * @param {object} [options] overrides for service options\n     * @returns {Promise}\n     */\n    resetPassword(userName, resetParams, options) {\n        const mergedOptions = $.extend(true, {}, this.serviceOptions, options);\n        const urlConfig = getURLConfig(mergedOptions);\n        const http = getHTTPTransport(mergedOptions.transport, {\n            url: urlConfig.getAPIPath(`${API_ENDPOINT}/recovery`)\n        });\n\n        if (!userName) {\n            throw new Error('resetPassword: missing userName');\n        }\n        \n        const defaults = pick(resetParams, ['projectFullName', 'subject', 'redirectUrl']);\n        const postParams = $.extend({}, {\n            userName: userName,\n            redirectUrl: '',\n            account: urlConfig.accountPath,\n        }, defaults);\n\n        const isRelativeURL = (postParams.redirectUrl.indexOf('http') !== 0);\n        if (isRelativeURL) {\n            const { protocol, actingHost, accountPath, projectPath } = urlConfig;\n            const absURL = [actingHost, accountPath, projectPath, postParams.redirectUrl.replace(/^\\//, '')].join('/');\n            postParams.redirectUrl = `${protocol}://${absURL}`;\n        }\n        return http.post(postParams);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/password-api-service/index.js","/**\n *\n * ## Account API Adapter\n *\n * The Account API allows reading/writing Account settings. An author/admin Account token is required for most operations.\n *\n *      var ps = new F.service.Account({  account: 'acme', Account: 'sample', token: 'author-or-account-access-token' });\n *      ps.getAccountSettings();\n */\n\nimport { getDefaultOptions } from 'service/service-utils';\nimport TransportFactory from 'transport/http-transport-factory';\n\nconst API_ENDPOINT = 'account';\n\nexport default function AccountAPIService(config) {\n    const defaults = {\n        account: undefined,\n        transport: {}\n    };\n   \n    function getHTTP(overrides) {\n        const serviceOptions = getDefaultOptions(defaults, config, {\n            apiEndpoint: API_ENDPOINT\n        }, overrides);\n        if (!serviceOptions.account) {\n            throw new Error('No account passed to getAccountSettings');\n        }\n        serviceOptions.transport.url += serviceOptions.account;\n        const http = new TransportFactory(serviceOptions.transport);\n        return http;\n    }\n\n    const publicAPI = {\n        /**\n         * Get current settings for account\n         * @param {object} [options] \n         * @returns {Promise}\n         */\n        getAccountSettings: function (options) {\n            const http = getHTTP(options);\n            return http.get();\n        },\n    };\n    return publicAPI;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/account-api-service/index.js","/**\n *\n * ## Project API Adapter\n *\n * The Project API allows reading/writing project settings. An author/admin project token is required for most operations.\n *\n *      var ps = new F.service.Project({  account: 'acme', project: 'sample', token: 'author-or-project-access-token' });\n *      ps.getProjectSettings();\n */\n\nimport { getDefaultOptions } from 'service/service-utils';\nimport TransportFactory from 'transport/http-transport-factory';\n\nconst API_ENDPOINT = 'project';\nconst MULTIPLAYER_ENDPOINT = 'multiplayer/project';\n\nexport default function ProjectAPIService(config) {\n    const defaults = {\n        account: undefined,\n        project: undefined,\n        transport: {}\n    };\n   \n    function getHTTP(overrides) {\n        const serviceOptions = getDefaultOptions(defaults, config, {\n            apiEndpoint: API_ENDPOINT\n        }, overrides);\n        const http = new TransportFactory(serviceOptions.transport);\n        return http;\n    }\n\n    const publicAPI = {\n        /**\n         * Get current settings for project\n         * \n         * @param {object} [options] \n         * @returns {Promise}\n         */\n        getProjectSettings: function (options) {\n            const http = getHTTP(options);\n            return http.get();\n        },\n        /**\n         * Update settings for project\n         * \n         * @param {object} settings New settings to apply \n         * @param {object} [options] \n         * @returns {Promise}\n         */\n        updateProjectSettings: function (settings, options) {\n            const http = getHTTP(options);\n            return http.patch(settings);\n        },\n\n        /**\n         * Get current multiplayer settings for project\n         * \n         * @param {object} [options] \n         * @returns {Promise}\n         */\n        getMultiplayerSettings: function (options) {\n            const overrides = $.extend({}, options, {\n                apiEndpoint: MULTIPLAYER_ENDPOINT\n            });\n            const http = getHTTP(overrides);\n            return http.get();\n        },\n\n        /**\n         * Update multiplayer settings for project - usually used to add roles on the fly\n         * \n         * @param {object} settings \n         * @param {{ autoCreate: boolean}} [options] \n         * @param {object} [serviceOverrides] \n         * @returns {Promise}\n         */\n        updateMultiplayerSettings: function (settings, options, serviceOverrides) {\n            const overrides = $.extend({}, serviceOverrides, {\n                apiEndpoint: MULTIPLAYER_ENDPOINT\n            });\n            const http = getHTTP(overrides);\n            if (options && options.autoCreate) {\n                return http.put(settings);\n            } else {\n                return http.patch(settings);\n            }\n        }\n    };\n    return publicAPI;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/service/project-api-service/index.js","// See integration-test-scenario-manager for usage examples\nimport RunManager from 'managers/run-manager';\nimport SavedRunsManager from 'managers/saved-runs-manager';\n\nimport { mergeRunOptions } from 'managers/run-strategies/strategy-utils';\nimport { normalizeOperations } from 'util/run-util';\n\nimport NoneStrategy from 'managers/run-strategies/none-strategy';\n\nimport StateService from 'service/state-api-adapter';\nimport RunService from 'service/run-api-service';\n\nimport BaselineStrategy from './scenario-strategies/baseline-strategy';\nimport LastUnsavedStrategy from './scenario-strategies/reuse-last-unsaved';\n\nfunction cookieNameFromOptions(prefix, config) {\n    var key = ['account', 'project', 'model'].reduce(function (accum, key) {\n        return config[key] ? accum + '-' + config[key] : accum; \n    }, prefix);\n    return key;\n}\n\n/**\n * @param {object} config \n * @property {object[]} [advanceOperation] Operations to perform on each run to indicate that the run is complete. Operations are executed [serially](../run-api-service/#serial). Defaults to calling the model operation `stepTo('end')`, which advances Vensim, Powersim, and SimLang models to the end. \n * @property {object} run Additional options to pass through to run creation (for e.g., `files`, etc.). Defaults to empty object.\n * @property {boolean} [includeBaseLine] Whether or not to auto-create and include a baseline run in this Scenario Manager. Defaults to `true`.\n * @property {object} [baseline] Additional configuration for the `baseline` run. \n * @property {string} [baseline.runName] Name of the baseline run. Defaults to 'Baseline'. \n * @property {string} [baseline.run] Additional options to pass through to run creation, specifically for the baseline run. These will override any options provided under `run`. Defaults to empty object. \n * @property {object} [baseline.scope]\n * @property {boolean} [baseline.scope.scopeByUser] Controls if a baseline should be created per **user** or per **group** True by default.\n * @property {boolean} [baseline.scope.scopeByGroup] Controls if a baseline should be created per **group** or per **project** True by default.\n * @property {object} [current] Additional configuration for the `current` run. \n * @property {string} [current.run] Additional options to pass through to run creation, specifically for the current run. These will override any options provided under `run`. Defaults to empty object.\n * @property {object} [savedRuns] Options to pass through to the `savedRuns` list. See the [Saved Runs Manager](./saved/) for complete description of available options. Defaults to empty object.\n */\nfunction ScenarioManager(config) {\n    var defaults = {\n        advanceOperation: [{ name: 'stepTo', params: ['end'] }],\n        run: {},\n        includeBaseLine: true,\n        baseline: {\n            runName: 'Baseline',\n            run: {}\n        },\n        current: {\n            run: {}\n        },\n        savedRuns: {}\n    };\n\n    var opts = $.extend(true, {}, defaults, config);\n    if (config && config.advanceOperation) {\n        opts.advanceOperation = config.advanceOperation; //jquery.extend does a poor job trying to merge arrays\n    }\n\n    var BaselineStrategyToUse = opts.includeBaseLine ? BaselineStrategy : NoneStrategy;\n    /**\n     * A [Run Manager](../run-manager/) instance containing a 'baseline' run to compare against; this is defined as a run \"advanced to the end\" of your model using just the model defaults. By default the \"advance\" operation is assumed to be `stepTo: end`, which works for time-based models in [Vensim](../../../model_code/vensim/), [Powersim](../../../model_code/powersim/), and [SimLang](../../../model_code/forio_simlang). If you're using a different language, or need to change this, just pass in a different `advanceOperation` option while creating the Scenario Manager. The baseline run is typically displayed in the project's UI as part of a run comparison table or chart.\n     * @return {RunManager}\n     */\n    this.baseline = new RunManager({\n        strategy: BaselineStrategyToUse,\n        sessionKey: cookieNameFromOptions.bind(null, 'sm-baseline-run'),\n        run: mergeRunOptions(opts.run, opts.baseline.run),\n        strategyOptions: {\n            baselineName: opts.baseline.runName,\n            initOperation: opts.advanceOperation,\n            scope: opts.baseline.scope,\n        }\n    });\n\n    /**\n     * A [SavedRunsManager](../saved-runs-manager/) instance containing a list of saved runs, that is, all runs that you want to use for comparisons. The saved runs are typically displayed in the project's UI as part of a run comparison table or chart.\n     * @return {SavedRunsManager}\n     */\n    this.savedRuns = new SavedRunsManager($.extend(true, {}, {\n        run: opts.run,\n    }, opts.savedRuns));\n\n    var origGetRuns = this.savedRuns.getRuns;\n    var me = this;\n    this.savedRuns.getRuns = function () {\n        var args = Array.apply(null, arguments);\n        return me.baseline.getRun().then(function () {\n            return origGetRuns.apply(me.savedRuns, args);\n        });\n    };\n\n    function scopeFromConfig(config) {\n        const currentTrackingKey = config.scope && config.scope.trackingKey ? `${config.scope.trackingKey}-current` : 'current';\n        return { scope: { trackingKey: currentTrackingKey } };\n    }\n    const mergedCurrentRunOptions = mergeRunOptions(opts.run, opts.current.run);\n    if (mergedCurrentRunOptions instanceof RunService) {\n        const config = mergedCurrentRunOptions.getCurrentConfig();\n        mergedCurrentRunOptions.updateConfig(scopeFromConfig(config));\n    } else {\n        $.extend(true, mergedCurrentRunOptions, scopeFromConfig(mergedCurrentRunOptions));\n    }\n    /**\n     * A [Run Manager](../run-manager/) instance containing a 'current' run; this is defined as a run that hasn't been advanced yet, and so can be used to set initial decisions. The current run is typically used to store the decisions being made by the end user.\n     * @return {RunManager}\n     */\n    this.current = new RunManager({\n        strategy: LastUnsavedStrategy,\n        sessionKey: cookieNameFromOptions.bind(null, 'sm-current-run'),\n        run: mergedCurrentRunOptions,\n    });\n\n    /**\n     * Clones the current run, advances this clone by calling the `advanceOperation`, and saves the cloned run (it becomes part of the `savedRuns` list). Additionally, adds any provided metadata to the cloned run; typically used for naming the run. The current run is unchanged and can continue to be used to store decisions being made by the end user.\n     *\n     * Available only for the Scenario Manager's `current` property (Run Manager). \n     *\n     * @example\n     * var sm = new F.manager.ScenarioManager();\n     * sm.current.saveAndAdvance({'myRunName': 'sample policy decisions'});\n     * \n     * @param {object} metadata Metadata to save, for example, `{ name: 'Run Name' }`\n     * @return {Promise}\n     */\n    this.current.saveAndAdvance = function (metadata) {\n        function clone(run) {\n            var sa = new StateService(mergedCurrentRunOptions);\n            var advanceOpns = normalizeOperations(opts.advanceOperation); \n            //run i'm cloning shouldn't have the advance operations there by default, but just in case\n            return sa.clone({ runId: run.id, exclude: advanceOpns.ops }).then(function (response) {\n                var rs = new RunService(me.current.run.getCurrentConfig());\n                return rs.load(response.run);\n            });\n        }\n        function markSaved(run) {\n            return me.savedRuns.save(run.id, metadata).then(function (savedResponse) {\n                return $.extend(true, {}, run, savedResponse);\n            });\n        }\n        function advance(run) {\n            var rs = new RunService($.extend(true, {}, mergedCurrentRunOptions, run));\n            return rs.serial(opts.advanceOperation).then(function () {\n                return run;\n            });\n        }\n        return me.current\n            .getRun()\n            .then(clone)\n            .then(advance)\n            .then(markSaved);\n    };\n}\n\nexport default ScenarioManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/scenario-manager/index.js","/**\n * The `new-if-initialized` strategy creates a new run if the current one is in memory or has its `initialized` field set to `true`. The `initialized` field in the run record is automatically set to `true` at run creation, but can be changed.\n * \n * This strategy is useful if your project is structured such that immediately after a run is created, the model is executed completely (for example, a Vensim model is stepped to the end). It is similar to the `new-if-missing` strategy, except that it checks a field of the run record.\n * \n * Specifically, the strategy is:\n *\n * * Check the `sessionKey` cookie. \n *  * This cookie is set by the [Run Manager](../run-manager/) and configurable through its options.\n *  * If the cookie exists, check whether the run is in memory or only persisted in the database. Additionally, check whether the run's `initialized` field is `true`. \n *      * If the run is in memory, create a new run.\n *      * If the run's `initialized` field is `true`, create a new run.\n *      * Otherwise, use the existing run.\n *  * If the cookie does not exist, create a new run for this end user.\n *  \n *  @deprecated Consider using `reuse-last-initialized` instead\n */\n\n'use strict';\nvar classFrom = require('../../../util/inherit');\nvar ConditionalStrategy = require('../conditional-creation-strategy');\n\nvar __super = ConditionalStrategy.prototype;\n\nvar Strategy = classFrom(ConditionalStrategy, {\n    constructor: function (options) {\n        __super.constructor.call(this, this.createIf, options);\n        console.warn('This strategy is deprecated; all runs now default to being initialized by default making this redundant. Consider using `reuse-last-initialized` instead.');\n    },\n\n    createIf: function (run, headers) {\n        return headers.getResponseHeader('pragma') === 'persistent' || run.initialized;\n    }\n});\n\nmodule.exports = Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/deprecated/new-if-initialized-strategy.js","/**\n * The `new-if-persisted` strategy creates a new run when the current one becomes persisted (end user is idle for a set period), but otherwise uses the current one. \n * \n * Using this strategy means that when end users navigate between pages in your project, or refresh their browsers, they will still be working with the same run. \n * \n * However, if they are idle for longer than your project's **Model Session Timeout** (configured in your project's [Settings](../../../updating_your_settings/)), then their run is persisted; the next time they interact with the project, they will get a new run. (See more background on [Run Persistence](../../../run_persistence/).)\n * \n * This strategy is useful for multi-page projects where end users play through a simulation in one sitting, stepping through the model sequentially (for example, a Vensim model that uses the `step` operation) or calling specific functions until the model is \"complete.\" However, you will need to guarantee that your end users will remain engaged with the project from beginning to end &mdash; or at least, that if they are idle for longer than the **Model Session Timeout**, it is okay for them to start the project from scratch (with an uninitialized model). \n * \n * Specifically, the strategy is:\n *\n * * Check the `sessionKey` cookie.\n *   * This cookie is set by the [Run Manager](../run-manager/) and configurable through its options.\n *   * If the cookie exists, check whether the run is in memory or only persisted in the database. \n *      * If the run is in memory, use the run.\n *      * If the run is only persisted (and not still in memory), create a new run for this end user.\n *      * If the cookie does not exist, create a new run for this end user.\n *\n * @deprecated The run-service now sets a header to automatically bring back runs into memory\n */\n\n'use strict';\nvar classFrom = require('../../../util/inherit');\nvar ConditionalStrategy = require('../conditional-creation-strategy');\n\nvar __super = ConditionalStrategy.prototype;\n\nvar Strategy = classFrom(ConditionalStrategy, {\n    constructor: function (options) {\n        __super.constructor.call(this, this.createIf, options);\n        console.warn('This strategy is deprecated; the run-service now sets a header to automatically bring back runs into memory');\n    },\n\n    createIf: function (run, headers) {\n        return headers.getResponseHeader('pragma') === 'persistent';\n    }\n});\n\nmodule.exports = Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/deprecated/new-if-persisted-strategy.js","/**\n * The `reuse-never` strategy always creates a new run for this end user irrespective of current state. This is equivalent to calling `F.service.Run.create()` from the [Run Service](../run-api-service/) every time. \n * \n * This strategy means that every time your end users refresh their browsers, they get a new run. \n * \n * This strategy can be useful for basic, single-page projects. This strategy is also useful for prototyping or project development: it creates a new run each time you refresh the page, and you can easily check the outputs of the model. However, typically you will use one of the other strategies for a production project.\n *\n */\n\nimport classFrom from '../../util/inherit';\nimport ConditionalStrategy from './conditional-creation-strategy';\n\nconst __super = ConditionalStrategy.prototype;\n\nconst Strategy = classFrom(ConditionalStrategy, {\n    constructor: function (options) {\n        __super.constructor.call(this, this.createIf, options);\n    },\n\n    createIf: function (run, headers) {\n        // always create a new run!\n        return true;\n    }\n});\n\nStrategy.allowRunIDCache = false;\n\nexport default Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/reuse-never.js","import classFrom from '../../util/inherit';\nimport ConditionalStrategy from './conditional-creation-strategy';\n\nvar __super = ConditionalStrategy.prototype;\n\n/**\n * The `reuse-per-session` strategy creates a new run when the current one is not in the browser cookie.\n *\n * Using this strategy means that when end users navigate between pages in your project, or refresh their browsers, they will still be working with the same run. However, if end users log out and return to the project at a later date, a new run is created.\n *\n * This strategy is useful if your project is structured such that immediately after a run is created, the model is executed completely (for example, a Vensim model that is stepped to the end as soon as it is created). In contrast, if end users play with your project for an extended period of time, executing the model step by step, the `reuse-across-sessions` strategy is probably a better choice (it allows end users to pick up where they left off, rather than starting from scratch each browser session).\n *\n * Specifically, the strategy is:\n *\n * * Check the `sessionKey` cookie.\n *     * This cookie is set by the [Run Manager](../run-manager/) and configurable through its options.\n *     * If the cookie exists, use the run id stored there.\n *     * If the cookie does not exist, create a new run for this end user.\n */\nvar Strategy = classFrom(ConditionalStrategy, {\n    constructor: function (options) {\n        __super.constructor.call(this, this.createIf, options);\n    },\n\n    createIf: function (run, headers) {\n        // If user refreshed and the faciliator deleted the run, create a new run\n        if (run.trashed) {\n            return true;\n        }\n        // if we are here, it means that the run exists... so we don't need a new one\n        return false;\n    }\n});\n\nexport default Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/reuse-per-session.js","import classFrom from 'util/inherit';\nimport IdentityStrategy from './none-strategy';\nimport { injectFiltersFromSession, injectScopeFromSession } from 'managers/run-strategies/strategy-utils';\n\n/**\n * The `reuse-across-sessions` strategy returns the latest (most recent) run for this user, whether it is in memory or not. If there are no runs for this user, it creates a new one.\n *\n * This strategy is useful if end users are using your project for an extended period of time, possibly over several sessions. This is most common in cases where a user of your project executes the model step by step (as opposed to a project where the model is executed completely, for example, a Vensim model that is immediately stepped to the end).\n *\n * Specifically, the strategy is:\n *\n * * Check if there are any runs for this end user.\n *     * If there are no runs (either in memory or in the database), create a new one.\n *     * If there are runs, take the latest (most recent) one.\n *\n */\nconst Strategy = classFrom(IdentityStrategy, {\n    /**\n     * @param {object} [options] strategy options\n     * @param {object} [options.filter ] Additional filters to retreive a run (e.g { saved: true }) etc\n     */\n    constructor: function Strategy(options) {\n        const defaults = {\n            filter: {},\n        };\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = $.extend(true, {}, defaults, strategyOptions);\n    },\n\n    reset: function (runService, userSession, options) {\n        const opt = injectScopeFromSession(runService.getCurrentConfig(), userSession);\n        return runService\n            .create(opt, options)\n            .then(function (run) {\n                run.freshlyCreated = true;\n                return run;\n            });\n    },\n\n    getRun: function (runService, userSession, runSession, options) {\n        const filter = injectFiltersFromSession(this.options.filter, userSession);\n        return runService.query(filter, {\n            startrecord: 0,\n            endrecord: 0,\n            sort: 'created',\n            direction: 'desc'\n        }).then((runs)=> {\n            if (!runs.length || runs[0].trashed) {\n                // If no runs exist or the most recent run is trashed, create a new run\n                return this.reset(runService, userSession, options);\n            }\n            return runs[0];\n        });\n    }\n});\n\nexport default Strategy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/reuse-across-sessions.js","/**\n * Use this strategy you already have a runid you want to use with the Run Manager (Usually used for impersonating a run)\n * \n *  Example:\n *  ```js\n        var runOptions = window.location.search.indexOf('impersonate') === -1 ? 'reuse-across-sessions': {\n            strategy: 'use-specific-run',\n            strategyOptions: {\n                runId: 'runidToImpersonate' //usually passed on in the url\n            }\n        }\n        var rs = new F.Manager.Run(runOptions);\n    ```\n */\nexport default class UseSpecificRun {\n    /**\n     * @param {object} [options] \n     * @property {string} [options.runId] Id of Run to use\n     */\n    constructor(options) {\n        const defaults = {\n            runId: null\n        };\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = $.extend(true, {}, defaults, strategyOptions);\n        if (!this.options.runId) {\n            throw new Error('Missing required parameter `runId`: Specifying an runId is required for \"Use Run\" strategy');\n        }\n    }\n\n    reset(runService, userSession, options) {\n        throw new Error('\"Use Run\" strategy does not support reset');\n    }\n\n    getRun(runService, userSession, runSession, options) {\n        return runService.load(this.options.runId);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-strategies/use-specific-run-strategy.js","export function reset(params, options, manager) {\n    return manager.reset(options);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/run-manager/special-operations.js","import { parseContentRange } from 'util/run-util';\n\n/**\n * Recursively fetches from any API which supports content-range\n * \n * @param {function(Number, Number):Promise<object[], string, XMLHttpRequest>} fetchFn Function which returns a promise (presumably an API call)\n * @param {object} [options] \n * @param {Number} [options.startRecord]\n * @param {Number} [options.endRecord]\n * @param {Number} [options.recordsPerFetch]\n * @param {function(Number, Number):Promise<object[]>} [options.recordsPerFetch]\n * @param {Function} [options.contentRangeParser]\n * @return {Promise.<object[]>}\n */\nexport default function bulkFetchRecords(fetchFn, options) {\n    const ops = $.extend({}, {\n        startRecord: 0,\n        endRecord: Infinity,\n        \n        recordsPerFetch: 100,\n        contentRangeParser: (currentRecords, xhr)=> xhr && parseContentRange(xhr.getResponseHeader('content-range')),\n\n        onData: ()=> {}\n    }, options);\n\n    function getRecords(fetchFn, options, recordsFoundSoFar) {\n        const endRecord = Math.min(options.startRecord + options.recordsPerFetch, options.endRecord);\n        return fetchFn(options.startRecord, endRecord).then(function (currentRecords, status, xhr) {\n            const allFound = (recordsFoundSoFar || []).concat(currentRecords);\n            const recordsLeft = ops.contentRangeParser(allFound, xhr);\n            options.onData(currentRecords, recordsLeft);\n            \n            const recordsNeeded = recordsLeft && Math.min(recordsLeft.total, ops.endRecord - ops.startRecord);\n            if (recordsLeft && recordsNeeded > recordsLeft.end + 1) {\n                const nextFetchOptions = $.extend({}, options, {\n                    startRecord: recordsLeft.end + 1,\n                });\n                return getRecords(fetchFn, nextFetchOptions, allFound);\n            }\n            return $.Deferred().resolve(allFound, status, xhr).promise();\n        });\n    }\n\n    const prom = getRecords(fetchFn, ops);\n    return prom;\n} \n\n\n// WEBPACK FOOTER //\n// ./src/util/bulk-fetch-records.js","import ReuseinitStrategy from 'managers/run-strategies/reuse-last-initialized';\n\n/**\n * @description\n * ## Baseline\n *\n * An instance of a [Run Manager](../../run-manager/) with a baseline strategy is included automatically in every instance of a [Scenario Manager](../), and is accessible from the Scenario Manager at `.baseline`.\n *\n * A baseline is defined as a run \"advanced to the end\" using just the model defaults. The baseline run is typically displayed in the project's UI as part of a run comparison table or chart.\n *\n * The `baseline` strategy looks for the most recent run named as 'Baseline' (or named as specified in the `baseline.runName` [configuration option of the Scenario Manager](../#configuration-options)) that is flagged as `saved` and not `trashed`. If the strategy cannot find such a run, it creates a new run and immediately executes a set of initialization operations. \n *\n * Comparing against a baseline run is optional in a Scenario Manager; you can [configure](../#configuration-options) your Scenario Manager to not include one. See [more information](../#properties) on using `.baseline` within the Scenario Manager.\n *\n * See also: [additional information on run strategies](../../strategies/).\n * \n * @constructor\n * @param {object} options\n * @property {string} [baselineName] Name of the baseline run. Defaults to 'Baseline'. \n * @property {object[]} [initOperation] Operations to perform on each run to indicate that the run is complete. Operations are executed [serially](../run-api-service/#serial). Defaults to calling the model operation `stepTo('end')`, which advances Vensim, Powersim, and SimLang models to the end. \n */\nexport default function BaselineStrategy(options) {\n    var defaults = {\n        baselineName: 'Baseline',\n        initOperation: [{ stepTo: 'end' }]\n    };\n    var strategyOptions = options ? options.strategyOptions : {};\n    var opts = $.extend({}, defaults, strategyOptions);\n\n    const reuseStrategyOptions = {\n        initOperation: opts.initOperation,\n        flag: {\n            saved: true,\n            trashed: false,\n            isBaseline: true,\n            name: opts.baselineName\n        },\n        scope: opts.scope,\n    };\n\n    return new ReuseinitStrategy({\n        strategyOptions: reuseStrategyOptions\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/scenario-manager/scenario-strategies/baseline-strategy.js","import { injectFiltersFromSession } from 'managers/run-strategies/strategy-utils';\nimport { injectScopeFromSession } from 'managers/run-strategies/strategy-utils';\n\n//TODO: Make a more generic version of this called 'reuse-by-matching-filter';\n\n/**\n * @description\n * ## Current (reuse-last-unsaved)\n *\n * An instance of a [Run Manager](../../run-manager/) with this strategy is included automatically in every instance of a [Scenario Manager](../), and is accessible from the Scenario Manager at `.current`.\n *\n * The `reuse-last-unsaved` strategy returns the most recent run that is not flagged as `trashed` and also not flagged as `saved`.\n * \n * Using this strategy means that end users continue working with the most recent run that has not been explicitly flagged by the project. However, if there are no runs for this end user, a new run is created.\n * \n * Specifically, the strategy is:\n *\n * * Check the `saved` and `trashed` fields of the run to determine if the run has been explicitly saved or explicitly flagged as no longer useful.\n *     * Return the most recent run that is not `trashed` and also not `saved`.\n *     * If there are no runs, create a new run for this end user. \n *\n * See [more information](../#properties) on using `.current` within the Scenario Manager.\n *\n * See also: [additional information on run strategies](../../strategies/).\n */\n\nclass ReuseLastUnsaved {\n    constructor(options) {\n        const strategyOptions = options ? options.strategyOptions : {};\n        this.options = strategyOptions;\n    }\n\n    reset(runService, userSession, options) {\n        const runConfig = runService.getCurrentConfig();\n\n        const scoped = injectScopeFromSession(runConfig, userSession);\n        const opt = $.extend(true, {}, scoped);\n        return runService.create(opt, options).then(function (createResponse) {\n            return $.extend(true, {}, createResponse, { freshlyCreated: true });\n        });\n    }\n\n    getRun(runService, userSession, opts) {\n        const runConfig = runService.getCurrentConfig();\n        const filter = injectFiltersFromSession({ \n            trashed: false,\n            saved: false,\n            model: runConfig.model,\n        }, userSession);\n        const me = this;\n        const outputModifiers = { \n            startrecord: 0,\n            endrecord: 0,\n            sort: 'created', \n            direction: 'desc'\n        };\n        return runService.query(filter, outputModifiers).then(function (runs) {\n            if (!runs.length) {\n                return me.reset(runService, userSession);\n            }\n            return runs[0];\n        });\n    }\n}\nReuseLastUnsaved.requiresAuth = false;\nexport default ReuseLastUnsaved;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/scenario-manager/scenario-strategies/reuse-last-unsaved.js","import UserService from 'service/user-api-adapter';\nimport MemberService from 'service/member-api-adapter';\nimport AuthManager from 'managers/auth-manager';\n\nimport { getDefaultOptions } from 'service/service-utils';\n\nexport function parseUsers(userList) {\n    const expectedCols = [\n        { label: 'Email', value: 'userName' },\n        { label: 'First Name', value: 'firstName' },\n        { label: 'Last Name', value: 'lastName' },\n        { label: 'Password', value: 'password' }\n    ];\n    const parsed = userList.split(/\\r\\r|\\r|\\n/).reduce((accum, row, index)=> {\n        const splitter = row && (/\\t/).test(row) ? /\\t/ : ',';\n        const rowContents = row.split(splitter);\n        if (!rowContents.length) {\n            return accum;\n        }\n        const missingFields = expectedCols.filter((col, index)=> rowContents[index] === undefined || !rowContents[index].trim());\n        if (missingFields.length) {\n            const missingLabels = missingFields.map((f)=> f.label);\n            accum.invalid.push({\n                userName: rowContents[0] || `Line ${index + 1}`,\n                message: `Missing ${missingLabels.join(', ')}`,\n                reason: 'MISSING_FIELDS',\n                context: { missingFields: missingLabels }\n            });\n            return accum;\n        }\n        const user = expectedCols.reduce((accum, col, index)=> {\n            const val = rowContents[index].trim();\n            accum[col.value] = val;\n            return accum;\n        }, {});\n\n        accum.valid.push(user);\n        return accum;\n    }, {\n        valid: [],\n        invalid: [],\n    });\n    return parsed;\n}\n\nconst ERROR_TYPES = {\n    EMPTY_USERS: 'EMPTY_USERS',\n    NO_GROUP_PROVIDED: 'NO_GROUP_PROVIDED',\n    API_REJECT: 'API_REJECT',\n    GROUP_LIMIT_EXCEEDED: 'GROUP_LIMIT_EXCEEDED',\n};\n\n/**\n * @description\n * ## User Manager\n *\n * The User Manager provides a high-level abstraction over the User Service and Member Services to perform common simulation actions, like uploading users into a group.\n *\n * ```js\n     var UserManager = F.manager.User;\n     var um = new UserManager(getRunParams());\n     um.uploadUsersToGroup($('#userTextarea').val()).then(function(){ alert('Upload sucess!'); }).catch(function (res) {\n         if (res.type === UserManager.errors.EMPTY_USERS) {\n             alert('No users specified to upload');\n         } else if (res.type === UserManager.errors.NO_GROUP_PROVIDED) {\n             alert('No group found. Create a group and login as a facilitator to upload users');\n         } else {\n             alert('Unknown error, please try again');\n         }\n     });\n  * ```\n  * @param {AccountAPIServiceOptions} config\n  */\nclass UserManager {\n    constructor(config) {\n        const defaults = {\n            account: undefined,\n        };\n        const serviceOptions = getDefaultOptions(defaults, config);\n        this.serviceOptions = serviceOptions;\n    }\n\n    /**\n     *  Bulk creates user accounts and adds them to a group. Input userlist is typically the string contents of a textarea with user data.\n     * \n     * @example\n     * um.upload($('#textareaWithUsers').val());\n     * \n     * @param {string} userList list of users seperated by newlines, with each line containing email, firstname, lastname, password separated by tabs/commas\n     * @param {string} [groupId] id of group to upload to. Defaults to getting current group from session\n     * @param {object} [options]  overrides for service options\n     * @returns {JQuery.Promise}\n     */\n    uploadUsersToGroup(userList, groupId, options) {\n        if (!userList || !userList.trim()) {\n            return $.Deferred().reject({ \n                type: ERROR_TYPES.EMPTY_USERS,\n                message: 'uploadUsersToGroup: No users specified to upload.' \n            }).promise();\n        }\n        const serviceOptions = getDefaultOptions(this.serviceOptions, options);\n        if (!groupId) {\n            const am = new AuthManager(serviceOptions);\n            const session = am.getCurrentUserSessionInfo();\n            groupId = session.groupId;\n\n            if (!groupId) {\n                return $.Deferred().reject({ \n                    type: ERROR_TYPES.NO_GROUP_PROVIDED,\n                    message: 'uploadUsersToGroup: No group specified, and no session available to pick from.' \n                }).promise();\n            }\n        }\n\n        const usersToAdd = parseUsers(userList.trim());\n        if (!usersToAdd.valid.length) {\n            return $.Deferred().resolve({\n                errors: usersToAdd.invalid,\n                created: [],\n                duplicates: []\n            }).promise();\n        }\n\n        const userService = new UserService(serviceOptions);\n        const memberService = new MemberService(serviceOptions);\n        return userService.createUsers(usersToAdd.valid).then((userRes)=> {\n            const validUsers = [].concat(userRes.saved, userRes.updated, userRes.duplicate);\n            const validIds = validUsers.map((u)=> u.id);\n            const userWithErrors = userRes.errors.map((e)=> {\n                return $.extend(true, e, {\n                    reason: ERROR_TYPES.API_REJECT,\n                    context: e\n                });\n            });\n            userRes.errors = [].concat(userWithErrors, usersToAdd.invalid);\n            return memberService.addUsersToGroup(validIds, groupId).then(()=> userRes, function handleMemberError(memberXHR) {\n                const memberErr = memberXHR.responseJSON;\n                const isGroupLimitErr = memberErr && memberErr.message && memberErr.message.match(/exceeded your group limit\\(([0-9]+)\\)/i);\n                if (!isGroupLimitErr) {\n                    throw memberErr;\n                }\n                \n                const groupLimit = +isGroupLimitErr[1];\n                const skippedUsers = validUsers.slice(groupLimit).map((u)=> {\n                    return $.extend({}, u, { reason: ERROR_TYPES.GROUP_LIMIT_EXCEEDED, message: 'Exceeded group limit' });\n                });\n                \n                function excludingSkipped(users, skipped) {\n                    return users.filter((u)=> {\n                        const isValid = !skipped.find((su)=> su.userName === u.userName);\n                        return isValid;\n                    });\n                }\n                return {\n                    errors: [].concat(userRes.errors, skippedUsers),\n                    saved: excludingSkipped(userRes.saved, skippedUsers),\n                    updated: excludingSkipped(userRes.updated, skippedUsers),\n                    duplicate: excludingSkipped(userRes.duplicate, skippedUsers),\n                };\n            });\n        }).then((res)=> {\n            return {\n                errors: res.errors,\n                duplicates: res.duplicate, //pluralizing for consistency\n                created: [].concat(res.saved, res.updated), //no real distinction between the two so combining\n            };\n        });\n    }\n}\n\nUserManager.errors = ERROR_TYPES;\n\nexport default UserManager;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/user-manager/index.js","import AuthService from 'service/v3/auth-api-service-v3';\nimport MemberService from 'service/v3/member-api-adapter-v3';\nimport UserService from 'service/user-api-adapter';\nimport { rejectPromise } from 'util/index';\n\nimport SessionManager from 'store/session-manager';\n\n\nconst errorCodes = {\n    AUTHORIZATION_FAILURE: 'AUTHORIZATION_FAILURE',\n    MFA_REQUIRED: 'MFA_REQUIRED',\n    MULTIPLE_GROUPS: 'MULTIPLE_GROUPS',\n};\nexport default class AuthManagerV3 {\n\n    constructor(config) {\n        const defaults = {\n\n        };\n        const serviceOptions = $.extend({}, defaults, config);\n        this.serviceOptions = serviceOptions;\n\n        this.errors = errorCodes;\n    }\n\n\n    getAuthService(config) {\n        const opts = $.extend({}, this.serviceOptions, config);\n        const as = new AuthService(opts);\n        return as;\n    }\n    getMemberService(config) {\n        const opts = $.extend({}, this.serviceOptions, config);\n        const ms = new MemberService(opts);\n        return ms;\n    }\n    getUserService(config) {\n        const opts = $.extend({}, this.serviceOptions, config);\n        const us = new UserService(opts);\n        return us;\n    }\n    login(loginParams, options) {\n        const overridenServiceOptions = $.extend(true, {}, this.serviceOptions, options);\n        const as = this.getAuthService(overridenServiceOptions);\n\n        const params = Object.assign({}, loginParams, { objectType: 'user' });\n        return as.login(params).catch((err, a, b, c)=> {\n            if (err.responseJSON) err = err.responseJSON;\n            const code = err && err.information && err.information.code;\n            if (code === 'AUTHORIZATION_FAILURE') {\n                return rejectPromise(code, 'Could not login, please check username / password and try again.');\n            } else if (code === 'PASSWORD_EXPIRATION') {\n                return rejectPromise(code, 'Your password has expired.  Please contact your administrator and request a password reset.');\n            } else if (code === 'MULTI_FACTOR_AUTHENTICATION_MISSING') {\n                return rejectPromise(code, 'Multi factor authentication has been enabled for this project.');\n            } else if (code === 'MULTI_FACTOR_AUTHENTICATION_FAILURE') {\n                return rejectPromise(code, 'The provided Authorization Code is invalid.');\n            } else if (code === 'MULTI_FACTOR_AUTHENTICATION_REQUIRED') {\n                return rejectPromise(code, 'This project requires multi factor authentication.');\n            }\n            throw err;\n\n            // if (err.sta)\n            // handle multi group error\n            // handle mfa error\n        }).then((res)=> {\n            if (!res.groupKey && !res.multipleGroups) {\n                return rejectPromise('NO_GROUPS', 'User is not a member of a simulation group.');\n            }\n            if (!res.groupKey && res.multipleGroups && res.token) {\n                const overridenServiceOptions = $.extend(true, { token: res.token }, this.serviceOptions, options);\n                const ms = this.getMemberService(overridenServiceOptions);\n                return ms.getGroupsForUser().then((groups)=> rejectPromise('MULTIPLE_GROUPS', 'User is part of multiple groups for this project. Please choose one.', {\n                    possibleGroups: groups.map((group)=> {\n                        group.id = group.groupKey;\n                        return group;\n                    }),\n                }));\n            } else {\n                const groupInfo = {\n                    groupId: res.groupKey,\n                    groupName: res.groupName,\n                    isFac: res.groupRole && res.groupRole !== 'PARTICIPANT'\n                };\n                const sessionInfo = Object.assign({}, groupInfo, {\n                    auth_token: res.session,\n                    userName: res.userHandle,\n                    account: res.accountShortName,\n                    project: res.projectShortName,\n                    v3UserKey: res.userKey,\n\n                    groups: [groupInfo],\n                    isTeamMember: false,\n                });\n                return sessionInfo;\n            }\n        }).then((res)=> {\n\n            // if res is group info, just return\n            if (!res.v3UserKey) {\n                return res;\n\n            } else {\n                // get v2 user id based on v3 user key\n                const overridenServiceOptions = $.extend(true, { token: res.auth_token }, this.serviceOptions, options);\n                const us = this.getUserService(overridenServiceOptions);\n                return us.translateV3UserKeys([res.v3UserKey]).then((userIdList)=> {\n\n                    if (!Array.isArray(userIdList) || userIdList.length === 0) {\n                        var resp = { status: 401, statusMessage: 'No user id found.' };\n                        return Promise.reject(resp);\n                    }\n\n                    res.userId = userIdList[0];\n                    const sm = new SessionManager(overridenServiceOptions);\n                    sm.saveSession(res);\n                    return res;\n                });\n            }\n        });\n    }\n\n    logout(options) {\n        const overridenServiceOptions = $.extend(true, {}, this.serviceOptions, options);\n        const sm = new SessionManager(overridenServiceOptions);\n        sm.removeSession();\n        return Promise.resolve();\n    }\n    isLoggedIn() {\n        var session = this.getCurrentUserSessionInfo();\n        return !!(session && session.userId);\n    }\n    getCurrentUserSessionInfo(options) {\n        const overridenServiceOptions = $.extend(true, {}, this.serviceOptions, options);\n        const sm = new SessionManager(overridenServiceOptions);\n        return sm.getSession();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/managers/auth-manager-v3/index.js","import TransportFactory from 'transport/http-transport-factory';\nimport { getDefaultOptions } from 'service/service-utils';\n\nexport default class AuthServiceV3 {\n    constructor(config) {\n\n        const defaults = {\n            server: {\n                versionPath: 'v3'\n            }\n        };\n        const serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: 'authentication' });\n        if (serviceOptions.transport && serviceOptions.transport.headers) {\n            delete serviceOptions.transport.headers.Authorization;\n        }\n        var http = new TransportFactory(serviceOptions.transport);\n        this.http = http;\n    }\n\n    /**\n     * Logs user in, returning the user access token.\n     *\n     * If no `userName` or `password` were provided in the initial configuration options, they are required in the `options` here. If no `account` was provided in the initial configuration options and the `userName` is for an [end user](../../../glossary/#users), the `account` is required as well.\n     *\n     * @example\n     * auth.login({\n     *     userName: 'jsmith',\n     *     password: 'passw0rd',\n     *     account: 'acme-simulations' })\n     * .then(function (identification) {\n     *     console.log(\"user access token is: \", identification.token);\n     * });\n     *\n     *\n     * @param {{ handle: string, password?: string, groupKey?:string, mfaCode?:Number }} params\n     * @param {Object} [options] Overrides for configuration options.\n     * @returns {Promise}\n     */\n    login(params, options) {\n        var httpOptions = $.extend(true, {}, this.serviceOptions, options);\n        if (!params || !params.handle) {\n            var resp = { status: 401, statusMessage: 'No user handle specified.' };\n            return Promise.reject(resp);\n        }\n        return this.http.post(params, httpOptions);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/v3/auth-api-service-v3/index.js","import TransportFactory from 'transport/http-transport-factory';\nimport { getDefaultOptions } from 'service/service-utils';\n\nexport default class MemberAPIServiceV3 {\n    constructor(config) {\n\n        const defaults = {\n            server: {\n                versionPath: 'v3'\n            },\n        };\n        const serviceOptions = getDefaultOptions(defaults, config, { apiEndpoint: 'group/member' });\n        var http = new TransportFactory(serviceOptions.transport);\n        this.http = http;\n    }\n\n    getGroupsForUser(options) {\n        const httpOptions = $.extend(true, {}, this.serviceOptions, options);\n        return this.http.get('', httpOptions);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/v3/member-api-adapter-v3/index.js","import SavedRunsManager from 'managers/saved-runs-manager';\nimport SettingsService from './settings-service';\n\nimport ReuseWithTracking from 'managers/run-strategies/reuse-by-tracking-key';\nimport ReuseWithTrackingMultiplayer from 'managers/run-strategies/multiplayer-with-tracking-key';\n\nimport PubSub from 'util/pubsub';\nimport { omit } from 'util/object-util';\nimport { rejectPromise } from 'util/index';\nimport WorldAPIAdapter from 'service/world-api-adapter';\n\nconst actions = {\n    SETTINGS_DELETED: 'SETTINGS_DELETED',\n    SETTINGS_ACTIVATED: 'SETTINGS_ACTIVATED',\n    DRAFT_CREATED: 'DRAFT_CREATED',\n    DRAFT_UPDATED: 'DRAFT_UPDATED',\n};\n\nclass SettingsManager {\n    /**\n     * @param {object} options\n     * @property {AccountAPIServiceOptions} options.run Parameters to pass on to run service (account / project / model / files etc.)\n     * @property {object} [options.settings]\n     * @property {string} [options.settings.collection]\n     * @property {boolean} [options.multiplayer] Set to true for multiplayer games.\n     * @property {boolean} [options.interruptRunsInProgress] Once settings are activated, this determines if existing runs can continue or new runs are forced. If multiplayer=true, this deletes the existing run for each world.\n     *\n     * @property {object | function(): object | function(): Promise<object>} [options.settings.collection]\n     */\n    constructor(options) {\n        const defaultSettings = {\n            run: {},\n            settings: {\n                collection: 'settings',\n                defaults: {},\n            },\n\n            multiplayer: false,\n            interruptRunsInProgress: true,\n        };\n\n        this.options = $.extend(true, {}, defaultSettings, options);\n        this.settings = new SettingsService(this.options);\n        this.channel = new PubSub();\n        this.state = {\n            subscription: null\n        };\n\n        if (this.options.interruptRunsInProgress && this.options.multiplayer) {\n            const defaultSaveAndActivate = this.settings.saveAndActivate;\n            this.settings.saveAndActivate = function () {\n                const originalArgs = Array.prototype.slice.call(arguments);\n                const ws = new WorldAPIAdapter(this.options.run);\n                return ws.list().then((worlds)=> {\n                    const deletionPromises = worlds.map((world)=> {\n                        return ws.deleteRun(world.id);\n                    });\n                    return $.when.apply(null, deletionPromises).then(()=> {\n                        return defaultSaveAndActivate.apply(this.settings, originalArgs);\n                    });\n                });\n            }.bind(this);\n        }\n    }\n\n    /**\n     * Get a cometd channel to subscribe to settings changes. The list of available topics are:\n     *\n     * | Topic | Description |\n     * | ------------- | ------------- |\n     * | ALL | All events |\n     * | SETTINGS_ACTIVATED | A new draft has been made active, or a currently active draft was edited |\n     * | SETTINGS_DELETED | A settings document (either current or historical)  was deleted |\n     * | DRAFT_CREATED | A new draft was created |\n     * | DRAFT_UPDATED | A draft document was updated  |\n     *\n     * @returns {Channel} Channel instance\n     */\n    getChannel() {\n        if (this.state.subscription) {\n            return this.channel;\n        }\n\n        const rawDataChannel = this.settings.ds.getChannel();\n        this.state.subscription = rawDataChannel.subscribe('', (res, meta)=> {\n            if (meta.subType === 'delete') {\n                this.channel.publish(actions.SETTINGS_DELETED, meta);\n            } else if (meta.subType === 'new') {\n                this.channel.publish(actions.DRAFT_CREATED, res);\n            } else if (meta.subType === 'update') {\n                if (res.isDraft) {\n                    this.channel.publish(actions.DRAFT_UPDATED, res);\n                } else {\n                    this.channel.publish(actions.SETTINGS_ACTIVATED, res);\n                }\n            } else {\n                console.warn('getChannel: Unknown subtype', res, meta);\n            }\n        });\n        this.channel.rawDataChannel = rawDataChannel;\n        return this.channel;\n    }\n\n    /**\n     * Use to get a strategy to use for user-runs.\n     *\n     * @example\n     * var settingsManager = new F.manager.Settings({\n     *      run: serviceOptions,\n     * });\n     * var strategy = settingsManager.getUserRunStrategy({\n     *  applySettings: (runService, settings, run)=> {\n     *      return run.variables().save(settings); // This example assumes all the settings are model variables, while they're typically a combination of model variables and run metadata (name / description etc.) and may involve calls to rs.save() in addition.\n     *  }});\n     * @param {object} options\n     * @property {function(settings):boolean} [options.allowCreateRun] Use if you want to disallow creating new runs for some combination of settings, for e.g. if the settings are invalid or the simulation is 'closed' to gameplay. Defaults to always allowing.\n     * @property {function(RunService, settings, run):void} [options.applySettings] Function to apply settings to given run.\n     * @returns {object} Run Strategy\n     */\n    getUserRunStrategy(options) {\n        const defaults = {\n            allowCreateRun: ()=> true,\n            applySettings: ()=> {},\n        };\n        const opts = $.extend({}, defaults, options);\n        const Strategy = this.options.multiplayer ? ReuseWithTrackingMultiplayer : ReuseWithTracking;\n        const strategy = new Strategy({\n            strategyOptions: {\n                settings: ()=> {\n                    return this.settings.getCurrentActive().then((settings)=> {\n                        if (!opts.allowCreateRun(settings)) {\n                            return rejectPromise('RUN_CREATION_NOT_ALLOWED', 'allowCreateRun check failed');\n                        }\n                        return settings || this.settings.getDefaults();\n                    }).then((settings)=> {\n                        const cleanedSettings = omit(settings, ['id', 'lastModified', 'isDraft', 'key']);\n                        return $.extend(true, {}, cleanedSettings, { trackingKey: settings.id || 'defaultSettings' });\n                    });\n                },\n                onCreate: opts.applySettings,\n            }\n        });\n        return strategy;\n    }\n\n    /**\n     * Helper method to create a [SavedRunsManager](../saved-runs-manager) instance with a preset tracking key\n     * @param {string} settingsId\n     * @return {SavedRunsManager}\n     */\n    getSavedRunsManagerForSetting(settingsId) {\n        const runOptions = $.extend(true, {}, this.options.run, { scope: {\n            trackingKey: settingsId\n        } });\n        const sm = new SavedRunsManager({ run: runOptions, scopeByUser: false });\n        return sm;\n    }\n\n    /**\n     * Helper method to get runs for most recent settings. Runs in the result, will have a `settings` property with the currently active settings set on it.\n     *\n     * @param {*} savedRunManagerParams See  [SavedRunsManager options](../saved-runs-manager/#getruns-variables-filter-modifiers-) for parameters\n     * @return {Promise<object[]>}\n     */\n    getRuns(savedRunManagerParams) {\n        return this.settings.getCurrentActive().then((settings)=> {\n            if (!settings) {\n                return [];\n            }\n            const sm = this.getSavedRunsManagerForSetting(settings.id);\n            return sm.getRuns.apply(sm, arguments).then((runs)=> {\n                return (runs || []).map((run)=> {\n                    return $.extend(true, run, { settings: settings });\n                });\n            });\n        });\n    }\n}\n\nSettingsManager.actions = actions;\n\nexport default SettingsManager;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/settings-manager/index.js","import DataService from 'service/data-api-service';\nimport { makePromise, result } from 'util/index';\nimport { omit } from 'util/object-util';\n\nfunction sanitize(obj) {\n    return omit(obj, ['id', 'lastModified']);\n}\n\n/**\n * Thin wrapper around Data API for managing settings. Meant to be used in conjunction with the Settings Manager.\n */\nclass SettingsService {\n    /**\n     * @param {object} opts\n     * @property {AccountAPIServiceOptions} opts.run Parameters passed on to run service\n     * @property {object} [opts.settings]\n     * @property {string} [opts.settings.collection]\n     * @property {object | function(): object | function(): Promise<object>} [opts.settings.collection]\n     */\n    constructor(opts) {\n        const defaults = {\n            run: {},\n            settings: {\n                collection: 'settings',\n                defaults: {},\n            },\n        };\n\n        this.options = $.extend(true, {}, defaults, opts);\n\n        const serviceOptions = $.extend(true, {}, this.options.run, {\n            root: this.options.settings.collection,\n            scope: DataService.SCOPES.GROUP\n        });\n        this.ds = new DataService(serviceOptions);\n\n        this.state = {\n            currentDraft: null\n        };\n    }\n\n    _updateDraftOrCreate(settings, meta) {\n        function getLastDraft() {\n            if (this.state.currentDraft) {\n                return $.Deferred().resolve(this.state.currentDraft).promise();\n            }\n            return this.getAll().then((settingsList)=> {\n                const lastSettings = settingsList[0] || {};\n                if (lastSettings.isDraft) {\n                    return lastSettings;\n                }\n                return this.ds.save({});\n            });\n        }\n\n        return getLastDraft.call(this).then((draft)=> {\n            const newSettings = $.extend(true, {}, draft, settings, meta);\n            return this.ds.saveAs(draft.id, sanitize(newSettings));\n        }).then((d)=> {\n            this.state.currentDraft = d.isDraft ? d : null;\n            return d;\n        });\n    }\n\n    /**\n     * Evaluates and returns default settings.\n     * @returns {Promise<object>}\n     */\n    getDefaults() {\n        const defaultsProm = makePromise(result(this.options.settings.defaults));\n        return defaultsProm;\n    }\n\n    /**\n     * @param {{excludeDrafts: boolean}} [options]\n     * @returns {Promise<object[]>}\n     */\n    getAll(options) {\n        return this.ds.load('', { sort: 'key', direction: 'desc' }).then((settingHistory)=> {\n            const sorted = settingHistory.sort((a, b)=> {\n                return a.key > b.key ? -1 : 1;\n            });\n            if (options && options.excludeDrafts) {\n                return sorted.filter((s)=> s.isDraft === false);\n            }\n            return sorted;\n        });\n    }\n\n    /**\n     * Returns currently active settings, or undefined if there are none.\n     * @returns {Promise<object>}\n     */\n    getCurrentActive() {\n        return this.getAll({ excludeDrafts: true }).then((activeSettings)=> {\n            const lastActive = activeSettings[0];\n            return lastActive;\n        });\n    }\n\n    /**\n     * Returns most recent settings; creates a new draft if none exist. Use to show current state on settings screen.\n     * @returns {Promise<object>}\n     */\n    getMostRecent() {\n        return this.getAll().then((settingsList)=> {\n            const lastSettings = settingsList[0];\n            if (!lastSettings) {\n                return this.createDraft({ useDefaults: true });\n            }\n            return lastSettings;\n        });\n    }\n\n    /**\n     * Creates new draft settings. Usually used when there's already 'active' settings, and you want to start with a new set without affecting existing runs.\n     *\n     * @param {{ useDefaults: boolean }} options If `useDefaults` is set, a draft is created with the default settings, else it clones the last available settings (either draft or active)\n     * @returns {Promise<object>}\n     */\n    createDraft(options) {\n        function getSettings(options) {\n            if (options.useDefaults) {\n                return this.getDefaults();\n            }\n            return this.getAll().then((settingsList)=> {\n                return settingsList[0] || this.getDefaults();\n            });\n        }\n        return getSettings.call(this, options || {}).then((defaults)=> {\n            const newSettings = $.extend(true, {}, defaults, { isDraft: true, key: Date.now() });\n            return this.ds.save(sanitize(newSettings));\n        }).then((d)=> {\n            this.state.currentDraft = d;\n            return d;\n        });\n    }\n\n    /**\n     * Resets draft to defaults. If you need to reset to previous settings, use `createDraft` instead.\n     *\n     * @returns {Promise<object>}\n     */\n    resetDraft() {\n        return this.createDraft({ useDefaults: true });\n    }\n\n    /**\n     * Updates current draft with provided settings. Creates draft if none exist.\n     *\n     * @param {Object} settings\n     * @returns {Promise<object>}\n     */\n    updateDraft(settings) {\n        return this._updateDraftOrCreate(settings);\n    }\n\n    /**\n     * Updates current *active* settings.\n     *\n     * @param {Object} newSettings\n     * @returns {Promise<object>}\n     */\n    updateActive(newSettings) {\n        return this.getCurrentActive().then((settings)=> {\n            if (!settings) {\n                throw new Error('No active settings found');\n            }\n            const toSave = sanitize($.extend(true, {}, settings, newSettings));\n            return this.ds.saveAs(settings.id, toSave);\n        });\n    }\n\n    /**\n     * Activates the current settings, and makes it so it can no longer be modified; this will be applied to new runs (if you use the settings strategy)\n     *\n     * @param {Object} settings\n     * @returns {Promise<object>}\n     */\n    saveAndActivate(settings) {\n        return this._updateDraftOrCreate(settings, { isDraft: false, key: Date.now() });\n    }\n}\n\nexport default SettingsService;\n\n\n// WEBPACK FOOTER //\n// ./src/managers/settings-manager/settings-service.js","import WorldManager from 'managers/world-manager';\nimport WorldService from 'service/world-api-adapter';\n\nimport ConsensusGroupService from 'service/consensus-api-service/consensus-group-service';\nimport strategy from './strategies/mandatory-consensus-strategy';\n\nfunction getCurrentWorldIdAndRoles(opts) {\n    if (opts.id && opts.roles) {\n        return $.Deferred().resolve({\n            id: opts.id,\n            roles: opts.roles\n        }).promise();\n    } else if (opts.worldId) {\n        const ws = new WorldService();\n        return ws.load(opts.worldId);\n    } else {\n        const wm = new WorldManager(opts);\n        return wm.getCurrentWorld();\n    }\n  \n}\nexport default class ConsensusManager {\n    constructor(config) {\n        const opts = {\n            name: 'default',\n            strategy: '',\n            strategyOptions: {\n\n            }\n        };\n        this.serviceOptions = $.extend(true, {}, opts, config);\n    }\n\n    getCurrent() {\n        return getCurrentWorldIdAndRoles(this.serviceOptions).then((world)=> {\n            const cg = new ConsensusGroupService($.extend({}, this.serviceOptions, {\n                worldId: world.id\n            }));\n            return strategy(cg, {\n                roles: world.roles,\n            });\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/consensus-manager/index.js","export default function mandatoryConsensusStrategy(consensusGroup, strategyOptions) {\n    const options = $.extend({}, {\n        maxRounds: Infinity,\n        name: (list)=> {\n            const NUMBER_SIZE = 3;\n            const number = `${list.length + 1}`.padStart(NUMBER_SIZE, '0');\n            return `round-${number}`;\n        }\n    }, strategyOptions);\n    return consensusGroup.list().then((consensusList)=> {\n        const lastConsensus = consensusList[consensusList.length - 1];\n        const isLastPending = lastConsensus && !lastConsensus.closed;\n        const allowCreateNew = options.maxRounds >= consensusList.length;\n\n        if (isLastPending || !allowCreateNew) {\n            return lastConsensus;\n        }\n\n        const name = options.name(consensusList);\n        const newConsensusPromise = consensusGroup.consensus(name).create({\n            roles: options.roles,\n            executeActionsImmediately: false\n        });\n        return newConsensusPromise;\n    });\n}\n\n\n// WEBPACK FOOTER //\n// ./src/managers/consensus-manager/strategies/mandatory-consensus-strategy.js"],"sourceRoot":""}