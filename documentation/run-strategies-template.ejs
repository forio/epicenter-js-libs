---
title: Run Manager Strategies
layout: "default"
isPage: true
---

<? var top = docfiles.pop() ?>

## Run Manager Strategies

The [Run Manager](../run-manager/) gives you control over run creation, depending on run state. You can select run creation stratgies (rules) for which runs end users of your project work with when they log in to your project.

There are several strategies included in Epicenter.js:

<? docfiles.forEach(function (doc) { ?><? var moduleName = doc.filename.split('/').pop().split('.')[0].replace('-strategy', '') ?>
* [<?= moduleName ?>](#<?= moduleName ?>)<? }); ?>

In addition, there are two strategies currently used only by the [Scenario Manager](../scenario-manager/):

* [baseline](../scenario-manager/baseline/)
* [current](../scenario-manager/current/)

You can also [create your own strategy](#create-your-own) and see [more details on working with Run Strategies](#working-with-run-strategies).

<? docfiles.forEach(function (doc) { ?>
    <? var moduleName = doc.filename.split('/').pop().split('.')[0].replace('-strategy', '') ?>
    <? var moduleDoc = doc.javadoc.shift() ?>
    <a name="<?= moduleName ?>"></a>
    #### <?= moduleName ?> 
    <? if (moduleDoc.name){ ?>###### a.k.a <?= moduleDoc.name ?> <? } ?><? if (moduleDoc.deprecated){ ?>##### DEPRECATED<? } ?>

    <?= moduleDoc.description ?>
    <? console.log(moduleDoc) ?>
<? }); ?>

<a name="create-your-own"></a>
### Create your Own

You can create your own strategy by passing in a function in the `strategy` parameter to the `F.manager.RunManager()` instantiation call. Strategy functions must return objects of the form:

	{
		getRun: function() {},
		reset: function() {}
	}

Some strategies have options you can specify through `strategyOptions` in the [Run Manager](../run-manager/). If you create your own strategy, this options object is passed in to your strategy function constructor. 

For example:

	// myNewStrategy.js
	var classFrom = require('../../util/inherit');
	var Base = {};
	var defaults = { };
	module.exports = classFrom(Base, {
	    constructor: function (options) {
	        this.options = $.extend(true, {}, defaults, options.strategyOptions);
	        // parse or set options as needed
	    },
	    getRun: function (runService, session) {
	    	// return the correct run
	    	// for example, the most recent run that matches some criteria of your choosing
	    },
	    reset: function (runService, session) {
	    	// how to respond to a reset call
	    	// for example, by creating a new run
	    }
	});

    <? var moduleDoc = top.javadoc.shift() ?>
    <?= moduleDoc.description ?>


    <? var firstTag = moduleDoc.raw.tags[0] ?>


    <? var configStart = 0 ?>
    <? top.javadoc.forEach(function (block) { ?>
        <? if (!block.paramStr && (block.returnTags.length == 0)) { ?>
            <? if (configStart === 0) { ?>
                #### Configuration Options

                <? configStart = 1 ?>
            <? } ?>
            <? var configOption =  block.raw.code.split(':')[0] ?>

            ##### <?= configOption ?>

            <? block.raw.tags.forEach(function (tag) { ?>
                <? if (tag.type === 'type') { ?>
                    - *<?= tag.types[0] ?>* 
                <? } ?>
                <? if (tag.type === 'see') { ?>
                    - See: <?= tag.local ?>
                <? } ?>
            <? }) ?>

            <?= block.description ?>
            
        <? } ?>
    <? }) ?>

    <? var methodStart = 0 ?>
    <? top.javadoc.forEach(function (block) { ?>
        <? if (block.paramStr) { ?>
            <? if (methodStart === 0) { ?>
                #### Methods

                <? methodStart = 1 ?>
            <? } ?>

            <? var methodName = block.raw.code.split(':')[0] ?>
            <? methodName = methodName.split(' =')[0] ?>

            ##### <?= methodName ?>
            <?= block.description ?>

            <? block.paramTags.forEach(function (tag) { ?>
                - `<?= tag.name ?>`: *<?= tag.joinedTypes ?>* <?= tag.description ?>
            <? }) ?>

        <? } ?>
    <? }) ?>

